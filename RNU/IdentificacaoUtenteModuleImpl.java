package ora.pt.cons.igif.sics.utentes;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import ora.pt.cons.igif.sics.ViewObjectImpl;
import ora.pt.cons.igif.sics.suporte.ListaCodigosHierarquicosLovImpl;
import ora.pt.cons.igif.sics.utils.*;

import oracle.jbo.DMLException;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class IdentificacaoUtenteModuleImpl extends ApplicationModuleImpl {
              
    private static Logger log = Logger.getLogger(IdentificacaoUtenteModuleImpl.class);
    
    private static final String CODIGO_ISENCAO_DADORES_SANGUE="1101" ;
    private static final String CODIGO_REGIME_ESPECIAL_PENSIONISTAS="2001" ;
    private static final String CODIGO_ENTIDADE_UMIC="9000000" ;

                
    public IdentificacaoUtenteModuleImpl() {
        PropertyConfigurator.configure(System.getProperty("sics.property.log4j.fileConfiguration"));
        log.info("IdentificacaoUtenteModuleImpl instanciado");
    }

    public static void main(String[] args) { 
        launchTester("ora.pt.cons.igif.sics.utentes", "IdentificacaoUtenteModuleLocal");
    }

    /* Container's getter's */
    
    // LISTAS - IDU
    public ListaUtentesImpl getListaUtentes() { return (ListaUtentesImpl)findViewObject("ListaUtentes"); }
    public ListaUtentesDuplicadosImpl getListaUtentesDuplicadosDetail() { return (ListaUtentesDuplicadosImpl)findViewObject("ListaUtentesDuplicadosDetail"); }
    public ListaUtentesDuplicadosImpl getListaUtentesDuplicados() { return (ListaUtentesDuplicadosImpl)findViewObject("ListaUtentesDuplicados"); }
    public DetalheUtenteImpl getDetalheUtente() { return (DetalheUtenteImpl)findViewObject("DetalheUtente"); }
    public UtenteEdicaoImpl getUtenteEdicao() { return (UtenteEdicaoImpl)findViewObject("UtenteEdicao"); }
    public ListaHistFamiliaImpl getFamiliaActiva() { return (ListaHistFamiliaImpl)findViewObject("FamiliaActiva"); }
    public ListaHistFamiliaImpl getListaHistFamilia() { return (ListaHistFamiliaImpl)findViewObject("ListaHistFamilia"); }
    public CorrespondenciaCorreioImpl getCorrespondenciaCorreio() { return (CorrespondenciaCorreioImpl)findViewObject("CorrespondenciaCorreio"); }
    public ListaAgregadoFamiliarImpl getListaAgregadoFamiliar() { return (ListaAgregadoFamiliarImpl)findViewObject("ListaAgregadoFamiliar"); }
    public ListaHistInscricoesImpl getListaHistInscricoes() { return (ListaHistInscricoesImpl)findViewObject("ListaHistInscricoes"); }
    public ListaHistMedicoImpl getListaHistMedico() { return (ListaHistMedicoImpl)findViewObject("ListaHistMedico"); }
    public ListaDuplicadosImpl getListaDuplicados() { return (ListaDuplicadosImpl)findViewObject("ListaDuplicados"); }
    public ListaEntidadesImpl getListaEntidades() { return (ListaEntidadesImpl)findViewObject("ListaEntidades"); }
    public ListaFamiliaImpl getListaFamilia() { return (ListaFamiliaImpl)findViewObject("ListaFamilia"); }
    public ListaFamiliaImpl getDetalheFamilia() { return (ListaFamiliaImpl)findViewObject("DetalheFamilia"); }
    public ListaEntidadesUtenteImpl getListaEntidadesUtente() { return (ListaEntidadesUtenteImpl)findViewObject("ListaEntidadesUtente"); }
    public ListaEntidadesUtenteImpl getListaHistEntidadesUtente() { return (ListaEntidadesUtenteImpl)findViewObject("ListaHistEntidadesUtente"); }
    public InscricaoActivaImpl getInscricaoActiva() { return (InscricaoActivaImpl)findViewObject("InscricaoActiva"); }
    public DetalheUtenteDuplicadoImpl getPotencialDuplicadoRP() { return (DetalheUtenteDuplicadoImpl)findViewObject("PotencialDuplicadoRP"); }
    public DetalheUtenteDuplicadoImpl getPotencialDuplicadoRD() { return (DetalheUtenteDuplicadoImpl)findViewObject("PotencialDuplicadoRD"); }
    public ListaContactosImpl getListaContactos() { return (ListaContactosImpl)findViewObject("ListaContactos"); }
    public ListaContactosImpl getContactoUtente() { return (ListaContactosImpl)findViewObject("ContactoUtente"); }
    public ListaContactosImpl getContactoUtenteDup() { return (ListaContactosImpl)findViewObject("ContactoUtenteDup"); }
    public ListaEntidadesEstrangeirasUtenteImpl getListaHistEntidadesEstrangeirasUtente() { return (ListaEntidadesEstrangeirasUtenteImpl)findViewObject("ListaHistEntidadesEstrangeirasUtente"); }
    public ListaEntidadesEstrangeirasUtenteImpl getListaEntidadesEstrangeirasUtente() { return (ListaEntidadesEstrangeirasUtenteImpl)findViewObject("ListaEntidadesEstrangeirasUtente"); }
    public ListaEntidadesEstrangeirasImpl getListaEntidadesEstrangeiras() { return (ListaEntidadesEstrangeirasImpl)findViewObject("ListaEntidadesEstrangeiras"); }
    public ListaBeneficiosDoUtenteImpl getListaBeneficiosDoUtente() { return (ListaBeneficiosDoUtenteImpl)findViewObject("ListaBeneficiosDoUtente"); }
    public ListaBeneficiosDoUtenteImpl getListaBeneficiosDoUtenteRegimeEspecial() { return (ListaBeneficiosDoUtenteImpl)findViewObject("ListaBeneficiosDoUtenteRegimeEspecial"); }
    public ListaBeneficiosDoUtenteImpl getListaBeneficiosDoUtenteIsencaoTaxaModeradora() { return (ListaBeneficiosDoUtenteImpl)findViewObject("ListaBeneficiosDoUtenteIsencaoTaxaModeradora"); }
    public ListaBeneficiosDoUtenteImpl getListaHistBeneficiosDoUtente() { return (ListaBeneficiosDoUtenteImpl)findViewObject("ListaHistBeneficiosDoUtente"); }
    public ListaUtentesDupImpl getListaUtentesDup() { return (ListaUtentesDupImpl)findViewObject("ListaUtentesDup"); }
    public ListaUtentesConfrontadosImpl getListaUtentesConfrontados() { return (ListaUtentesConfrontadosImpl)findViewObject("ListaUtentesConfrontados"); }
    public ListaUtentesInsEconomicaImpl getListaUtentesInsEconomica() { return (ListaUtentesInsEconomicaImpl)findViewObject("ListaUtentesInsEconomica"); }
    public ListaHistoricoEstadoInscricaoImpl getListaHistoricoEstadoInscricao() { return (ListaHistoricoEstadoInscricaoImpl)findViewObject("ListaHistoricoEstadoInscricao"); }
    
    /**Container's getter for ListaUsersMaternidade
     */
    public ListaUsersMaternidadeImpl getListaUsersMaternidade() { return (ListaUsersMaternidadeImpl)findViewObject("ListaUsersMaternidade");}
    
    // LISTAS - SUP
    public ListaCodigosHierarquicosLovImpl getListaPaisesLov() { return (ListaCodigosHierarquicosLovImpl)findViewObject("ListaPaisesLov"); }
    
    
    // VISTAS
    public PotencialDuplicadoViewImpl getPotencialDuplicadoView() { return (PotencialDuplicadoViewImpl)findViewObject("PotencialDuplicadoView"); }
    public InscricoesUtenteImpl getInscricoesUtente() { return (InscricoesUtenteImpl)findViewObject("InscricoesUtente"); }
    public HistoricoInscrsEquipasImpl getHistoricoInscrEquipas() { return (HistoricoInscrsEquipasImpl)findViewObject("HistoricoInscrEquipas"); }
    public MoradasUtenteImpl getMoradasUtente() { return (MoradasUtenteImpl)findViewObject("MoradasUtente"); }
    public FamiliasImpl getFamilias() { return (FamiliasImpl)findViewObject("Familias"); }
    public HistFamiliasImpl getHistFamilias() { return (HistFamiliasImpl)findViewObject("HistFamilias"); }
    public ContactoViewImpl getContactoView() { return (ContactoViewImpl)findViewObject("ContactoView"); }
    public EntidadesUtenteImpl getEntidadesUtente() { return (EntidadesUtenteImpl)findViewObject("EntidadesUtente"); }
    public BeneficiosDoUtenteImpl getBeneficiosDoUtente() { return (BeneficiosDoUtenteImpl)findViewObject("BeneficiosDoUtente"); }
    public IdentificacoesUtenteImpl getIdentificacoesUtente() { return (IdentificacoesUtenteImpl)findViewObject("IdentificacoesUtente"); }
    
    public UtentesNifDuplicadoImpl getUtentesNifDuplicado() { return (UtentesNifDuplicadoImpl)findViewObject("UtentesNifDuplicado"); }
    public UtentesNissDuplicadoImpl getUtentesNissDuplicado() { return (UtentesNissDuplicadoImpl)findViewObject("UtentesNissDuplicado"); }
    public UtentesDocIdentificacaoDuplicadosImpl getUtentesDocIdentificacaoDuplicados() { return (UtentesDocIdentificacaoDuplicadosImpl)findViewObject("UtentesDocIdentificacaoDuplicados"); }

    
    
    
    private SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    
    /* ------------------------------- DUPLICADOS ------------------------------- */
    /* -------------------------------------------------------------------------- */
    
    /*
    public int utentesDuplicadosLovAddWhereClause(String centro, 
                                                  String nir, 
                                                  String nome) {
        try{
            if (centro == null) centro = new String("");
            if (nir == null) nir = new String("");
            if (nome == null) nome = new String("");
    
            UtentesDuplicadosLovImpl vo = this.getUtentesDuplicadosLov();
            vo.clearWhereState();
            String whereClause = new String("");
    
            //TODO: ver a situacao do centro
            
            // if(centro.length() > 0){
            //    if( whereClause.length() > 0 )
            //        whereClause = whereClause.concat(" AND ");
            //    whereClause = whereClause.concat("csaude_cod = :centro");
            //    vo.defineNamedWhereClauseParam("centro", null, null);
            //    vo.setNamedWhereClauseParam("centro", centro);
            //}
            
            if (nir.length() > 0) {
                if (whereClause.length() > 0)
                    whereClause = whereClause.concat(" AND ");
                whereClause = whereClause.concat("nir = :nir");
                vo.defineNamedWhereClauseParam("nir", null, null);
                vo.setNamedWhereClauseParam("nir", nir);
            }
            if (nome.length() > 0) {
                if (whereClause.length() > 0)
                    whereClause = whereClause.concat(" AND ");
                whereClause = whereClause.concat("Idu_Ident_Ut_Id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
                vo.defineNamedWhereClauseParam("nome", null, null);
                vo.setNamedWhereClauseParam("nome", nome);
            }
    
            if (whereClause.length() > 0) {
                vo.setWhereClause(whereClause);
                vo.setMaxFetchSize(-1);
                vo.executeQuery();
                if (nir.length() > 0)
                    vo.removeNamedWhereClauseParam("nir");
                if (nome.length() > 0)
                    vo.removeNamedWhereClauseParam("nome");
                vo.setWhereClause(null);
            } else {
                vo.setMaxFetchSize(0);
                vo.executeQuery();
            }
            
        } catch(Throwable t){
          log.error(t);
          return -1;
        }
        return 0;
    }
    */
    
    public int listaUtentesDupAddWhereClause(Collection col) {
        int count = 0;
        try{
            Iterator params = col.iterator();
            ListaUtentesDupImpl vo = this.getListaUtentesDup();
            vo.clearWhereState();
            String whereClause = "";
            String operador = "";
    
            String nomeCompleto = "";
            String idadeDe = "";
            String idadeAte = "";
    
            while (params.hasNext()) {
                Object[][] linha = (Object[][])params.next();
                String tipo = (String)linha[0][0];
                String nome = (String)linha[0][1];
    
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                    !nome.equalsIgnoreCase("APELIDOS") && 
                    !nome.equalsIgnoreCase("idade")) {
                    vo.defineNamedWhereClauseParam(nome, null, null);
                }
    
                if (nome.equalsIgnoreCase("dta_nasc")) {
                    java.util.Date valor = (java.util.Date)linha[0][2];
                    oracle.jbo.domain.Date dtOra = 
                        new oracle.jbo.domain.Date(new java.sql.Date(valor.getTime()));
                    operador = "=";
                    vo.setNamedWhereClauseParam(nome, dtOra);
                } else if (nome.equalsIgnoreCase(("idade"))) {
                    if (idadeDe.equalsIgnoreCase(""))
                        idadeDe = (String)linha[0][2];
                    else
                        idadeAte = (String)linha[0][2];
                } else {
                    String valor = (String)linha[0][2];
                    if (tipo.equalsIgnoreCase("NUMBER")) {
                        Number num = new Number(0);
                        try {
                            num = new Number(valor);
                        } catch (Exception e) {
                          log.error(e);
                        }
                        operador = "=";
                        vo.setNamedWhereClauseParam(nome, num);
                    } else if (tipo.equalsIgnoreCase("STRING") && 
                               !nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                               !nome.equalsIgnoreCase("APELIDOS") && 
                               !nome.equalsIgnoreCase("idade")) {
                        operador = "like";
                        vo.setNamedWhereClauseParam(nome, valor);
                    } else if (nome.equalsIgnoreCase("NOMES_PROPRIOS") || 
                               nome.equalsIgnoreCase("APELIDOS")) {
                        // constroi nome completo para posterior definicao da where clause para procura por 'nomes_proprios' ou 'apelidos'
                        String sep = nomeCompleto.length() > 0 ? " " : "";
                        nomeCompleto = nomeCompleto + sep + valor;
                    }
    
                }
    
                if (whereClause.length() > 0) {
                    if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                        !nome.equalsIgnoreCase("APELIDOS") && 
                        !nome.equalsIgnoreCase("idade")) {
                        whereClause = 
                                whereClause.concat(" AND " + nome + " " + operador + 
                                                   " :" + nome);
                    }
    
                } else {
                    if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                        !nome.equalsIgnoreCase("APELIDOS") && 
                        !nome.equalsIgnoreCase("idade")) {
                        whereClause = 
                                whereClause.concat(nome + " " + operador + " :" + 
                                                   nome);
                    }
                }
    
                if (operador.equalsIgnoreCase("LIKE")) {
                    whereClause = whereClause.concat(" || '%'");
                }
    
            }
    
            // -- procurar por idade
            if (idadeDe.length() > 0) {
                if (whereClause.length() > 0) {
                    if (idadeDe.length() > 0)
                        whereClause = 
                                whereClause.concat(" and idade >= " + idadeDe + 
                                                   " ");
                    if (idadeAte.length() > 0)
                        whereClause = 
                                whereClause.concat(" and idade <= " + idadeAte + 
                                                   " ");
                } else {
                    if (idadeDe.length() > 0)
                        whereClause = 
                                whereClause.concat(" idade >= " + idadeDe + " ");
                    if (idadeAte.length() > 0 && whereClause.length() > 0)
                        whereClause = 
                                whereClause.concat(" and idade <= " + idadeAte + 
                                                   " ");
                }
            }
    
            if (nomeCompleto.length() > 0) {
                if (whereClause.length() > 0) {
                    whereClause = 
                            whereClause.concat(" and iiu_dup_id in ( select column_value from table(geral_manual.procura_nome_dup(:nome)))");
                    // whereClause = whereClause.concat(" and row_id in ( select column_value from table(geral_manual.procura_nome_rowid(:nome)))"); 
                } else {
                    whereClause = 
                            whereClause.concat(" iiu_dup_id in ( select column_value from table(geral_manual.procura_nome_dup(:nome)))");
                    // whereClause = whereClause.concat(" row_id in ( select column_value from table(geral_manual.procura_nome_rowid(:nome)))"); 
                }
                vo.defineNamedWhereClauseParam("nome", null, null);
                vo.setNamedWhereClauseParam("nome", nomeCompleto);
            }
            
            // limitar registos a 100
            if (whereClause.length() > 0) {
                    whereClause = whereClause.concat(" and rownum < 101 ");
            } else {
                    whereClause = whereClause.concat(" rownum < 101 ");
            }
            
            
            vo.setWhereClause(whereClause);
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
         
            params = null;
            params = col.iterator();
            while (params.hasNext()) {
                Object[][] linha = (Object[][])params.next();
                String nome = (String)linha[0][1];
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                    !nome.equalsIgnoreCase("APELIDOS") && 
                    !nome.equalsIgnoreCase("idade")) {
                    vo.removeNamedWhereClauseParam(nome);
                }
            }
    
            if (nomeCompleto.length() > 0) {
                vo.removeNamedWhereClauseParam("nome");
            }
    
            vo.setWhereClause(null);
            count = vo.getRowCount();
        
        } catch(Throwable t){
          log.error(t);
          return -1;
        }
        return count;
    }
    
    public void listaUtentesDuplicadosDetailAddWhereClause(String ipdId,String numDup){
        try{
            ListaUtentesDuplicadosImpl vo = getListaUtentesDuplicadosDetail();
            vo.clearWhereState();
            if(ipdId.length()>0 || numDup.length()>0){
                String selectClause = "num_dup = :iptNumDup and pot_dup_id in (" +
                "(select id from idu_ident_ut_pot_dup where num_dup = :iptNumDup)" +
                "minus" +
                "(select to_number(:ipdId) from dual))";
                vo.setWhereClause(selectClause);
                vo.defineNamedWhereClauseParam("ipdId", null, null);
                vo.setNamedWhereClauseParam("ipdId", ipdId);
                vo.defineNamedWhereClauseParam("iptNumDup", null, null);
                vo.setNamedWhereClauseParam("iptNumDup", numDup);            
                vo.setMaxFetchSize(-1);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("",e);
        }
    }
    
    public void listaUtentesDuplicadosAddWhereClause(String nir, 
                                                     String nome, 
                                                     String codEntResp, 
                                                     String entResp, 
                                                     String nBenef, 
                                                     String dataNasc, 
                                                     String idadeMax, 
                                                     String idadeMin, 
                                                     Object[] centro,
                                                     String idUtente) throws Exception, DataValidationException{
        try{
            ListaUtentesDuplicadosImpl vo = getListaUtentesDuplicados();
            if (nir == null){ nir = new String(""); } 
            if (nome == null){ nome = new String(""); }
            if (codEntResp == null){ codEntResp = new String(""); }
            if (entResp == null){ entResp = new String(""); }
            if (nBenef == null) { nBenef = new String(""); }
            if (dataNasc == null) { dataNasc = new String(""); }
            if (idadeMax == null) { idadeMax = new String(""); }
            if (idadeMin == null) { idadeMin = new String(""); }
            if (idUtente == null) { idUtente = new String(""); }
            
            // alteração efetuada por Rui Moura ()18-01-2013) p/ obrigar a que elementos obrigatórios venham fornecidos
            // caso isso não se verifique invalida operação e marca vo para não carregar
            if(nir.length()==0 && nome.length()==0 && idUtente.length()==0 && centro == null){
                vo.setMaxFetchSize(0);
                // Esta validação está tamb+em a ser feita do lado do Controller
                throw new DataValidationException("Elementos obrigatórios para pesquisa de duplicados em falta.");
            }

            String selectClause = "";
            String fromClause = "";
            
            if (selectClause.length() > 0) { selectClause = selectClause.concat(" AND "); }
             
             selectClause = selectClause.concat("iiu.ID IN(    SELECT " + 
                                                     "                DISTINCT IIUPD.idu_ident_ut_id" + 
                                                     "           FROM IDU_IDENT_UT iiu," + 
                                                     "                IDU_IDENT_UT_POT_DUP IIUPD" + 
                                                     "                <from_clause>" + 
                                                     "          WHERE iiu.ID = iiupd.idu_ident_ut_id");
                                                     
            if(idUtente.length()>0){
                if (selectClause.length() > 0) {
                    selectClause = selectClause.concat(" AND ");
                }
                selectClause = selectClause.concat("iiu.id = :idUtente");
            } else {
   
                if (nir.length() > 0) {
                    if (selectClause.length() > 0) {
                        selectClause = selectClause.concat(" AND ");
                    }
                    selectClause = selectClause.concat("iiu.nir = :nir");
                }
                
                if (nome.length() > 0) {
                    if (selectClause.length() > 0) {
                        selectClause = selectClause.concat(" AND ");
                    }
                    selectClause = selectClause.concat("iiu.id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
                }
                
                if (dataNasc.length() > 0) {
                    if (selectClause.length() > 0) {
                        selectClause = selectClause.concat(" AND ");
                    }
                    selectClause = selectClause.concat("iiu.DTA_NASC = to_date(':dataNasc','DD-MM-YYYY')");
                }
                
                if (idadeMax.length() > 0 && idadeMin.length() > 0) {
                    if (selectClause.length() > 0) {
                        selectClause = selectClause.concat(" AND ");
                    }
                    selectClause = selectClause.concat("TRUNC(MONTHS_BETWEEN(SYSDATE,iiu.DTA_NASC)/12 ) >= :idadeMin " + "AND TRUNC(MONTHS_BETWEEN(SYSDATE,iiu.DTA_NASC)/12 ) <= :idadeMax");
                }
                
                if (codEntResp.length() > 0 || entResp.length() > 0 || 
                    nBenef.length() > 0) {
                    fromClause = fromClause.concat(", idu_hist_ent_ut ihe");
                    if (selectClause.length() > 0) {
                        selectClause = selectClause.concat(" AND ");
                    }
                    selectClause = selectClause.concat("iiu.id = ihe.idu_ident_ut_id");
                }
                
                if (codEntResp.length() > 0) {
                    if (selectClause.length() > 0){
                        selectClause = selectClause.concat(" AND ");
                    }
                    fromClause = fromClause.concat(", sys_entidades entresp");
                    selectClause = selectClause.concat("entresp.codigo = :codEntResp AND entresp.ID = ihe.sys_entidades_resp_id");
                    vo.defineNamedWhereClauseParam("codEntResp", null, null);
                    vo.setNamedWhereClauseParam("codEntResp", codEntResp);
                }
                if (codEntResp.length() == 0 && entResp.length() > 0) {
                    if (selectClause.length() > 0){
                        selectClause = selectClause.concat(" AND ");
                    }
                    fromClause = fromClause.concat(", sys_entidades entresp");
                    selectClause = selectClause.concat("UPPER(entresp.designacao) like UPPER(:entResp)||'%' AND entresp.ID = ihe.sys_entidades_resp_id");
                    vo.defineNamedWhereClauseParam("entResp", null, null);
                    vo.setNamedWhereClauseParam("entResp", entResp);
                }
                if (nBenef.length() > 0) {
                    if (selectClause.length() > 0){
                        selectClause = selectClause.concat(" AND ");
                    }            
                    selectClause = selectClause.concat("ihe.numbenef = :nBenef");
                    vo.defineNamedWhereClauseParam("nBenef", null, null);
                    vo.setNamedWhereClauseParam("nBenef", nBenef);
                }
                
              
                
            }
            
            if(centro!=null){
                if (centro.length > 0) {
                    
                    String sqlIn = "";
                    for (int i = 0 ; i < centro.length ; i++)  {
                        sqlIn = sqlIn + centro[i];
                        if(!((centro.length-1) == i)){
                            sqlIn = sqlIn + ",";
                        }
                    }
    
                    fromClause = fromClause.concat(", idu_inscr iin" + ", sys_entidades sen");
                    if (selectClause.length() > 0)
                        selectClause = selectClause.concat(" AND ");
                    selectClause = selectClause.concat("sen.id = iin.sys_entidades_id AND iin.data_fim IS NULL AND iiu.id = iin.idu_ident_ut_id AND sen.id in(" + sqlIn + ") ");
                }
            }
            
            if (selectClause.length() > 0) {
                if (fromClause.length() > 0) {
                    selectClause = selectClause.replaceAll("<from_clause>", fromClause);
                } else {
                    selectClause = selectClause.replaceAll("<from_clause>", "");
                }
    
                if (nir.length() > 0 || nome.length() > 0 || 
                    codEntResp.length() > 0 || entResp.length() > 0 || 
                    nBenef.length() > 0 || dataNasc.length() > 0 || 
                    idadeMax.length() > 0 || idadeMin.length() > 0 || 
                    centro!=null || idUtente.length() > 0) {
                   
                    selectClause =  selectClause.concat(")");
                }
                selectClause = (" AND iiupd.num_dup in (" +
                "SELECT " +
                "iiupd.num_dup          num_dup " +
                "FROM " + 
                "idu_ident_ut           iiu, " +
                "idu_ident_ut_pot_dup   iiupd " + 
                "WHERE " +
                "iiu.id                 = iiupd.idu_ident_ut_id and ").concat(selectClause);
                
                
                String newQuery = "SELECT * FROM (".concat(vo.getQuery());
                newQuery = newQuery.concat(selectClause);
                newQuery = newQuery.concat(")) WHERE PAI = 'S'  AND rownum < 101  order by nome_normalizado ");   
                selectClause = selectClause.concat(" ");
                newQuery = newQuery.replaceAll(":nir","" + nir + "");
                newQuery = newQuery.replaceAll(":idUtente","" + idUtente + "");
                newQuery = newQuery.replaceAll(":nome","'" + nome + "'");
                newQuery = newQuery.replaceAll(":idadeMin","" + idadeMin + "");
                newQuery = newQuery.replaceAll(":idadeMax","" + idadeMax + "");
                newQuery = newQuery.replaceAll(":dataNasc","" + dataNasc + "");
                vo.setQuery(newQuery);
                
                
                vo.clearWhereState();
                vo.clearCache();
                vo.setMaxFetchSize(-1);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                try{
                    vo.executeQuery();
                }catch(Exception e){
                    e.printStackTrace();
                }
    
                if (codEntResp.length() > 0){
                    vo.removeNamedWhereClauseParam("codEntResp");
                }
                if (codEntResp.length() == 0 && entResp.length() > 0){
                    vo.removeNamedWhereClauseParam("entResp");
                }
                if (nBenef.length() > 0) {
                    vo.removeNamedWhereClauseParam("nBenef");
                }
               
                selectClause = null;
                vo.setWhereClause(null);
                vo.setQuery(null);
    
            } else {
                vo.setMaxFetchSize(0);
                vo.executeQuery();
            }
        } 
        catch(Exception t){
          log.error("",t);
          throw t;
        }
    }

    public void listaDuplicadosAddWhereClause(String numDup, String idUtente) {
        ListaDuplicadosImpl vo = getListaDuplicados();
        vo.clearWhereState();
        if(numDup !=null && idUtente!=null){
            vo.setnumDup(numDup);
            vo.setidUtente(idUtente);
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }
    
    public void resolveDuplicados(String idUtentRef, 
                                  String userRnu,
                                  String numDup, 
                                  HashMap estado,
                                  String blIncricao,
                                  String blBeneficios,
                                  String blSubsistemas,
                                  String blContactos,
                                  String blDocIdent,
                                  String blNiss,
                                  String blNif
                                  )throws SQLException, 
                                                               Exception {
        
        log.debug("idUtenteRef: " + idUtentRef + " \n" + "numDup: " + numDup );
          
           
        if (idUtentRef == null || idUtentRef.length() == 0) {
            throw new DataValidationException("identificador do utente não fornecido");
        }
        
        if (numDup == null || numDup.length() == 0) {
            throw new DataValidationException("identificador do utente duplicado não fornecido");
        }
            
        String query = new String("");
        query = query.concat("DECLARE\n" + "  tset POTDUPSET; \n");
        for (int i = 0; i < estado.size(); i++) {
            query = query.concat("t" + i + " POTDUPREC;\n");
        }
        query = query.concat("BEGIN\n");
        String id = "";
        java.util.Iterator it = estado.keySet().iterator();
        int i = 0;
        while (it.hasNext()) {
            id = (String)it.next();
            String value = (String)estado.get(id);
            query = query.concat("t" + i + " := POTDUPREC(" + id + "," + (value.equals("M") == true ? "1" : "0") + 
                                 "," + (value.equals("O") == true ? "1" : "0") + 
                                 "," + (value.equals("D") == true ? "1" : "0") + ");\n");
            i++;
        }
        query = query.concat("tset := PotDupSet(");
        for (int x = 0; x < estado.size(); x++) {
            if (x != 0) {
                query = query.concat(", ");
            }
            query = query.concat("t" + x);
        }
        query = query.concat(");\n");
        
        query = query.concat("duplicados.RESOLVER_APLICACAO_NOVO(" + idUtentRef + "," + numDup +",'"+
        userRnu+"',tset,").concat(blIncricao).concat(",").concat(blBeneficios).concat(",").concat(blSubsistemas).concat(",").concat(blContactos).concat(",")
        .concat(blDocIdent).concat(",").concat(blNiss).concat(",").concat(blNif).concat(",").concat("?,?);\n");
        query = query.concat("END;");
        CallableStatement statement = null;
        log.debug(query);
        try {
            statement = this.getDBTransaction().createCallableStatement(query, 1);
            statement.registerOutParameter(1, Types.NUMERIC);
            statement.registerOutParameter(2, Types.VARCHAR);
            statement.execute();
            String erroCod = statement.getString(1);
            String errorMessage = statement.getString(2);
            if (!erroCod.equals("0")) {
                this.getDBTransaction().rollback();
                throw new JboException(errorMessage, erroCod, null);
            }
        } catch (SQLException e) {
          log.error("",e);  
          this.getDBTransaction().rollback();
          throw e;
        } 
        
        finally {
            try  {
                if(statement != null){
                    statement.close();
                }
            } catch (Exception ex)  {
            }
        }
    }
    
    /* -- COPIA 18-11-2010
    public void resolveDuplicados(String idUtentRef, 
                                  String numDup, 
                                  HashMap estado,
                                  String blIncricao,
                                  String blBeneficios,
                                  String blSubsistemas) throws SQLException {
                                  
        if (idUtentRef == null || idUtentRef.length() == 0) {
            System.out.println("ERRO:nao recebeu o idUtentRef");
            return;
        }
        if (numDup == null || numDup.length() == 0) {
            System.out.println("ERRO:nao recebeu o numDup");
            return;
        }
        if (numDup.length() == 0) {
            System.out.println("nao existe utentes a resolver");
        }

        System.out.println("IdUtente de referencia: " + idUtentRef);
        System.out.println("numDupUtente: " + numDup);

        String query = new String("");
        query = query.concat("DECLARE\n" + "  tset POTDUPSET; \n");
        for (int i = 0; i < estado.size(); i++) {
            query = query.concat("t" + i + " POTDUPREC;\n");
        }
        query = query.concat("BEGIN\n");
        
        
        String id = "";
        java.util.Iterator it = estado.keySet().iterator();
        int i = 0;
        while (it.hasNext()) {
            id = (String)it.next();
            String value = (String)estado.get(id);
            query = query.concat("t" + i + " := POTDUPREC(" + id + "," + (value.equals("M") == 
                                                                          true ? 
                                                                          "1" : 
                                                                          "0") + 
                                 "," + 
                                 (value.equals("O") == true ? "1" : "0") + 
                                 "," + 
                                 (value.equals("D") == true ? "1" : "0") + 
                                 ");\n");
            i++;
        }
        query = query.concat("tset := PotDupSet(");
        for (int x = 0; x < estado.size(); x++) {
            if (x != 0)
                query = query.concat(", ");
            query = query.concat("t" + x);
        }
        query = query.concat(");\n");
        
        // <inicio> código para optar por blocos de informação
        
         
         if(blIncricao.equals("DUP")){
             // INSCRIÇÃO - eliminar registos do principal e adoptar os do duplicado
             query = query.concat(" DELETE FROM IDU_HIST_FAMILIA WHERE idu_inscr_id in ( select id from idu_inscr where idu_ident_ut_id = ").concat(idUtentRef).concat(" );\n");
             query = query.concat(" DELETE FROM IDU_INSCR WHERE idu_ident_ut_id = ").concat(idUtentRef).concat(";\n");
             query = query.concat(" UPDATE IDU_INSCR  SET idu_ident_ut_id = ").concat(idUtentRef).concat(" WHERE idu_ident_ut_id = ").concat(id).concat(";\n"); 
         }
        
         if(blBeneficios.equals("DUP")){
             // BENEFICIOS - eliminar registos do principal e adoptar os do duplicado
             // -- eliminar associacao de avisos aos beneficios para o utente 
             query = query.concat(" DELETE FROM SAV_HIST_IHB WHERE sys_avisos_id in ( select id from sys_avisos where idu_ident_ut_id = ").concat(idUtentRef).concat(");\n");
             // -- eliminar sys_avisos dos subsistemas
             query = query.concat(" DELETE FROM SYS_AVISOS WHERE scg_tipo_aviso_id in ( select id from sys_cod_genericos where codigo = 'BENEFICIO_EXPIRADO' ) and idu_ident_ut_id = ").concat(idUtentRef).concat(";\n");
             // -- eliminar beneficios para o utente
             query = query.concat(" DELETE FROM IDU_HIST_BENEF WHERE idu_ident_ut_id = ").concat(idUtentRef).concat(";\n");
             // -- adoptar beneficios do utente duplicado
             query = query.concat(" UPDATE IDU_HIST_BENEF SET idu_ident_ut_id = ").concat(idUtentRef).concat(" WHERE idu_ident_ut_id = ").concat(id).concat(";\n");
             
         }
         
         if(blSubsistemas.equals("DUP")){
             // SUBSISTEMAS - eliminar registos do principal e adoptar os do duplicado
             // -- eliminar associacao de avisos aos subsistemas para o utente 
             query = query.concat(" DELETE FROM SAV_HIST_IHB WHERE sys_avisos_id in ( select id from sys_avisos where idu_ident_ut_id = ").concat(idUtentRef).concat(");\n");
             // -- eliminar sys_avisos dos subsistemas
             query = query.concat(" DELETE FROM SYS_AVISOS WHERE scg_tipo_aviso_id in ( select id from sys_cod_genericos where codigo = 'ENTIDADE_EXPIROU' ) and idu_ident_ut_id = ").concat(idUtentRef).concat(";\n");
             // -- eliminar entidades para o utente
             query = query.concat(" DELETE FROM IDU_HIST_ENT_UT WHERE idu_ident_ut_id = ").concat(idUtentRef).concat(";\n");
             // -- adoptar entidades do utente duplicado
             query = query.concat(" UPDATE IDU_HIST_ENT_UT SET idu_ident_ut_id = ").concat(idUtentRef).concat(" WHERE idu_ident_ut_id = ").concat(id).concat(";\n");
         }
         
         // * <fim> código para optar por blocos de informação
         
        query = query.concat("duplicados.resolver('" + idUtentRef + "','" + numDup + "',tset,? ,? );\n");
        query = query.concat("END;");
        CallableStatement statement;
        DBTransaction con = this.getDBTransaction();
        try {
            log.debug("query<"+ query +">");
            statement = con.createCallableStatement(query, 1);
            statement.registerOutParameter(1, Types.NUMERIC);
            statement.registerOutParameter(2, Types.VARCHAR);
            statement.execute();
            String erroCod = statement.getString(1);
            String errorMessage = statement.getString(2);
            if (!erroCod.equals("0")) {
                System.out.println("ERRO Num:" + erroCod);
                System.out.println("ERRO Num:" + errorMessage);
                con.rollback();
                throw new JboException(errorMessage, erroCod, null);
            } else {
                //System.out.println("SUCESSO: " + erroCod);
                //System.out.println("SUCESSO: " + errorMessage);
                //con.rollback();
                //throw new JboException(errorMessage, erroCod, null);                
                //con.commit();
            }
        } catch (SQLException e) {
          log.error("",e);  
          con.rollback();
          throw e;
        }
    }
    

    /* ------------------------------- IDENTIFICACAO ------------------------------- */
    /* ----------------------------------------------------------------------------- */

    // -- ListaHistoricoFamilia
    public void listaHistFamiliaAddWhereClause(String idUtente, String idEntidadeInscr, String IdEntidadeSessao) throws Exception {
        ListaHistFamiliaImpl vo = this.getListaHistFamilia();
        vo.clearWhereState(); 
        vo.clearCache();
        if (idUtente != null) {
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("iin.idu_ident_ut_id",idUtente);
            vo.setWhereClause("AND (iin.sys_entidades_id ="+idEntidadeInscr+" or iin.sys_entidades_id = "+IdEntidadeSessao+")");
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();  
        } else {
            vo.setMaxFetchSize(0);
        }
    }
    
    //listaHistFamiliaAddWhereClauseByUtenteByCs
    
     public void listaHistFamiliaAddWhereClauseByUtenteByCs(String idUtente, String idCs, String idEntidadeSessao) throws Exception {
         ViewObjectImpl vo = getListaHistFamilia();
         vo.clearWhereState(); 
         vo.clearCache();
         if (idUtente != null && idCs!=null) {
            // obter centro de saude sede
             vo.setMaxFetchSize(-1);
             vo.setWhereClause( "idu_ident_ut_id ="+idUtente+" and sen_id in ( select id from sys_entidades where sys_entidades_id in ( select sys_entidades_id from sys_entidades where id in ( "+idCs + " ,"+idEntidadeSessao+"  ) )  )    ");
             vo.setNamedWhereClauseParam("bindDummy", 1);
             vo.executeQuery();  
         } else {
             vo.setMaxFetchSize(0);
         }
     }

    // -- pesquisa de utentes
    public int listaUtentesAddWhereClause(Collection col, Number maxFS) {
        Iterator params = col.iterator();
        ListaUtentesImpl vo = this.getListaUtentes();   
        
        vo.clearWhereState(); 
        vo.clearCache();
        
        String whereClause = "";
        String operador = "";
        String nomeCompleto = "";
        String idadeDe = "";
        String idadeAte = "";
        
        int retVal = 0;

        while (params.hasNext()) {
            Object[][] linha = (Object[][])params.next();
            String tipo = (String)linha[0][0];
            String nome = (String)linha[0][1];
            
           
            if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                vo.defineNamedWhereClauseParam(nome, null, null);
            }

            if (nome.equalsIgnoreCase("dta_nasc")) {
                java.util.Date valor = (java.util.Date)linha[0][2];
                oracle.jbo.domain.Date dtOra = new oracle.jbo.domain.Date(new java.sql.Date(valor.getTime()));
                operador = "=";
                vo.setNamedWhereClauseParam(nome, dtOra);
            } else if (nome.equalsIgnoreCase(("idade"))) {
                if (idadeDe.equalsIgnoreCase(""))
                    idadeDe = (String)linha[0][2];
                else
                    idadeAte = (String)linha[0][2];
            } else {
                String valor = (String)linha[0][2];
                if (tipo.equalsIgnoreCase("NUMBER")) {
                    Number num = new Number(0);
                    try {
                        num = new Number(valor);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    operador = "=";
                    vo.setNamedWhereClauseParam(nome, num);
                }
                else if(nome.equalsIgnoreCase("SEXO") ){                    
                    operador = "=";
                    vo.setNamedWhereClauseParam(nome, valor);
                }else if (tipo.equalsIgnoreCase("STRING") && !nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    operador = "like";
                    vo.setNamedWhereClauseParam(nome, valor);
                } else if (nome.equalsIgnoreCase("NOMES_PROPRIOS") || nome.equalsIgnoreCase("APELIDOS")) {
                    // constroi nome completo para posterior definicao da where clause para procura por 'nomes_proprios' ou 'apelidos'
                    String sep = nomeCompleto.length() > 0 ? " " : "";
                    nomeCompleto = nomeCompleto + sep + valor;
                }
            }

            if (whereClause.length() > 0) {
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    whereClause = whereClause.concat(" AND " + nome + " " + operador + " :" + nome);
                }

            } else {
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    whereClause = whereClause.concat(nome + " " + operador + " :" + nome);
                }
            }

            if (operador.equalsIgnoreCase("LIKE")) {
                whereClause = whereClause.concat(" || '%'");
            }
        }

        // -- procurar por idade
        if (idadeDe.length() > 0) {
            if (whereClause.length() > 0) {
                if (idadeDe.length() > 0)
                    whereClause = whereClause.concat(" and idade >= " + idadeDe + " ");
                if (idadeAte.length() > 0)
                    whereClause = whereClause.concat(" and idade <= " + idadeAte + " ");
            } else {
                if (idadeDe.length() > 0)
                    whereClause = whereClause.concat(" idade >= " + idadeDe + " ");
                if (idadeAte.length() > 0 && whereClause.length() > 0)
                    whereClause = whereClause.concat(" and idade <= " + idadeAte + " ");
            }
        }

        if (nomeCompleto.length() > 0) {
            if (whereClause.length() > 0) {
                whereClause = whereClause.concat(" and iiu_id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
            } else {
                whereClause = whereClause.concat(" iiu_id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
            }
            vo.defineNamedWhereClauseParam("nome", null, null);
            vo.setNamedWhereClauseParam("nome", nomeCompleto);
        }
       
        // limitar registos a 100
        if(!maxFS.isZero()){
            if (whereClause.length() > 0) {
                whereClause = whereClause.concat(" and rownum < " + maxFS );
            } else {
                whereClause = whereClause.concat(" rownum < " + maxFS );
            }
        }
        
        if(whereClause.length()>0){
            //System.out.println(whereClause);
            log.info(whereClause);
            vo.setWhereClause(whereClause);
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
            retVal= vo.getRowCount();
        } else {
            vo.setMaxFetchSize(0);
        }
        
        return retVal;
    }
    
    /* Adiciona por Tiago Costa a 16/05/2013 */
     public int listaNovosUtentesAddWhereClause(String medico, Object[] unidades, java.util.Date dataDe, java.util.Date dataA, Number maxFS) throws Exception {
         ListaNovosUtentesImpl vo = this.getListaNovosUtentes();   
         vo.clearWhereState(); 
         vo.clearCache();
         vo.clearViewCriterias();
         
         String whereClause = "";
         
         int retVal = 0;
         
         try {
         
             if(unidades!=null){
                 if (unidades.length > 0) {
                     
                     String sqlIn = "";
                     for (int i = 0 ; i < unidades.length ; i++)  {
                         sqlIn = sqlIn + unidades[i];
                         if(!((unidades.length-1) == i)){
                             sqlIn = sqlIn + ",";
                         }
                     }
                     whereClause = whereClause.concat("ent_inscr_id in(" + sqlIn + ") ");
                 }
             }
         
         /*if(unis!=null && !unis.trim().equals(""))
         {
            whereClause+=" ent_inscr_id = "+unis;
         } */
         
         if(medico!=null && !medico.trim().equals(""))
         {
             if(whereClause.length()>0){
                 whereClause+=" and medico_id = "+medico;
             }else{
                 whereClause+=" medico_id = "+medico;
             }
         }
         
         
         oracle.jbo.domain.Date dtA = null;
         if(dataA == null) {
             dtA = new oracle.jbo.domain.Date(new java.sql.Date(Calendar.getInstance().getTime().getTime()));
         }else{
            dtA = new oracle.jbo.domain.Date(new java.sql.Date(dataA.getTime()));
         }
         
         vo.defineNamedWhereClauseParam("dtA", null, null);
         
         if(dataDe!=null)
         {
            vo.defineNamedWhereClauseParam("dtDe", null, null);
            oracle.jbo.domain.Date dtDe = new oracle.jbo.domain.Date(new java.sql.Date(dataDe.getTime()));
            
             if(whereClause.length()>0){
                 whereClause+= " and dta_nasc >= :dtDe";
                // whereClause+=" and dta_nasc >=to_date('"+dtDe+"')";
             }else{
                 whereClause+= " dta_nasc >= :dtDe";
                 //whereClause+=" dta_nasc >= to_date('"+dtDe+"')";
             }
             vo.setNamedWhereClauseParam("dtDe",dtDe);
         }
         
         
         if(whereClause.length()>0){
             whereClause+= " and dta_nasc <= :dtA";
//             whereClause+=" and dta_nasc <=to_date('"+dtA+"')";
         }
         else{
             whereClause+= " dta_nasc <= :dtA";
//             whereClause+="dta_nasc <= to_date('"+dtA+"')";
         }
         
        vo.setNamedWhereClauseParam("dtA",dtA);
       whereClause += " AND rownum<101 ";
         if(whereClause.length()>0){
             //System.out.println(whereClause);
             log.info(whereClause);
             vo.setWhereClause(whereClause);
             
             vo.setMaxFetchSize(-1);
             
             vo.executeQuery();
             retVal= vo.getRowCount();
         } else {
             vo.setMaxFetchSize(0);
         }
         } catch (Exception e1) {
             throw e1;
         }
         
         return retVal;
     }

    public void edicaoUtenteAddWhereClause(String idUtente) {
        UtenteEdicaoImpl vo = this.getUtenteEdicao();
        vo.clearWhereState(); 
        vo.clearCache();
        if(idUtente.length()>0){
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("iiu_id = " + idUtente);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }

    public void edicaoUtenteInscricaoActivaAddWhereClause(String idInscricao) throws Exception {
        InscricaoActivaImpl vo = this.getInscricaoActiva();
        vo.clearWhereState(); 
        vo.clearCache();
        if(idInscricao!=null && idInscricao.length()>0){
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("idUtente", idInscricao);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }

    // -- lista entidades do utente
    public void listaEntidadesUtenteAddWhereClause(String idUtente, 
                                                   String entidade, 
                                                   String beneficiario, 
                                                   String dataValidade) throws Exception {
        ListaEntidadesUtenteImpl vo = this.getListaEntidadesUtente();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        
        String query = "";
        if (idUtente != null)
            query += " idUtente = :idUtente ";
        else
            throw new Exception("Identificador do utente em falta.");
        if (entidade != null)
            query += " AND    DESC_ENT_ABRV = :entidade ";
        if (beneficiario != null)
            query += " AND    numBenef = :beneficiario ";
        if (dataValidade != null)
            query += " AND    dtVal    = TO_DATE(:dataValidade,'dd-mm-yyyy') ";
        if (query.length() > 0) {
            vo.setWhereClause(query);
            vo.defineNamedWhereClauseParam("idUtente", null, null);
            vo.setNamedWhereClauseParam("idUtente", idUtente);

            if (entidade != null) {
                vo.defineNamedWhereClauseParam("entidade", null, null);
                vo.setNamedWhereClauseParam("entidade", entidade);
            }
            if (beneficiario != null) {
                vo.defineNamedWhereClauseParam("beneficiario", null, null);
                vo.setNamedWhereClauseParam("beneficiario", beneficiario);
            }
            if (dataValidade != null) {
                vo.defineNamedWhereClauseParam("dataValidade", null, null);
                vo.setNamedWhereClauseParam("dataValidade", dataValidade);
            }
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }

    public void edicaoUtenteFamiliaActivaAddWhereClause(String idInscricao) {
        ListaHistFamiliaImpl vo = this.getFamiliaActiva();
        vo.clearWhereState(); 
        vo.clearCache();
        if(idInscricao!=null){
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("data_fim is null and idu_inscr_id = " + idInscricao);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();   
        } else {
            vo.setMaxFetchSize(0);
        }
    }

    public void edicaoUtenteCorrespondenciaAddWhereClause(String idUtente) {
        CorrespondenciaCorreioImpl vo = this.getCorrespondenciaCorreio();
        vo.clearWhereState(); 
        vo.clearCache();
        if(idUtente.length()>0){
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("idu_ident_ut_id = " + idUtente);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }

    // obtem benefícios de medicação especial - Iterador = ListaBeneficiosDoUtente
    public void listaBeneficiosUtenteAddWhereClause(String idUtente) throws Exception {
        try{
            ListaBeneficiosDoUtenteImpl vo = this.getListaBeneficiosDoUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                String whereclause = "";
                vo.setMaxFetchSize(-1);
                whereclause = "idu_ident_ut_id = " + idUtente;
                whereclause = whereclause.concat(" AND cod_benef NOT IN ('R','I') AND data_fim is NULL ");
                vo.setWhereClause(whereclause);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao obter lista de beneficios de Medicação Especial do utente", e);
          throw new Exception("Atenção: Verificar lista de beneficios do utente.",e);
        }
    }
    
    // obtem benefícios de regime especial de comparticipação - Iterador = ListaBeneficiosDoUtenteRegimeEspecial
    public void regimeEspecialAddWhereClause(String idUtente) throws Exception {
        try{
            ListaBeneficiosDoUtenteImpl vo = this.getListaBeneficiosDoUtenteRegimeEspecial();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                String whereclause = "";
                vo.setMaxFetchSize(-1);
                whereclause = "idu_ident_ut_id = " + idUtente;
                whereclause = whereclause.concat(" AND cod_benef IN ('R') AND data_fim IS NULL");
                vo.setWhereClause(whereclause);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao obter beneficios de Regime Especial de Comp. de Medicamentos do utente", e);
          throw e;
        }
    }
    
    // obtem benefícios de isenção de taxa moderadora - Iterador = ListaBeneficiosDoUtenteIsencaoTaxaModeradora
    public void isencaoTaxaModeradoraAddWhereClause(String idUtente) throws Exception {
        try{
            ListaBeneficiosDoUtenteImpl vo = this.getListaBeneficiosDoUtenteIsencaoTaxaModeradora();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                String whereclause = "";
                vo.setMaxFetchSize(-1);
                whereclause = "idu_ident_ut_id = " + idUtente;
                whereclause = whereclause.concat(" AND cod_benef IN ('I') AND data_fim IS NULL");
                vo.setWhereClause(whereclause);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao obter benefício de Isenção de Taxa Moderadora", e);
          throw e;
        }
    }
    
    // obtem histórico de benefícios de medicação especial - Iterador = ListaBeneficiosDoUtente
    public void listaHistBeneficiosAddWhereClause(String idUtente) throws Exception {
        try{
            ListaBeneficiosDoUtenteImpl vo = this.getListaHistBeneficiosDoUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                String whereclause = "";
                vo.setMaxFetchSize(-1);
                whereclause = "idu_ident_ut_id = " + idUtente;
                vo.setWhereClause(whereclause);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao listar histórico de beneficios do utente", e);
          throw new Exception("Atenção: Verificar lista de beneficios do utente.",e);
        }
    }

    // metodo para obter entidades responsaveis activas para determinado utente
    public void listaHistEntidadesAddWhereClause(Number idUtente) throws Exception {
        try{
            ListaEntidadesUtenteImpl vo = this.getListaHistEntidadesUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.intValue()>0){
                vo.setMaxFetchSize(-1);
                vo.setNamedWhereClauseParam("id_ident_ut_id", idUtente);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao listar histórico de entidades do utente", e);
          throw e;
        }
    }
    
    // metodo para obter o historico das entidades estrangeiras responsaveis determinado utente
    // Carla Diogo (23-06-2009)
    public void listaHistEntidadesEstrangeirasAddWhereClause(Number idUtente) throws Exception {
        try{
            ListaEntidadesEstrangeirasUtenteImpl vo = this.getListaHistEntidadesEstrangeirasUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.intValue()>0){                
                vo.setMaxFetchSize(-1);
                vo.setid_ident_ut_id(idUtente+"");
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao listar histórico de entidades estrangeiras do utente", e);
          throw e;
        }
    }
    
    // metodo para obter historico de entidades responsaveis para determinado utente
    public void edicaoUtenteListaEntidadesUtenteAddWhereClause(String idUtente) throws Exception {
        try{
            ListaEntidadesUtenteImpl vo = this.getListaEntidadesUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                vo.setMaxFetchSize(-1);
                vo.setNamedWhereClauseParam("id_ident_ut_id", idUtente);
                vo.setWhereClause(" data_fim is null ");
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error(e,e);
          throw new Exception("Erro ao obter entidades associadas ao utente: " + e.getMessage());
        }
    }

    public void listaHistInscricoesAddWhereClause(Number idUtente) throws Exception {
        try{
            ListaHistInscricoesImpl vo = this.getListaHistInscricoes();
            vo.clearWhereState();
            vo.clearCache();
            if(idUtente.intValue()>0){
                vo.setMaxFetchSize(-1);
                vo.setWhereClause("idu_ident_ut_id = " + idUtente);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error(e,e);
          throw new Exception("Erro ao obter histórico de inscrições do utente: " + e.getMessage());
        }
    }

    public void listaListaHistMedicoAddWhereClause(String idUtente, String idEntidadeInscr, String IdEntidadeSessao) throws Exception {
        try{
            ListaHistMedicoImpl vo = this.getListaHistMedico();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                vo.setMaxFetchSize(-1);
                vo.setidu_ident_ut_id(idUtente);
                vo.setid_entidade_inscr(idEntidadeInscr);
                vo.setid_entidade_sessao(IdEntidadeSessao);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error(e,e);
          throw new Exception("Erro ao obter histórico de médico do utente: " + e.getMessage());
        }
    }
    
    public void geraNirUtenteEmMaternidade(String idUtente) throws Exception{
        //ir buscar o id da entidade UMIC (codigo 90000000)
        
         //String entidadeId=obtemIdEntidadeByCodigo(CODIGO_ENTIDADE_UMIC);
         
         geraNirUtente(idUtente, CODIGO_ENTIDADE_UMIC);
    
    }
    
    public void geraNirUtente(String idUtente, String codARSD) throws Exception {
        String retValNir = "0";
        CallableStatement cStatement = null;
        try{
            // apenas gera nir caso o utente nao o tenha ja
            if(!existeNir(idUtente)){
                log.info("vai gerar nir para o utente com o id " + idUtente +" para a ARSD com o código: " + codARSD);
                if(idUtente.length()>0 && codARSD.length()>0){
                    IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
                    voIdentificacaoUtente.clearCache();
                    // -- obter registo de utente para inserir nir
                    Key rowKey = new Key(new Object[] { idUtente });
                    Row[] rows = voIdentificacaoUtente.findByKey(rowKey, 1);
                    IdentificacoesUtenteRowImpl row = null;
                    if (rows.length>0) {
                        row = (IdentificacoesUtenteRowImpl)rows[0];
                        // apenas gera nir caso o utente não tenha
                        if(row.getNir()==null){
                             cStatement = voIdentificacaoUtente.getDBTransaction().createCallableStatement("{ ? = call IGIF.SEQUENCIAS.GET_NEXT_VAL_NIR('" + codARSD + "') }", 1);
                             cStatement.registerOutParameter(1, Types.VARCHAR);
                             cStatement.execute();
                             if(cStatement.getString(1)!=null){
                                 retValNir = cStatement.getString(1);
                             }
                             log.info("foi gerado o nir " + retValNir + " para o utente " + idUtente);
                             if(Integer.parseInt(retValNir)>0){
                                 row.setNir(new Number(retValNir));
                             }
                          
                        }
                    }
                } else {
                    throw new Exception("Não é possivel gerar o NIR para o utente. ARSD desconhecida para a entidade em sessão. ");
                }
                this.getDBTransaction().postChanges();
            }
        } catch(Exception e){
          log.error("",e);
          throw e;
        } finally{
            if(cStatement!=null) {
                try{
                    cStatement.close();
                } catch(Exception e){}
            }
        }
    }
    public String geraNics(String idCSaude) throws Exception {
        String retValNics = null;
        CallableStatement cStatement = null;
        try{
             cStatement = this.getDBTransaction().createCallableStatement("{ ? = call IGIF.SEQUENCIAS.GET_NEXT_VAL_NICS(?) }", 1);
             cStatement.registerOutParameter(1, Types.VARCHAR);
             cStatement.setLong(2, Long.parseLong(idCSaude) );
             cStatement.execute();
             if(cStatement.getString(1)!=null && cStatement.getLong(1)>0){
                 retValNics = cStatement.getString(1);
             } else {
                 throw new Exception ("Atençao: a sequencia de NICS não existe para esta entidade.");
             }
        } catch(Exception e){
          log.error("",e);
          throw new Exception ("Atençao: erro ao gerar NICS. Por favor contate administraçao de sistemas.");
        } finally{
            if(cStatement!=null) {
                try{
                    cStatement.close();
                } catch(Exception e){}
            }
        }
        return retValNics;
   }
    
    /*
    public String geraNics(String idCSaude, String codCSaude) throws Exception {
        Number seq = null;
        String retValNics = "";
        ResultSet rSet = null;
        PreparedStatement pStatement = null;
        try{
            IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
            StringBuffer sb = new StringBuffer("");
            sb.append(" SELECT NVL(sse.valor_sequencia,-999) valor_sequencia ").
                append(",      sen.cod_aux_01 ").
                append("FROM   SYS_SEQUENCIAS sse ").
                append(",      SYS_ENTIDADES sen ").
                append("WHERE  sse.nome_tabela (+) = 'IDU_IDENT_UT' ").
                append("AND    sse.nome_campo (+) = 'NICS' ").
                append("AND    sse.sys_entidades_id (+) = sen.id ").
                append("AND    sen.id = ").append(idCSaude);
            pStatement = voIdentificacaoUtente.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rSet = pStatement.executeQuery();
            if (rSet.next()) {
                seq = new Number(rSet.getObject(1).toString());
                if (seq.intValue() == -999) {
                    throw new Exception ("Atençao: a sequencia de NICS não existe para esta entidade.");
                }
                
                retValNics = codCSaude.toString() + (seq + "");   
                String proc = 
                    "UPDATE SYS_SEQUENCIAS " + "SET    valor_sequencia = " + 
                    (seq.intValue() + 1) + "WHERE  nome_tabela = 'IDU_IDENT_UT' " + 
                    "AND    nome_campo = 'NICS' " + "AND    sys_entidades_id = " + 
                    idCSaude;
                pStatement = voIdentificacaoUtente.getDBTransaction().createPreparedStatement(proc, 1);
                pStatement.execute();
            }
        } catch(Exception e){
          log.error("Erro ao gerar nics", e);
          throw new Exception("Erro ao gerar nics: " + e.getMessage());
        } finally{
            if(rSet!=null) {
                try  {
                    rSet.close();
                } catch (Exception ex)  { }
            }
            if(pStatement!=null) { 
                try  {
                    pStatement.close(); 
                } catch (Exception ex)  { }
            }
        }
        return retValNics;
    }
    */
    
    public String[] identificacaoUtenteInsert(String nomes,
                                              String dataNasc,
                                              String sexo,
                                              String idFreguesia,
                                              String idPaisNac,
                                              String idPaisNat,
                                              String idTipoBiId,
                                              String idProf,
                                              String idSitProf,
                                              String idHabLit,
                                              String regiaoNat,
                                              String cidadeNat,
                                              String localidadeNat,
                                              String bi,
                                              String niss,
                                              String nif,
                                              String nomesPropriosPai,
                                              String apelidosPai,
                                              String nomesPropriosMae,
                                              String apelidosMae,
                                              String codNac,
                                              String codNat,
                                              String cSaude,
                                              String codCSaude,
                                              String numVRes,
                                              String dataVRes) throws Exception {
        String retVal[] = new String[2];
        retVal[0] = "";
        retVal[1] = "";
        try {
            
            log.debug("nomes:" + nomes + "; " + 
                      "dataNasc:" + dataNasc + "; " +
                      "sexo:" + sexo + "; " +
                      "idFreguesia:" + idFreguesia + "; " +
                      "idPaisNac:" + idPaisNac + "; " +
                      "idPaisNat:" + idPaisNat + "; " +
                      "idTipoBiId:" + idTipoBiId + "; " +
                      "ifProf:" + idProf + "; " +
                      "idSitProf:" + idSitProf + "; " +
                      "idHLit:" + idHabLit + "; " +
                      "regiaoNat:" + regiaoNat + "; " +
                      "cidadeNat:" + cidadeNat + "; " +
                      "localidadeNat:" + localidadeNat + "; " +
                      "bi:" + bi + "; " +
                      "niss:" + niss + "; " +
                      "nif:" + nif + "; " +
                      "nomesPropriosPai:" + nomesPropriosPai + "; " +
                      "apelidosPai:" + apelidosPai + "; " +
                      "nomesPropriosMae:" + nomesPropriosMae + "; " +
                      "apelidosMae:" + apelidosMae + "; " +
                      "codNac:" + codNac + "; " +
                      "codNat:" + codNat+ "; " +
                      "numVRes:" + numVRes+ "; " +
                      "dataVRes:" + dataVRes);
            
            // validar documentos (niss & nif)
            // nota: não e necessário, pois esta a ser validado antes da confrontação de dados
            /*
            boolean isValidNiss = true;
            if(niss.length()>0){
                isValidNiss = validarDocumento('N', niss);
            }
            
            boolean isValidNif = true;
            if(nif.length()>0){
                isValidNif = validarDocumento('F', nif);   
            }
            
            if(!isValidNiss){
                retVal[0] += "Por Favor introduza um NISS válido.\n";
            }
            
            if(!isValidNif){
                retVal[0] += "Por Favor introduza um NIF válido.\n";
            }
            */
            
            if(retVal[0].length()==0){
                IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
                IdentificacoesUtenteRowImpl row = (IdentificacoesUtenteRowImpl)voIdentificacaoUtente.createRow();
             
                row.setRegUmic("N");
                row.setNomeCompleto(nomes.toUpperCase());
                row.setDtaNasc(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataNasc).getTime())));
                row.setSexo(sexo);
                if(idPaisNac.length()==0) row.setSchCdaineNacId(null); else row.setSchCdaineNacId(new Number(idPaisNac));
                if(idPaisNat.length()==0) row.setSchPaisNatId(null); else row.setSchPaisNatId(new Number(idPaisNat));
                if(idTipoBiId.length()==0) {
                    row.setScgTipobiId(null); 
                    bi = ""; 
                } else { 
                    row.setScgTipobiId(new Number(idTipoBiId));
                }
                if(idProf.length()==0) row.setScgProfissaoId(null); else row.setScgProfissaoId(new Number(idProf));
                if(idSitProf.length()==0) row.setScgSitprofId(null); else row.setScgSitprofId(new Number(idSitProf));
                if(idHabLit.length()==0) row.setScgNhabilitId(null); else row.setScgNhabilitId(new Number(idHabLit));
                if(codNat.equalsIgnoreCase("PT") || (codNat.equalsIgnoreCase("XX") && codNac.equalsIgnoreCase("PT")) ){
                    if(idFreguesia.length()==0) row.setSchCdaineNatId(null); else row.setSchCdaineNatId(new Number(idFreguesia));
                    row.setRegiaoNat(null);
                    row.setCidadeNat(null);
                    row.setLocalidadeNat(null);
                } else {
                    if(regiaoNat.length()==0) row.setRegiaoNat(null); else row.setRegiaoNat(regiaoNat);
                    if(cidadeNat.length()==0) row.setCidadeNat(null); else row.setCidadeNat(cidadeNat);
                    if(localidadeNat.length()==0) row.setLocalidadeNat(null); else row.setLocalidadeNat(localidadeNat);
                    row.setSchCdaineNatId(null);
                }
                
                // -- Portugues ou Estrangeiro
                if(codNac.equalsIgnoreCase("PT")){
                    row.setNacional("P");
                } else {
                    row.setNacional("E");
                }
                
                if(bi.length()==0) row.setBi(null); else row.setBi(bi);
                if(niss.length()==0) row.setNiss(null); else row.setNiss(new Number(niss));
                if(nif.length()==0) row.setNif(null); else row.setNif(new Number(nif));
                if(nomesPropriosPai.length()==0) row.setNomesPropriosPai(null); else row.setNomesPropriosPai(nomesPropriosPai.toUpperCase());
                if(apelidosPai.length()==0) row.setApelidosPai(null); else row.setApelidosPai(apelidosPai.toUpperCase());
                if(nomesPropriosMae.length()==0) row.setNomesPropriosMae(null); else row.setNomesPropriosMae(nomesPropriosMae.toUpperCase());
                if(apelidosMae.length()==0) row.setApelidosMae(null); else row.setApelidosMae(apelidosMae.toUpperCase());
             
                row.setNics(new Number(geraNics(cSaude)));
                System.out.println(row.getNics());
                
             
                if (dataVRes.length()==0) row.setDataVRes(null) ; else row.setDataVRes(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataVRes).getTime())));
                if (numVRes.length()==0) row.setNumVRes(null); else row.setNumVRes(numVRes);
                
                 
                // -- INSERT -- Informacao do Utente
                voIdentificacaoUtente.insertRow(row);
                
                this.getDBTransaction().postChanges();
                this.getDBTransaction().commit();
                
                retVal[1] = row.getId().toString();
            }
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          throw e;
        } 
        return retVal;

    }
    
    public String identificacaoUtenteUpdateDocumentosObito(String idUtente,
                                            String idTipoBiId,
                                            String bi,
                                            String niss,
                                            String nif
                                            ) throws Exception {
        String retVal = "";
        try {
            log.debug(
                      "idTipoBiId:" + idTipoBiId + "; " +
                      "bi:" + bi + "; " +
                      "niss:" + niss + "; " +
                      "nif:" + nif + "; " );
            
            // validar documentos (niss & nif)
            boolean isValidNiss = true;
            if(niss.length()>0){
                isValidNiss = validarDocumento('N', niss);
            }
            
            boolean isValidNif = true;
            if(nif.length()>0){
                isValidNif = validarDocumento('F', nif);   
            }
            
            if(!isValidNiss){
                retVal += "Por Favor introduza um NISS válido.\n";
            }
            
            if(!isValidNif){
                retVal += "Por Favor introduza um NIF válido.\n";
            }
            
            // caso nif e niss não sejam validos devolve já mensagem de erro
            if(retVal.length()>0){
                return retVal;
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeDocumentoRNU(idTipoBiId, bi, idUtente)){
                retVal = retVal + "\nJá existem utentes com o documento de identificação introduzido.";
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNif(nif, idUtente)){
                retVal = retVal +"\nJá existem utentes com o NIF introduzido.";
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNiss(niss, idUtente)){
                retVal = retVal +"\nJá existem utentes com o Nº S.Social introduzido.";
            }
            
            if(retVal.length()>0){
                return retVal;
            }
            
            if(retVal.length()==0){
                IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
                voIdentificacaoUtente.clearCache();
                Key rowKey = new Key(new Object[] { idUtente });
                Row[] rows = voIdentificacaoUtente.findByKey(rowKey, 1);
                IdentificacoesUtenteRowImpl row = null;
                for (int i = 0; i < rows.length; i++) {
                    row = (IdentificacoesUtenteRowImpl)rows[i];
                    
                    // APENAS DEIXAR ALTERAR DADOS CASO NAO SEJA CC
                    // nome, sexo, data nascimento
                    // pais nacionalidade, pais naturalidade
                    // distrito, concelho e freguesia
                  
                        
                    
                    if(idTipoBiId.length()==0) { 
                        row.setScgTipobiId(null); 
                        bi = "";
                    } else { 
                        row.setScgTipobiId(new Number(idTipoBiId));
                    }
                    if(bi.length()==0) row.setBi(null); else row.setBi(bi);
                    if(niss.length()==0) row.setNiss(null); else row.setNiss(new Number(niss));
                    if(nif.length()==0) row.setNif(null); else row.setNif(new Number(nif));
                    this.getDBTransaction().postChanges();
                    this.getDBTransaction().commit();                    
                }
            } 
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("",e);
          throw e;
        }
        
        return retVal;
    }    
    

    
    public String identificacaoUtenteUpdate(String idUtente,
                                            String nomes,
                                            String dataNasc,
                                            String sexo,
                                            String idFreguesia,
                                            String idPaisNac,
                                            String idPaisNat,
                                            String idTipoBiId,
                                            String idProf,
                                            String idSitProf,
                                            String idHLit,
                                            String regiaoNat,
                                            String cidadeNat,
                                            String localidadeNat,
                                            String bi,
                                            String niss,
                                            String nif,
                                            String nomesPropriosPai,
                                            String apelidosPai,
                                            String nomesPropriosMae,
                                            String apelidosMae,
                                            String codNac,
                                            String codNat,
                                            String dataVRes,
                                            String numVRes
                                            ) throws Exception {
        String retVal = "";
        try {
            log.debug("nomes:" + nomes + "; " + 
                      "dataNasc:" + dataNasc + "; " +
                      "sexo:" + sexo + "; " +
                      "idFreguesia:" + idFreguesia + "; " +
                      "idPaisNac:" + idPaisNac + "; " +
                      "idPaisNat:" + idPaisNat + "; " +
                      "idTipoBiId:" + idTipoBiId + "; " +
                      "ifProf:" + idProf + "; " +
                      "idSitProf:" + idSitProf + "; " +
                      "idHLit:" + idHLit + "; " +
                      "regiaoNat:" + regiaoNat + "; " +
                      "cidadeNat:" + cidadeNat + "; " +
                      "localidadeNat:" + localidadeNat + "; " +
                      "bi:" + bi + "; " +
                      "niss:" + niss + "; " +
                      "nif:" + nif + "; " +
                      "nomesPropriosPai:" + nomesPropriosPai + "; " +
                      "apelidosPai:" + apelidosPai + "; " +
                      "nomesPropriosMae:" + nomesPropriosMae + "; " +
                      "apelidosMae:" + apelidosMae + "; " +
                      "codNac:" + codNac + "; " +
                      "codNat:" + codNat);
            
            // validar documentos (niss & nif)
            boolean isValidNiss = true;
            if(niss.length()>0){
                isValidNiss = validarDocumento('N', niss);
            }
            
            boolean isValidNif = true;
            if(nif.length()>0){
                isValidNif = validarDocumento('F', nif);   
            }
            
            if(!isValidNiss){
                retVal += "Por Favor introduza um NISS válido.\n";
            }
            
            if(!isValidNif){
                retVal += "Por Favor introduza um NIF válido.\n";
            }
            
            // caso nif e niss não sejam validos devolve já mensagem de erro
            if(retVal.length()>0){
                return retVal;
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeDocumentoRNU(idTipoBiId, bi, idUtente)){
                retVal = retVal + "\nJá existem utentes com o documento de identificação introduzido.";
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNif(nif, idUtente)){
                retVal = retVal +"\nJá existem utentes com o NIF introduzido.";
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNiss(niss, idUtente)){
                retVal = retVal +"\nJá existem utentes com o Nº S.Social introduzido.";
            }
            
            if(retVal.length()>0){
                return retVal;
            }
            
            if(retVal.length()==0){
                IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
                voIdentificacaoUtente.clearCache();
                Key rowKey = new Key(new Object[] { idUtente });
                Row[] rows = voIdentificacaoUtente.findByKey(rowKey, 1);
                IdentificacoesUtenteRowImpl row = null;
                for (int i = 0; i < rows.length; i++) {
                    row = (IdentificacoesUtenteRowImpl)rows[i];
                    
                    // APENAS DEIXAR ALTERAR DADOS CASO NAO SEJA CC
                    // nome, sexo, data nascimento
                    // pais nacionalidade, pais naturalidade
                    // distrito, concelho e freguesia
                    if(row.getRegUmic().equalsIgnoreCase("N")){
                        row.setNomeCompleto(nomes.toUpperCase());
                        row.setDtaNasc(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataNasc).getTime())));
                        row.setSexo(sexo);
                        if(idPaisNac.length()==0) row.setSchCdaineNacId(null); else row.setSchCdaineNacId(new Number(idPaisNac));
                        if(idPaisNat.length()==0) row.setSchPaisNatId(null); else row.setSchPaisNatId(new Number(idPaisNat));
                        if(codNat.equalsIgnoreCase("PT") || (codNat.equalsIgnoreCase("XX") && codNac.equalsIgnoreCase("PT")) ){
                            if(idFreguesia.length()==0) row.setSchCdaineNatId(null); else row.setSchCdaineNatId(new Number(idFreguesia));
                            row.setRegiaoNat(null);
                            row.setCidadeNat(null);
                            row.setLocalidadeNat(null);
                        } else {
                            if(regiaoNat.length()==0) row.setRegiaoNat(null); else row.setRegiaoNat(regiaoNat);
                            if(cidadeNat.length()==0) row.setCidadeNat(null); else row.setCidadeNat(cidadeNat);
                            if(localidadeNat.length()==0) row.setLocalidadeNat(null); else row.setLocalidadeNat(localidadeNat);
                            row.setSchCdaineNatId(null);
                        }
                        
                        if(nomesPropriosPai.length()==0) row.setNomesPropriosPai(null); else row.setNomesPropriosPai(nomesPropriosPai.toUpperCase());
                        if(apelidosPai.length()==0) row.setApelidosPai(null); else row.setApelidosPai(apelidosPai.toUpperCase());
                        if(nomesPropriosMae.length()==0) row.setNomesPropriosMae(null); else row.setNomesPropriosMae(nomesPropriosMae.toUpperCase());
                        if(apelidosMae.length()==0) row.setApelidosMae(null); else row.setApelidosMae(apelidosMae.toUpperCase());
                    }
                    
                    // -- Portugues ou Estrangeiro
                    if(codNac.equalsIgnoreCase("PT")){
                        row.setNacional("P");
                    } else {
                        row.setNacional("E");
                    }
                    
                    if(idTipoBiId.length()==0) { 
                        row.setScgTipobiId(null); 
                        bi = "";
                    } else { 
                        row.setScgTipobiId(new Number(idTipoBiId));
                    }
                    if(idProf.length()==0) row.setScgProfissaoId(null); else row.setScgProfissaoId(new Number(idProf));
                    if(idSitProf.length()==0) row.setScgSitprofId(null); else row.setScgSitprofId(new Number(idSitProf));
                    if(idHLit.length()==0) row.setScgNhabilitId(null); else row.setScgNhabilitId(new Number(idHLit));
                    if(bi.length()==0) row.setBi(null); else row.setBi(bi);
                    if(niss.length()==0) row.setNiss(null); else row.setNiss(new Number(niss));
                    if(nif.length()==0) row.setNif(null); else row.setNif(new Number(nif));
                    if (dataVRes.length()==0) row.setDataVRes(null); else 
                    row.setDataVRes(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataVRes).getTime())));
                     
                     /* Modificado por Tiago Costa para permitir dados AlfaNuméricos - */
                    if (numVRes.length()==0)row.setNumVRes(null); else
                    row.setNumVRes(numVRes);
                    
                    this.getDBTransaction().postChanges();
                    this.getDBTransaction().commit();                    
                }
            } 
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("",e);
          throw e;
        }
        
        return retVal;
    }

    public String familiaUtenteInsert(Number idCSaude,
                                      String via,
                                      String descricao,
                                      String edificio,
                                      String porta,
                                      String andar,
                                      String lado,
                                      String lugar,
                                      String localidade,
                                      String freguesia,
                                      String codPostal, 
                                      String indicativo,
                                      String telefone) throws Exception {
        String retVal = "";
        Number procFam = new Number(0);
        try {
            // -- gerar processo de familia 
            procFam = geraProcessoFamilia(idCSaude);
            if(procFam.intValue()>0){
                FamiliasImpl voFamiliasUtente = getFamilias();
                FamiliasRowImpl rowFamilia = (FamiliasRowImpl)voFamiliasUtente.createRow();
                rowFamilia.setProcfam(procFam);
                rowFamilia.setSysEntidadesCentroId(idCSaude);
                if(via.length()==0) rowFamilia.setScgTiporuaId(null); else rowFamilia.setScgTiporuaId(new Number(via)); 
                if(descricao.length()==0) rowFamilia.setRua(null); else rowFamilia.setRua(descricao); 
                if(andar.length()==0) rowFamilia.setAndar(null); else rowFamilia.setAndar(andar); 
                if(porta.length()==0) rowFamilia.setPorta(null); else rowFamilia.setPorta(porta);
                if(localidade.length()==0) rowFamilia.setLocalidade(null); else rowFamilia.setLocalidade(localidade);
                if(lugar.length()==0) rowFamilia.setLugar(null); else rowFamilia.setLugar(lugar);
                if(lado.length()==0) rowFamilia.setScgTipoandarId(null); else rowFamilia.setScgTipoandarId(new Number(lado));
                if(freguesia.length()==0) rowFamilia.setSchCdaineId(null); else rowFamilia.setSchCdaineId(new Number(freguesia));
                if(codPostal.length()==0) rowFamilia.setSysCodigoPostalId(null); else rowFamilia.setSysCodigoPostalId(new Number(codPostal));
                if(edificio.length()==0) rowFamilia.setScgTipoportaId(null); else rowFamilia.setScgTipoportaId(new Number(edificio));
                if(indicativo.length()==0) rowFamilia.setIndica(null); else rowFamilia.setIndica(indicativo);
                if(telefone.length()==0) rowFamilia.setTelef(null); else rowFamilia.setTelef(telefone);
                
                this.getDBTransaction().postChanges();
                this.getDBTransaction().commit();
                
                retVal = rowFamilia.getId().toString();
            }            
        }        
        catch (SQLException e) {
            if (SQLUtils.isValidationTransactionError_SQL(e)) {
                log.warn("Erro ao inserir novo processo de família - " + e.getMessage());
                throw new DataValidationException("Erro ao inserir novo processo de família");
            } else {
                log.error("Erro ao inserir novo processo de família");
                throw e;
            }

        } catch (DMLException e) {
            if (SQLUtils.isValidationTransactionError_DML(e)) {
                log.warn(e.getDetailMessage());
                throw new DataValidationException("Erro ao inserir novo processo de família");
            } else {
                log.error("Erro ao inserir novo processo de família");
                throw e;
            }
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao inserir novo processo de família", e);
          throw new Exception("Erro ao inserir novo processo de família: " + e.getMessage());
        }
        return retVal;
    }
    
    // -- método para gerar um processo de familia
    public synchronized Number geraProcessoFamilia(Number idEntidade) throws Exception {
        log.info("vai gerar id processo de família para o centro de saúde " + idEntidade);
        PreparedStatement ps = null;
        ResultSet rs = null;
        Number procFam = new Number(0);
        try{
            String query = "select IGIF.SEQUENCIAS.GET_NEXT_VAL_FAMILIA(" + idEntidade.intValue() + ") from dual";
            ps = this.getDBTransaction().createPreparedStatement(query, 1);
            rs = ps.executeQuery();
            while (rs.next()) {
                procFam = new Number(rs.getObject(1).toString());
                log.debug("processo de familia gerado: " + procFam);
                if (procFam.intValue() < 1) {
                    throw new Exception("erro ao gerar processo de família");
                }
            }
        } catch(Exception e){
          log.error("", e);
          throw e;
        } finally{
              if(rs!=null) {
                  try{
                      rs.close();
                  } catch(Exception e){}
              }
              if(ps!=null) {
                  try{
                      ps.close();
                  } catch(Exception e){}
              }
        }
        log.debug("processo de familia gerado para o centro de saúde " + idEntidade + " com o numero " + procFam);
        return procFam;
    }
    
    // -- desactivar associacao activa de utente a familia
    public void desactivaFamiliaUtente(String idInscr) throws Exception {
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append("update idu_hist_familia set data_fim = sysdate where idu_inscr_id = ").
                append(idInscr).
                append(" and data_fim is null ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.execute();
        } catch(Exception e){
          log.error("Erro ao desactivar família do utente",e);
          throw e;
        } finally{
          try{
                if(ps!=null) {
                    try{
                        ps.close();
                    } catch(Exception e){}
                }
          } catch(Exception e){log.error("Erro ao devolver preparedStatement",e);}
        }
    }
    
    // método para alterar morada de processo de família
    public void familiaUtenteUpdate(Number idFamilia,
                                    String via,
                                    String descricao,
                                    String edificio,
                                    String porta,
                                    String andar,
                                    String lado,
                                    String lugar,
                                    String localidade,
                                    String freguesia,
                                    String codPostal, 
                                    String indicativo,
                                    String telefone) throws Exception {
        try {
            FamiliasImpl voFamilia = getFamilias();
            voFamilia.clearCache();
            Key rowKey = new Key(new Object[] { idFamilia });
            Row[] rows = voFamilia.findByKey(rowKey, 1);
            for (int i = 0; i < rows.length; i++) {
                FamiliasRowImpl rowFamilia = (FamiliasRowImpl)rows[i];
                if(via.length()==0) rowFamilia.setScgTiporuaId(null); else rowFamilia.setScgTiporuaId(new Number(via)); 
                if(descricao.length()==0) rowFamilia.setRua(null); else rowFamilia.setRua(descricao); 
                if(andar.length()==0) rowFamilia.setAndar(null); else rowFamilia.setAndar(andar); 
                if(porta.length()==0) rowFamilia.setPorta(null); else rowFamilia.setPorta(porta);
                if(localidade.length()==0) rowFamilia.setLocalidade(null); else rowFamilia.setLocalidade(localidade);
                if(lugar.length()==0) rowFamilia.setLugar(null); else rowFamilia.setLugar(lugar);
                if(lado.length()==0) rowFamilia.setScgTipoandarId(null); else rowFamilia.setScgTipoandarId(new Number(lado));
                if(freguesia.length()==0) rowFamilia.setSchCdaineId(null); else rowFamilia.setSchCdaineId(new Number(freguesia));
                if(codPostal.length()==0) rowFamilia.setSysCodigoPostalId(null); else rowFamilia.setSysCodigoPostalId(new Number(codPostal));
                if(edificio.length()==0) rowFamilia.setScgTipoportaId(null); else rowFamilia.setScgTipoportaId(new Number(edificio));
                if(indicativo.length()==0) rowFamilia.setIndica(null); else rowFamilia.setIndica(indicativo);
                if(telefone.length()==0) rowFamilia.setTelef(null); else rowFamilia.setTelef(telefone);
                
                this.getDBTransaction().postChanges();
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao alterar processo de família : " + idFamilia, e);
          throw new Exception("Erro ao alterar processo de familia: " + e.getMessage());
        }
    }
    
    public void histFamiliaUtenteUpdate(String[][] registos) throws Exception {
        try {
            // -- percorrer todos os registos a alterar graus de parentesco
            for ( int j = 0 ; j < registos.length ; j++)  {
        
                HistFamiliasImpl voHistFamilia = getHistFamilias();
                voHistFamilia.clearCache();
                
                Key rowKey = new Key(new Object[] { registos[j][0] });
                Row[] rows = voHistFamilia.findByKey(rowKey, 1);
                for (int i = 0; i < rows.length; i++) {
                    if(registos[j][1].length()>0){
                    
                        HistFamiliasRowImpl rowHistFamilia = (HistFamiliasRowImpl)rows[i];
                        // se parentesco existente != do requerido vou alterar
                        if(!rowHistFamilia.getScgParentescoId().toString().equals(registos[j][1])){
                            // rowHistFamilia.setDataFim(new Date(Date.getCurrentDate()));
                            
                            Calendar calendar = Calendar.getInstance();
                            java.sql.Timestamp dateTime = new java.sql.Timestamp(calendar.getTimeInMillis());
                            rowHistFamilia.setDataFim(new Timestamp(dateTime.getTime()));
            
                            // nova row para duplicar row actual e alterar apenas o parentesco
                            HistFamiliasRowImpl n =  (HistFamiliasRowImpl)voHistFamilia.createRow();
                            n.setDataIni(new Date(Date.getCurrentDate()));
                            n.setIduFamiliaId(rowHistFamilia.getIduFamiliaId());
                            n.setIduInscrId(rowHistFamilia.getIduInscrId());
                            n.setScgParentescoId(new Number(registos[j][1]));
                            Number nop = getNop(getProcFam(rowHistFamilia.getIduFamiliaId()), getCodParentesco(registos[j][1]));
                            n.setNop(nop);
                        }
       
                    }
                    
                } 
                
            }
            
            this.getDBTransaction().postChanges();
            this.getDBTransaction().commit();
        } catch (Exception e) {
          this.getTransaction().rollback();
          log.error("",e);
          throw e;
        }
    }

    public void moradaUtenteInsert(Number idUtente,
                                   String idCorrespVia,
                                   String ruaCorresp,
                                   String portaCorresp,
                                   String andarCorresp,
                                   String idCorrespAndar,
                                   String idCorrespPorta,
                                   String lugarCorresp,
                                   String localidadeCorresp,
                                   String idCodPostCorresp,
                                   String endCorrespEst,
                                   String cidCorrespEst,
                                   String regCorrespEst,
                                   String locCorrespEst,
                                   String cpCorrespEst,
                                   String idCorrespFreguesia,
                                   String idPaisCorrespEst,
                                   boolean moradaNacional) throws Exception {
        try {
                MoradasUtenteImpl vo = getMoradasUtente();
            vo.clearCache();
            MoradasUtenteRowImpl row = (MoradasUtenteRowImpl)vo.createRow();
            // -- set de valores
            row.setIduIdentUtId(idUtente);
            if(idCorrespVia.length()==0) row.setScgTiporuaId(null); else row.setScgTiporuaId(new Number(idCorrespVia)); 
            if(ruaCorresp.length()==0) row.setRua(null); else row.setRua(ruaCorresp);
            if(andarCorresp.length()==0) row.setAndar(null); else row.setAndar(andarCorresp);
            if(portaCorresp.length()==0) row.setPorta(null); else row.setPorta(portaCorresp);
            if(idCorrespPorta.length()==0) row.setScgTipoportaId(null); else row.setScgTipoportaId(new Number(idCorrespPorta));
            if(idCorrespAndar.length()==0) row.setScgTipoandarId(null); else row.setScgTipoandarId(new Number(idCorrespAndar));
            if(lugarCorresp.length()==0) row.setLugar(null); else row.setLugar(lugarCorresp);
            if(localidadeCorresp.length()==0) row.setLocalidade(null); else row.setLocalidade(localidadeCorresp);
            if(idCodPostCorresp.length()==0) row.setSysCodigoPostalId(null); else row.setSysCodigoPostalId(new Number(idCodPostCorresp));
            if(endCorrespEst.length()==0) row.setEnderecoEst(null); else row.setEnderecoEst(endCorrespEst);
            if(cidCorrespEst.length()==0) row.setCidadeEst(null); else row.setCidadeEst(cidCorrespEst);
            if(regCorrespEst.length()==0) row.setRegiaoEst(null); else row.setRegiaoEst(regCorrespEst);
            if(locCorrespEst.length()==0) row.setLocalidadeEst(null); else row.setLocalidadeEst(locCorrespEst);
            if(cpCorrespEst.length()==0) row.setCodPostalEst(null); else row.setCodPostalEst(cpCorrespEst);
            if(moradaNacional){
                if(idCorrespFreguesia.length()==0) row.setSchCdaineId(null); else row.setSchCdaineId(new Number(idCorrespFreguesia));
            } else {
                if(idPaisCorrespEst.length()==0) row.setSchCdaineId(null); else row.setSchCdaineId(new Number(idPaisCorrespEst));
            }
            vo.insertRow(row);
            this.getDBTransaction().postChanges();
            this.getDBTransaction().commit();
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao inserir correspondência do utente", e);
          throw new Exception("Erro ao inserir correspondência do Utente.");
        }
    }

    public void moradaUtenteUpdate(Number idCorrespMorada,
                                   String idCorrespVia,
                                   String ruaCorresp,
                                   String portaCorresp,
                                   String andarCorresp,
                                   String idCorrespAndar,
                                   String idCorrespPorta,
                                   String lugarCorresp,
                                   String localidadeCorresp,
                                   String idCodPostCorresp,
                                   String endCorrespEst,
                                   String cidCorrespEst,
                                   String regCorrespEst,
                                   String locCorrespEst,
                                   String cpCorrespEst,
                                   String idCorrespFreguesia,
                                   String idPaisCorrespEst,
                                   boolean moradaNacional) throws Exception {
        try {
            MoradasUtenteImpl vo = getMoradasUtente();
            vo.clearCache();
            Key rowKey = new Key(new Object[] { idCorrespMorada });
            Row[] rows = vo.findByKey(rowKey, 1);
            for (int i = 0; i < rows.length; i++) {
                MoradasUtenteRowImpl row = (MoradasUtenteRowImpl)rows[i];
                // -- set de valores
                if(idCorrespVia.length()==0) row.setScgTiporuaId(null); else row.setScgTiporuaId(new Number(idCorrespVia)); 
                if(ruaCorresp.length()==0) row.setRua(null); else row.setRua(ruaCorresp);
                if(andarCorresp.length()==0) row.setAndar(null); else row.setAndar(andarCorresp);
                if(portaCorresp.length()==0) row.setPorta(null); else row.setPorta(portaCorresp);
                if(idCorrespPorta.length()==0) row.setScgTipoportaId(null); else row.setScgTipoportaId(new Number(idCorrespPorta));
                if(idCorrespAndar.length()==0) row.setScgTipoandarId(null); else row.setScgTipoandarId(new Number(idCorrespAndar));
                if(lugarCorresp.length()==0) row.setLugar(null); else row.setLugar(lugarCorresp);
                if(localidadeCorresp.length()==0) row.setLocalidade(null); else row.setLocalidade(localidadeCorresp);
                if(idCodPostCorresp.length()==0) row.setSysCodigoPostalId(null); else row.setSysCodigoPostalId(new Number(idCodPostCorresp));
                if(endCorrespEst.length()==0) row.setEnderecoEst(null); else row.setEnderecoEst(endCorrespEst);
                if(cidCorrespEst.length()==0) row.setCidadeEst(null); else row.setCidadeEst(cidCorrespEst);
                if(regCorrespEst.length()==0) row.setRegiaoEst(null); else row.setRegiaoEst(regCorrespEst);
                if(locCorrespEst.length()==0){ row.setLocalidadeEst(null); } else { row.setLocalidadeEst(locCorrespEst); }
                if(cpCorrespEst.length()==0){ row.setCodPostalEst(null); } else { row.setCodPostalEst(cpCorrespEst); }
                if(moradaNacional){
                    if(idCorrespFreguesia.length()==0){ 
                        row.setSchCdaineId(null); 
                    } else { 
                        row.setSchCdaineId(new Number(idCorrespFreguesia));
                    }
                } else {
                    if(idPaisCorrespEst.length()==0){ 
                        row.setSchCdaineId(null); 
                    } else {
                        row.setSchCdaineId(new Number(idPaisCorrespEst));
                    }
                }
                this.getDBTransaction().postChanges();
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao alterar correspondência do utente", e);
          throw new Exception("Erro ao alterar correspondência do Utente.");
        }
    }


    // -- remove contacto por identificador
    public void removerContacto(String id) throws Exception {
          ContactoViewImpl vi = null;
          log.info("remover contacto com o id = "+id);
          try{
            vi = getContactoView();
            vi.clearCache();
            Key k = new Key(new Object[] { id });
            Row[] kk = vi.findByKey(k, 1);
            for (int i = 0; i < kk.length; i++) {
                Row row = kk[i];
                row.remove();
            }
            this.getDBTransaction().postChanges();
            this.getDBTransaction().commit();
          } catch(Exception e){
            log.error("", e);
            this.getDBTransaction().rollback();
            throw e;
          }
    }
    
    // -- insere contacto utente
    public void insereContacto(String idUtente,
                               String nome, 
                               String telefone, 
                               String telemovel, 
                               String email, 
                               String tipo, 
                               String numTipo, 
                               String observacoes) throws Exception {
        ContactoViewImpl fvi = null;
        log.info("inserir contacto para o utente " + idUtente );
        try{
            fvi = getContactoView();
            fvi.clearCache();
            ContactoViewRowImpl r = (ContactoViewRowImpl)fvi.createRow();
            r.setIduIdentUtId(new Number(idUtente));
            r.setNomeContacto(nome);
            r.setTelfContacto(telefone);
            r.setTelmContacto(telemovel);
            r.setEmailContacto(email);
            r.setOtipoContacto(tipo);
            r.setNoOtipoContacto(numTipo);
            r.setObs(observacoes);
            fvi.insertRow(r);
            fvi.getDBTransaction().postChanges();
            fvi.getDBTransaction().commit();
        } catch(Exception e){
          fvi.getDBTransaction().rollback(); 
          log.error("Erro ao inserir contacto para o utente",e);
          throw e;
        }
    }
    
    // -- gravar registos de contactos do utente
    public void alterarContacto(String id,
                                String nome,
                                String telefone,
                                String telemovel,
                                String tipo,
                                String numTipo,
                                String observacoes,
                                String email) throws Exception {
        log.info("id:"+id+";nome:"+nome+";telefone:"+telefone+";telemovel:"+telemovel+";tipo:"+tipo+";numTipo:"+numTipo+";observacoes:"+observacoes+";email:"+email);
        ContactoViewImpl vi = null;
        try{
            vi = getContactoView();
            vi.clearCache();
            if(id.length()>0){
                Key k = new Key(new Object[] { new Number(id) });
                Row[] kk = vi.findByKey(k, 1);
                for (int x = 0; x < kk.length; x++) {
                    log.info("encontrado contacto para alteração com a chave: " + id);
                    Row row = kk[x];
                    ContactoViewRowImpl fimpl = (ContactoViewRowImpl)row;
                    fimpl.setNomeContacto(nome);
                    fimpl.setTelfContacto(telefone);
                    fimpl.setTelmContacto(telemovel);
                    fimpl.setOtipoContacto(tipo);
                    fimpl.setNoOtipoContacto(numTipo);
                    fimpl.setEmailContacto(email);
                    fimpl.setObs(observacoes);
                }
                vi.getDBTransaction().postChanges();
                vi.getDBTransaction().commit();
            }   
        } catch (Exception e){
          vi.getDBTransaction().rollback();
          log.error("",e);
          throw e;
        }
    }
    
     /* Obtem contactos para o utente por tipo. 'U': Contacto Utente; 'L': Lista de Outros Contactos para o utente 
      * nota: Existe diferenciacao nos contactos do utente. O contacto do utente e contactos associados ao utente, ex: familia, amigos, etc.
      *       Essa diferenciação é feita pelo campo nome_contacto, quando este for null o contacto é do próprio utente, quando não for null é um contacto associado ao utente
      */
     public void listaContactosAddWhereClause(String idUtente, char tipo) throws Exception {
         ListaContactosImpl vo = null;
         try{ 
             StringBuffer sbQ = new StringBuffer("");
             switch (tipo) {
                 case 'U':  vo = this.getContactoUtente(); 
                            vo.clearWhereState(); 
                            vo.clearCache();
                            vo.setMaxFetchSize(-1);
                            sbQ.append(" nome_contacto is null ");
                            break;
                 case 'L':  vo = this.getListaContactos();
                            vo.clearWhereState(); 
                            vo.clearCache();
                            vo.setMaxFetchSize(-1);
                            sbQ.append(" nome_contacto is not null ");
                            break;
                 default:   
                            break;
             }
             
             if(idUtente.length()>0){
                 vo.setNamedWhereClauseParam("idUtente", idUtente);
                 vo.setNamedWhereClauseParam("bindDummy", 1);
                 vo.setWhereClause(sbQ.toString());
                 vo.executeQuery();
             } else {
                vo.setMaxFetchSize(0);
             }
         } catch(Exception e){
           log.error("Erro ao listar contactos do utente do tipo " + tipo +" para o utente" + idUtente, e);
           throw e;
         }
     }
     
     /* Método para alimentar a tabela de comparação dos duplicados com os contactos */
      public void detalheContactoPotencialDuplicado(String idUtente, int voR) throws Exception {
          try{
              
              ListaContactosImpl vo = null;
              switch (voR) {
                case vo_REGISTOPOTPRINCIPAL:
                     vo = this.getContactoUtente();
                     break;
                case vo_REGISTOPOTDUPPLICADO:
                     vo = this.getContactoUtenteDup();
                     break;
                default:
                     vo = this.getContactoUtenteDup();               
                     break;
              }
           
              StringBuffer sbQ = new StringBuffer("");
              if(idUtente.length()>0){
                          vo.clearWhereState(); 
                          vo.clearCache();
                          vo.setMaxFetchSize(-1);
                          sbQ.append(" nome_contacto is null ");
                          vo.setNamedWhereClauseParam("idUtente", idUtente);
                          vo.setNamedWhereClauseParam("bindDummy", 1);
                          vo.setWhereClause(sbQ.toString());
                          vo.executeQuery();
               } else {
                         vo.setMaxFetchSize(0);
               }
                
            }catch(Exception e){
                    log.error("Erro ao listar contactos do utente do tipo  para o utente" + idUtente, e);
                    throw e;
            }
      }
     
    
    /*
     * -- Metodo para inserir entidade nacionais ao utente
     * nota: 
     * @autor: 
     * @descrição:  
     * @actualização:
     * -- */
    public void insereEntidadesUtente(Number idUtente, 
                                      Number idEnt, 
                                      String numBenef, 
                                      String numBenefRef,
                                      String dtVal,
                                      String entCartao) throws Exception {
          try {
              EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
              voEntidadesUtente.clearCache();
              EntidadesUtenteRowImpl rowEntidade = (EntidadesUtenteRowImpl)voEntidadesUtente.createRow();
              rowEntidade.setIduIdentUtId(idUtente);
              rowEntidade.setDataIni(new Date(Date.getCurrentDate()));
              if (dtVal.length()>0) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                rowEntidade.setDtaVal(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtVal).getTime())));
              }
              rowEntidade.setNumbenef(numBenef);
              rowEntidade.setNumbenefRef(numBenefRef);
              rowEntidade.setSysEntidadesRespId(idEnt);
              rowEntidade.setCartao(entCartao);
              rowEntidade.setEntDefault("N");
              voEntidadesUtente.insertRow(rowEntidade);
              this.getDBTransaction().postChanges();
              this.getDBTransaction().commit();
          } catch (Exception e) {
            this.getDBTransaction().rollback();
            log.error(e,e);
            throw new Exception("Erro no insert da entidade: " + e.getMessage());
          }
    }
    
    /*
     * -- Metodo para inserir entidade estrangeiras ao utente
     * nota: nova versão do método acima mas para entidades estrangeiras
     * @autor: 
     * @descrição:  
     * @actualização: 22-junho-2009 (Carla Diogo)
     * -- */
    public void insereEntidadesUtente(Number idUtente, 
                                      Number idEnt, 
                                      String numBenef, 
                                      String numBenefRef,
                                      String dtVal,
                                      String entCartao,
                                      String tipoCartao,
                                      String numCartao,
                                      String dataEmissao,
                                      String dataInicio) throws Exception {
          try {
              EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
              voEntidadesUtente.clearCache();
              EntidadesUtenteRowImpl rowEntidade = (EntidadesUtenteRowImpl)voEntidadesUtente.createRow();
              rowEntidade.setIduIdentUtId(idUtente);
              rowEntidade.setDataIni(new Date(Date.getCurrentDate()));
              if (dtVal.length()>0) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                rowEntidade.setDtaVal(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtVal).getTime())));
              }
              rowEntidade.setNumbenef(numBenef);
              rowEntidade.setNumbenefRef(numBenefRef);
              rowEntidade.setSysEntidadesRespId(idEnt);
              rowEntidade.setCartao(entCartao);
              rowEntidade.setEntDefault("N");
                            
              //caso seja uma entidade estrangeira              
              if (tipoCartao.length() > 0)  {
                  rowEntidade.setScgTipoCartaoId(new Number(tipoCartao)); 
                  rowEntidade.setNumbenefRef(numCartao);
                  if (dataEmissao.length()>0) {
                    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                    rowEntidade.setDataEmissao(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataEmissao).getTime())));
                  }
                  if (dataInicio.length()==0) {
                    dataInicio = "01-01-1900"; // necessário colocar uma data default pois a bd não aceita null
                  }
                  
                  SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                  rowEntidade.setDataIni(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dataInicio).getTime())));
              }
              
              voEntidadesUtente.insertRow(rowEntidade);             
              this.getDBTransaction().postChanges();
              this.getDBTransaction().commit();
          } catch (Exception e) {
            this.getDBTransaction().rollback();
            log.error(e,e);
            throw new Exception("Erro no insert da entidade: " + e.getMessage());
          }
    }
    
    public void setTermoEntidades(String[] entidades) throws Exception {
        EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
        try {
              
              for ( int i = 0 ; i < entidades.length ; i++)  {
                  Key rowKey = new Key(new Object[] { entidades[i] });
                  Row[] rows = voEntidadesUtente.findByKey(rowKey, 1);
                  EntidadesUtenteRowImpl row = null;
                  if (rows.length>0) {
                      log.debug("encontrou registo a terminar pela key: " + entidades[i]);
                      row = (EntidadesUtenteRowImpl)rows[0];
                      row.setDataFim(new Date(Date.getCurrentDate()));
                  }
              }
            voEntidadesUtente.getDBTransaction().postChanges();
            voEntidadesUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voEntidadesUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no terminar entidades: " + e.getMessage());
        }
    }
    
    /*
     * -- Metodo para terminar (data de fim) de entidades  responsáveis asscociadas ao utente
     * nota: apenas deixa terminar entidades cuja data de validade seja igual ou superior à data actual.
     * @autor: Carla Diogo
     * @descrição: fecha entidades (chamada atraves do metodo onTermoSubNacional e onTermoSubEstrangeiro do Controller da EdicaoUtente.jsp) 
     * @criação: 04-junho-2009 (Carla Diogo)
     * @actualização: 04-junho-2009 (Carla Diogo)
     * -- */
    public void setTermoEntidades(String idEnt) throws Exception {
        EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
        try {          
              
                Key rowKey = new Key(new Object[] { idEnt });
                Row[] rows = voEntidadesUtente.findByKey(rowKey, 1);
                
                EntidadesUtenteRowImpl row = null;
                if (rows.length>0) {
                    row = (EntidadesUtenteRowImpl)rows[0];
                    row.setDataFim(new Date(Date.getCurrentDate()));
                }
              voEntidadesUtente.getDBTransaction().postChanges();  
              voEntidadesUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voEntidadesUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no terminar entidades: " + e.getMessage());
        }
    }
    
    public void setAlterarEntidades(String[][] entidades) throws Exception {
        EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
        try {
              
              for ( int i = 0 ; i < entidades.length ; i++)  {
                  Key rowKey = new Key(new Object[] { entidades[i][0] });
                  Row[] rows = voEntidadesUtente.findByKey(rowKey, 1);
                  EntidadesUtenteRowImpl row = null;
                  if (rows.length>0) {
                      row = (EntidadesUtenteRowImpl)rows[0];
                      Date dataVal = null;
                      if(entidades[i][1].length()>0){
                        // -- parse para oracle.jbo.domain.Date
                        dataVal = new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(entidades[i][1]).getTime()));
                      }
                      row.setDtaVal(dataVal);
                  }
              }
              voEntidadesUtente.getDBTransaction().postChanges();
              voEntidadesUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voEntidadesUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no alterar entidades: " + e.getMessage());
        }
    }
    
    /*
     * -- Metodo para renovar data de validade de entidades responsáveis asscociadas ao utente
     * nota: apenas deixa renovar entidades cuja data de validade seja igual ou inferior à data actual.
     * @autor: Carla Diogo
     * @descrição: renova entidades (chamada atraves do metodo onRenovarSubNacional do Controller da EdicaoUtente.jsp) 
     * @criação: 04-junho-2009 (Carla Diogo)
     * @actualização: 04-junho-2009 (Carla Diogo)
     * -- */
    public void setRenovarEntidadesNacional(Number idEnt, Date dtaVal) throws Exception {
        EntidadesUtenteImpl voEntidadesUtente = getEntidadesUtente();
        try {          
              
                Key rowKey = new Key(new Object[] { idEnt });
                Row[] rows = voEntidadesUtente.findByKey(rowKey, 1);
                
                EntidadesUtenteRowImpl row = null;
                if (rows.length>0) {
                    row = (EntidadesUtenteRowImpl)rows[0];

                    row.setDtaVal(dtaVal);
                }
              
            voEntidadesUtente.getDBTransaction().postChanges();
              voEntidadesUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voEntidadesUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no terminar entidades: " + e.getMessage());
        }
    }
    
    public int insereBeneficiosUtente(String idUtente, 
                                      String benef, 
                                      String dtDe, 
                                      String dtVal, 
                                      String dtFim,
                                      String id
                                      ) throws Exception {
        log.debug("idUtente:<"+idUtente+">; benef:<"+benef+">; dtDe:<"+dtDe+">; dtVal:<"+dtVal+">; dtFim:<"+dtFim+">");
        BeneficiosDoUtenteImpl voBeneficiosUtente = getBeneficiosDoUtente();
        PreparedStatement pStatement = null;
        ResultSet rSet = null;
        String codigoBenf = null;
        try {
            // -- inserir beneficio apenas se Utente não o tiver
            String query = "select IDU_BENEF_UT_ID from idu_hist_benef where IDU_IDENT_UT_ID = " + idUtente + " AND IDU_BENEF_UT_ID = " + benef + " AND DATA_FIM IS NULL";
            pStatement = this.getDBTransaction().createPreparedStatement(query, 1);
            log.debug(query);
            rSet = pStatement.executeQuery();
            if (rSet.next()) {
                // -- o utente ja tem o beneficio adicionado
                return 1;    
            } else {   
                // -- para criar um novo beneficio e obrigatorio
                // -- idUtente, o beneficio e a data de inicio
                if(idUtente.length()>0 && benef.length()>0){
                
                    codigoBenf=obtemCodigoBenfById(benef);
                
                    if(utentePodeTerBeneficio(idUtente, "ID", benef)){
                    
                        if(id !=null && id.length()>0){
                            onRemoverBeneficioIsTaxaMod(id,idUtente);
                        }
                    
                        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                        BeneficiosDoUtenteRowImpl rowBeneficio = (BeneficiosDoUtenteRowImpl)voBeneficiosUtente.createRow();
                        rowBeneficio.setIduIdentUtId(new Number(idUtente));
                        rowBeneficio.setIduBenefUtId(new Number(benef));
                        
                        if(dtDe.length()>0){
                            rowBeneficio.setDataIni(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtDe).getTime())));
                        } else {
                            rowBeneficio.setDataIni(new Date(Date.getCurrentDate()));
                        }
                        
                        
                        /* 
                         * Adicionado por Tiago Costa, para prevenir inserção de datas finais maiores que 1 ano após a data actual para o 
                         * beneficio de Isenção de dadores benévolos de sangue 
                         * 
                         * Linha: 2350
                         * */
                        if(codigoBenf.equals(CODIGO_ISENCAO_DADORES_SANGUE))
                        {
                             Date dataActualMaisAno = new Date(Date.getCurrentDate().addMonths(12));
                             if(dtVal.length()==0)
                                 throw new Exception(" A data final deve ser preenchida e a validade deste beneficio não pode ser superior a um ano ");
                             
                             Date dataFinalInserida =new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtVal).getTime()));
                             if(dataFinalInserida.compareTo(dataActualMaisAno)==1)
                                throw new Exception(" A validade deste beneficio não pode ser superior a um ano ");
                        }
                        
                        /* ---------------------- Fim de Add --------------------- */
                        
                        if(dtVal.length()>0){
                            rowBeneficio.setDtaValidade(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtVal).getTime())));
                        } else {
                            String autDate = this.obtemDataValidadePorDefeitoParaBeneficio(idUtente, benef);
                            if(autDate!=null){
                                rowBeneficio.setDtaValidade(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(autDate).getTime())));
                            } else {
                                rowBeneficio.setDtaValidade(null);
                            }
                        }
                        
                        if(dtFim.length()>0){
                            rowBeneficio.setDataFim(new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtFim).getTime()))); 
                        } 
                        
                        voBeneficiosUtente.insertRow(rowBeneficio);
                        this.getDBTransaction().postChanges(); 
                        this.getDBTransaction().commit();    
                    } else {
                        // -- Alterado por Tiago Costa a 12/03/2013, de forma a ajudar na resolução deste beneficio em especifico
                        String msgUser = "Utente "+idUtente +" não respeita as condições para ter este benefício.";
                        if(codigoBenf.equals(CODIGO_REGIME_ESPECIAL_PENSIONISTAS))
                        {
                               msgUser+=" Por favor, actualize a Situação Profissional do utente.";
                        }
                        throw new DataValidationException(msgUser);
                        // -- Fim de Alterado
                    }
                }
            }
        } 
        catch (DataValidationException e) {
                 log.warn(e.getMessage());
                 this.getDBTransaction().rollback();
                 throw e;
               } 
        catch (Exception e) {
          log.error("Erro ao inserir benefício para o utente",e);
          this.getDBTransaction().rollback();
          throw e;
        } finally{
                if(rSet!=null) {
                    try{
                        rSet.close();
                    } catch(Exception e){}
                }
                if(pStatement!=null) {
                    try{
                        pStatement.close();
                    } catch(Exception e){}
                }
        }
        return 0;
    }
    
    // -- remove beneficio do utente
    public void removerBeneficio(String id) throws Exception {
         try{
           BeneficiosDoUtenteImpl fvi = getBeneficiosDoUtente();
           fvi.clearCache();
           Key k = new Key(new Object[] { new Number(id) });
           Row[] kk = fvi.findByKey(k, 1);
           for (int i = 0; i < kk.length; i++) {
               BeneficiosDoUtenteRowImpl row = (BeneficiosDoUtenteRowImpl)kk[i];
               row.setDataFim(new Date(Date.getCurrentDate()));
           }
           fvi.getDBTransaction().postChanges();
           fvi.getDBTransaction().commit();
         } catch(Exception e){
           log.error("",e);
           throw e;
         }
     }
    
    public String obtemIdBeneficioPorCodigo(String codigoBeneficio) throws Exception {
        String retVal = null;
        PreparedStatement pStatement = null;
        ResultSet rSet = null;
        try {
            String query = "select id from idu_benef_ut where cod_benef = " + codigoBeneficio + " ";
            pStatement = this.getDBTransaction().createPreparedStatement(query, 1);
            rSet = pStatement.executeQuery();
            if (rSet.next()) {
                 retVal = rSet.getString(1);
            }
        } catch (Exception e) {
          log.error("erro ao obter id beneficio para o código " + codigoBeneficio,e);
          throw e;
        } finally{
                if(rSet!=null) {
                    try{
                        rSet.close();
                    } catch(Exception e){}
                }
                if(pStatement!=null) {
                    try{
                        pStatement.close();
                    } catch(Exception e){}
                }
        }
        return retVal;
    }
    
    public void listaEntidadesRespAddWhereClause(String tipoCodigo, 
                                                 String codPai, 
                                                 String codEnt, 
                                                 String design) throws Exception {

        ListaEntidadesImpl vo = getListaEntidades();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        
        if (tipoCodigo == null || tipoCodigo.length() == 0) {
            return;
        }
        if (codEnt == null) {
            codEnt = new String("");
        }
        if (design == null) {
            design = new String("");
        }

        if (codPai == null)
            codPai = new String("");

        try {
            vo.setcod(tipoCodigo);

            String whereClause = new String("");
            if (codEnt.length() > 0) {
                if (whereClause.length() > 0)
                    whereClause = whereClause.concat(" AND ");

                whereClause = 
                        whereClause.concat("UPPER(codigo) LIKE (UPPER(:codEnt)||'%')");
                vo.defineNamedWhereClauseParam("codEnt", null, null);
                vo.setNamedWhereClauseParam("codEnt", codEnt);
            }
            if (design.length() > 0) {
                if (whereClause.length() > 0)
                    whereClause = whereClause.concat(" AND ");
                whereClause = 
                        whereClause.concat("UPPER(designacao) LIKE (UPPER(:design)||'%')");
                vo.defineNamedWhereClauseParam("design", null, null);
                vo.setNamedWhereClauseParam("design", design);
            }
            if (codPai.length() > 0) {
                if (whereClause.length() > 0)
                    whereClause = whereClause.concat(" AND ");
                whereClause = 
                        whereClause.concat("sys_entidades_id=(select id from sys_entidades where codigo=:codPai)");
                vo.defineNamedWhereClauseParam("codPai", null, null);
                vo.setNamedWhereClauseParam("codPai", codPai);
            }
            vo.setWhereClause(whereClause);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
            
        } catch (Exception e) {
          log.error("Erro ao listar entidades responsaveis", e);
          throw e;
        }
    }

    public void listaEntidadesAddWhereClause(String tipoCodigo, 
                                             String codPai, 
                                             String codEnt, 
                                             String design, 
                                             String desigAbrv) throws Exception {
        
        ListaEntidadesImpl vo = getListaEntidades();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        try {
            vo.setcod(tipoCodigo);
            String whereClause = new String("");
            
            // procura por codigo entidade
            if (codEnt.length() > 0) {
                if (whereClause.length() > 0){
                    whereClause = whereClause.concat(" AND ");
                }
                whereClause = whereClause.concat("UPPER(codigo) LIKE (UPPER(:codEnt)||'%')");
                vo.defineNamedWhereClauseParam("codEnt", null, null);
                vo.setNamedWhereClauseParam("codEnt", codEnt);
            }
            
            // procura por designacao
            if (design.length() > 0) {
                if (whereClause.length() > 0){
                    whereClause = whereClause.concat(" AND ");
                }
                whereClause = whereClause.concat("UPPER(designacao) LIKE ('%'|| UPPER(:design) ||'%')");
                vo.defineNamedWhereClauseParam("design", null, null);
                vo.setNamedWhereClauseParam("design", design);
            }
            
            // procura por designacao abreviada
            if (desigAbrv.length() > 0) {
                if (whereClause.length() > 0){
                    whereClause = whereClause.concat(" AND ");
                }
                whereClause = whereClause.concat("UPPER(desc_abrv) LIKE ('%'|| UPPER(:desigAbrv)||'%')");
                vo.defineNamedWhereClauseParam("desigAbrv", null, null);
                vo.setNamedWhereClauseParam("desigAbrv", desigAbrv);
            }
            
            // procura por codigo pai
            if (codPai.length() > 0) {
                if (whereClause.length() > 0){
                    whereClause = whereClause.concat(" AND ");
                }
                whereClause = whereClause.concat("sys_entidades_id=(select id from sys_entidades where codigo=:codPai)");
                vo.defineNamedWhereClauseParam("codPai", null, null);
                vo.setNamedWhereClauseParam("codPai", codPai);
            }
            // executa pesquisa
            vo.setWhereClause(whereClause);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();

        } catch (Exception e) {
          log.error("Erro ao listar entidades ", e);
          throw e;
        }
    }

    // -- validar beneficiario para a entidade
    public boolean validaBenificiario(String benef, 
                                      String entidade) throws Exception {
        boolean retVal = true;
        CallableStatement cStatement = null;
        StringBuffer sb = new StringBuffer("");
        try{
            if(benef.length() >0 && entidade.length() > 0){
                retVal = false;
                log.debug("vai validar beneficiário " + benef + " para a entidade " + entidade );
                sb.append("{ ? = call IDU.valida_benef(?,?) }");
                cStatement = this.getDBTransaction().createCallableStatement(sb.toString(), 1);
                cStatement.registerOutParameter(1, Types.NUMERIC);
                cStatement.setString(2, entidade);
                cStatement.setString(3, benef);
                cStatement.execute();
                int result = cStatement.getInt(1);
                if(result > 0){
                    retVal = true;
                }
            }
        } catch(Exception e){
          log.error("Erro ao validar beneficiário", e);
          throw new Exception("Erro ao validar beneficiário");
        } finally {
            try{
                if(cStatement!=null) {
                    cStatement.close();
                }
            } catch(Exception e){log.error("Erro ao devolver CallableStatement",e);}
        }
        return retVal;
    }
    
    /* Resolução Duplicados - Carlos Silva */
    public void changeParentDup(Number parentDupId, Number childDupId) throws JboException {
        PotencialDuplicadoViewRowImpl parentDup = null;
        PotencialDuplicadoViewRowImpl childDup = null;
        PotencialDuplicadoViewImpl voPotDup = null;
        try{
            voPotDup = getPotencialDuplicadoView();
            parentDup = (PotencialDuplicadoViewRowImpl) voPotDup.findByKey(new Key(new Object[] { parentDupId }), 1)[0];
            childDup  = (PotencialDuplicadoViewRowImpl) voPotDup.findByKey(new Key(new Object[] { childDupId }), 1)[0];
            parentDup.setPai("N");
            childDup.setPai("S");
            voPotDup.getDBTransaction().postChanges();
            voPotDup.getDBTransaction().commit();
            voPotDup.clearCache();
        } catch(Exception e){
          log.error("",e);   
        } finally{
          parentDup = null;
          childDup = null;
          voPotDup = null;            
        }
    }

    /* Resolução Duplicados - Carlos Silva */
    public void markPotDupState(ListaUtentesDuplicadosRowImpl[] recordsToMark) throws JboException, 
                                                                                      Exception {
        PotencialDuplicadoViewRowImpl[] potDupRecordsToMark = null;
        PotencialDuplicadoViewImpl voPotDup = null;
        try{
            potDupRecordsToMark = new PotencialDuplicadoViewRowImpl[recordsToMark.length];
            voPotDup = getPotencialDuplicadoView();
            for(int i = 0 ; i < recordsToMark.length ; i++){
                try{
                    if(potDupRecordsToMark !=null && potDupRecordsToMark[i]!=null && recordsToMark[i]!=null && voPotDup !=null){
                        potDupRecordsToMark[i] = (PotencialDuplicadoViewRowImpl) voPotDup.findByKey(new Key(new Object[] { recordsToMark[i].getPotDupId() }), 1)[0];                    
                        potDupRecordsToMark[i].setEstado(recordsToMark[i].getEstadoPotDup());
                    }
                    
                }catch(Exception e){log.error("",e);}
            }
        } catch(Exception e){
          log.error("",e);
          throw e;
        } finally {
          potDupRecordsToMark = null;
          voPotDup = null;
        }
    }
    
    public void setAlterarBeneficios(String[][] beneficios) throws Exception {
        BeneficiosDoUtenteImpl voBeneficiosUtente = getBeneficiosDoUtente();
        try {
              
              for ( int i = 0 ; i < beneficios.length ; i++)  {
                  Key rowKey = new Key(new Object[] { beneficios[i][0] });
                  Row[] rows = voBeneficiosUtente.findByKey(rowKey, 1);
                  BeneficiosDoUtenteRowImpl row = null;
                  if (rows.length>0) {
                      row = (BeneficiosDoUtenteRowImpl)rows[0];
                      
                      Date dataVal = null;
                      if(beneficios[i][1].length()>0){
                        // -- parse para oracle.jbo.domain.Date
                        dataVal = new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(beneficios[i][1]).getTime()));
                      }
                      row.setDtaValidade(dataVal);
                  }
              }
              voBeneficiosUtente.getDBTransaction().postChanges();
              voBeneficiosUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voBeneficiosUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no alterar benefícios: " + e.getMessage());
        }
    }
    
    public void setAlterarBeneficio(String idBeneficio, String dtDe, String dtVal) throws Exception {
        BeneficiosDoUtenteImpl voBeneficiosUtente = getBeneficiosDoUtente();
        try {
            Key rowKey = new Key(new Object[] { idBeneficio });
            Row[] rows = voBeneficiosUtente.findByKey(rowKey, 1);
            BeneficiosDoUtenteRowImpl row = null;
            if (rows.length>0) {
                row = (BeneficiosDoUtenteRowImpl)rows[0];
              
                Date dataDe = null;
                if(dtDe.length()>0){
                  // -- parse para oracle.jbo.domain.Date
                  dataDe = new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtDe).getTime()));
                }
                row.setDataIni(dataDe);
              
                Date dataVal = null;
                if(dtVal.length()>0){
                  // -- parse para oracle.jbo.domain.Date
                  dataVal = new oracle.jbo.domain.Date(new java.sql.Date(sdf.parse(dtVal).getTime()));
                }
                row.setDtaValidade(dataVal);
            }
            voBeneficiosUtente.getDBTransaction().postChanges();
            voBeneficiosUtente.getDBTransaction().commit();
        } catch (Exception e) {
          voBeneficiosUtente.getDBTransaction().rollback();
          log.error(e,e);
          throw new Exception("Erro no alterar benefícios: " + e.getMessage());
        }
    }
    
    // método para validação de número de documento para determinado tipo de documento
    public boolean validarDocumento(char tipo, String numero) throws Exception {
        ResultSet rs = null;
        Statement stmt = null;
        boolean retVal = true;
        if(numero.length()>0){
            retVal = false;
            log.info("vai validar documento do tipo " + tipo + " com o número: " + numero);
            try  {
                StringBuffer sb = new StringBuffer("");
                switch (tipo) {
                    case 'N': 
                          // validar NISS   
                          sb.append(" select IDU.VALIDA_DOCUMENTO('N', '").append(numero).append("') from dual ");
                          break;
                    case 'F':
                          // validar NIF
                          sb.append("select IDU.VALIDA_DOCUMENTO('F', '").append(numero).append("') from dual ");  
                          break;
                    default: 
                        throw new DataValidationException("Tipo de documento para validação desconhecido.");
                }
            
                stmt = this.getDBTransaction().createStatement(1);
                log.debug("query<" + sb.toString() + ">");
                rs = stmt.executeQuery(sb.toString());
                if(rs.next()){
                    int r = rs.getInt(1);
                    if(r==0){
                        retVal = false;
                    } else {
                        retVal = true;
                    } 
                }
                
            } 
            catch (DataValidationException ex)  {
                          log.warn(ex.getMessage()+ " - tipo " + tipo+ " com nº "+numero);
                          throw new DataValidationException("Erro ao validar documento: " + ex.getMessage());
            } 
            catch (Exception ex)  {
              log.error("Erro ao validar documento ", ex);
              throw new Exception("Erro ao validar documento: " + ex.getMessage());
            } finally  {
              if (rs!=null)  {
                try  {
                    rs.close();
                } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
              }
                if (stmt!=null)  {
                  try  {
                      stmt.close();
                  } catch (Exception ex) {log.error("Erro ao devolver CallableStatement",ex);} 
                }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia na RNU de documentos
    public boolean existeDocumentoRNU(String tipoId, String numero, String idUtente) throws Exception {  
        boolean retVal = false;
        if(tipoId.length()>0 && numero.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where scg_tipobi_id = ").append(tipoId).append(" ").
                    // Added by Tcosta - Acrescentada esta restrição para permitir num de célula duplicados
                    append("and scg_tipobi_id <> ( select id from sys_cod_genericos where codigo = 'C' and sys_tipos_codigos_id = (select id from sys_tipos_codigos where cod_tipo = 'TPBI') ) ").
                    append("and bi = '").append(numero).append("' ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar documento ", ex);
              throw new Exception("Erro ao validar documento: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
                if (ps!=null)  {
                  try  {
                      ps.close();
                  } catch (Exception ex) {log.error("Erro ao devolver preparedStatement",ex);} 
                }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia de NIF na RNU
    public boolean existeNif(String nif, String idUtente) throws Exception {  
        boolean retVal = false;
        if(nif.length()>0 && idUtente.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where nif = ").append(nif).append(" ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar nif ", ex);
              throw new Exception("Erro ao validar nif: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
                if (ps!=null)  {
                  try  {
                      ps.close();
                  } catch (Exception ex) {log.error("Erro ao devolver preparedStatemnt",ex);} 
                }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia de NISS na RNU
    public boolean existeNiss(String niss, String idUtente) throws Exception {  
        boolean retVal = false;
        if(niss.length()>0 && idUtente.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where niss = ").append(niss).append(" ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar niss ", ex);
              throw new Exception("Erro ao validar niss: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
                if (ps!=null)  {
                  try  {
                      ps.close();
                  } catch (Exception ex) {log.error("Erro ao devolver preparedStatement",ex);} 
                }
            }
        }
        return retVal;
    }
    
    public int listaUtentesConfrontados(String nome,
                                        String dta_nasc,
                                        String tipodoc,
                                        String documento,
                                        String niss,
                                        String nif) throws Exception {
        ListaUtentesConfrontadosImpl vo = this.getListaUtentesConfrontados();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        try{
            vo.setNamedWhereClauseParam("nome", nome.length()==0?null:nome);
            vo.setNamedWhereClauseParam("dta_nasc", dta_nasc.length()==0?null:dta_nasc);
            vo.setNamedWhereClauseParam("tipodoc", tipodoc.length()==0?null:tipodoc);
            vo.setNamedWhereClauseParam("documento", documento.length()==0?null:documento);
            vo.setNamedWhereClauseParam("niss", niss.length()==0?null:niss);
            vo.setNamedWhereClauseParam("nif", nif.length()==0?null:nif);
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter lista de utentes confrontados", e);
          throw e;
        }
        return vo.getRowCount();
    }
    
    // -- inscrição de utente no centro de saúde de sessão
    // nota: se o utente ainda não tiver nir gera nir
    public Number processoDeInscricaoUtente(String idUtente,
                                            String idTipoInscricao,
                                            String idTipoUtente,
                                            String idEquipa,
                                            String idFamilia,
                                            String nprocfam,
                                            String idParentesco,
                                            String codARSD,
                                            String idCentroSaude,
                                            String idInscricaoAntiga,
                                            String idHistInscricaoEquipaAntiga,
                                            String idMaternidade) throws Exception {
        Number idInscricao = new Number(0);
        try{
            log.debug("idUtente: " + idUtente + "; idTipoInscricao: " + idTipoInscricao + "; idTipoUtente: " + idTipoUtente + "; idEquipa: "+ idEquipa + "; idFamilia: " + idFamilia + "; idParentesco: " + idParentesco + "; codCentroSaude: " + codARSD + "; idCentroSaude: " + idCentroSaude);
            
            geraNirUtente(idUtente,codARSD);
            
            // -- inactivar inscrição antiga
            if(idInscricaoAntiga.length()>0){
                inactivaInscricao(idInscricaoAntiga, idHistInscricaoEquipaAntiga,"");
            }
            
            // -- Insert de Inscrição (IDU_INSCR)
            idInscricao = insertInscricao(idUtente, idTipoInscricao, idTipoUtente, idCentroSaude, idMaternidade);
            
             // -- Associar Equipa - Médico (pro_hist_equipas)
            associarHistoricoEquipas(idInscricao, idEquipa);

            // -- Associar Familia (IDU_HIST_FAMILIA)
            associarFamiliaUtente(idFamilia, nprocfam, idInscricao, idParentesco);
            
            this.getDBTransaction().commit();
            
        } 
        
        catch(Exception e){
          this.getDBTransaction().rollback();
          log.error("", e);
          throw e;
        }
        return idInscricao;
    }
    
    public Number insertInscricao(String idUtente,
                                  String idTipoInscricao,
                                  String idTipoUtente,
                                  String codCentroSaude,
                                  String codMaternidade) throws Exception {
        log.info("Inserida inscrição:" + idUtente);
        log.debug("codCentroSaude: " + codCentroSaude);
        log.debug("codMaternidade: " + codMaternidade);
        Number retVal = new Number(0);
        PreparedStatement ps = null;
        try {
            // insert de inscrição
            InscricoesUtenteImpl vo = getInscricoesUtente();
            vo.clearCache();
            InscricoesUtenteRowImpl row = (InscricoesUtenteRowImpl)vo.createRow();
            row.setDtaInsc(new Date(Date.getCurrentDate()));
            row.setScgTipoinscrId(new Number(idTipoInscricao));
            row.setScgTipoutenteId(new Number(idTipoUtente));
            row.setIduIdentUtId(new Number(idUtente));
            row.setSysEntidadesId(new Number(codCentroSaude));
            row.setDataIni(new Date(Date.getCurrentDate()));
            
            if(codMaternidade!=null)row.setSysEntidadesIdMaternidade(new Number(codMaternidade));;
            vo.insertRow(row);
            this.getDBTransaction().postChanges();
            
            retVal = row.getId().getSequenceNumber();
            
            // inserir registo para nova posição da inscrição
            StringBuffer sb = new StringBuffer("");
            String userOperacao = this.getInscricaoActiva().getSessionUser();
            sb.append(" insert into idu_inscr_status (idu_inscr_id, activa, dta_ult_contacto, data_ini, created_by, last_updated_by) values (?,'S',sysdate,sysdate,?,?) ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.setString(1, retVal.toString());
            ps.setString(2, userOperacao);
            ps.setString(3, userOperacao);
            ps.execute();
            this.getDBTransaction().postChanges();
        } catch (DMLException dmlE) {
              log.error(dmlE);
              Object[] d = dmlE.getDetails();
              if(d.length>0){
                  throw new Exception(d[0].toString());   
              } else {
                throw dmlE;
              }
        } catch (SQLException sqlE) {
          this.getDBTransaction().rollback();  
          log.error(sqlE);
          log.debug("codigo de erro: " + sqlE.getErrorCode());
          throw new Exception(sqlE.getMessage());  
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("", e);
          throw e;
        } finally {
            if(ps!=null){
                try  {
                    ps.close();
                } catch (Exception ex)  {} 
                
            }
        }
        log.debug("insert de registo de inscrição efectuado com sucesso e com o identificador " + retVal.toString());
        return retVal;
    }
    
    /*
     * Inactivar Inscrição
     *   1. inactivar inscriçao
     *   2. inactivar equipa de médico associada
     *   3. inactivar família associada
     * */
    public void inactivaInscricao(String idInscricao, 
                                  String idHistInscricaoEquipa,
                                  String idMotivoFecho) throws Exception {
        log.info("vai inactivar a inscrição com o id: " + idInscricao + " e histórico de inscrições em equipas com o id: " + idHistInscricaoEquipa + " com o motivo de anulacao: " + idMotivoFecho);
        PreparedStatement ps = null;
        try {
        
            Date data = new Date(Date.getCurrentDate());
            
            // 1. inactivar inscriçao
            Key rowKey = new Key(new Object[] { idInscricao });
            InscricoesUtenteImpl voInscricaoUtente = getInscricoesUtente();
            voInscricaoUtente.clearCache();
            Row[] rows = voInscricaoUtente.findByKey(rowKey, 1);
            for (int i = 0; i < rows.length; i++) {
                InscricoesUtenteRowImpl row = (InscricoesUtenteRowImpl)rows[i];
                if(idMotivoFecho.length()>0){
                    row.setScgMotivoFechoId(new Number(idMotivoFecho));
                } else {
                    row.setScgTipoinscrId(new Number(obtemIdCodigoGenerico("4","CINS"))); // obter id do tipo de inscriçao "Transferido para"
                }        
                row.setDataFim(data);
            }
            
            // colocar data fim no registo actual de estado da inscricao para que fique em historico
            StringBuffer sb = new StringBuffer("");
            String userOperacao = this.getInscricaoActiva().getSessionUser();
            sb.append(" update idu_inscr_status set data_fim = sysdate, last_updated_by = ? where idu_inscr_id = ? and data_fim is null ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.setString(1, userOperacao);
            ps.setString(2, idInscricao);
            ps.execute();
            
            // 2. inactivar equipa de médico associada
            Key rowKeyHist = new Key(new Object[] { idHistInscricaoEquipa });
            HistoricoInscrsEquipasImpl voHistInscrEquipa = getHistoricoInscrEquipas();
            Row[] rowsHist = voHistInscrEquipa.findByKey(rowKeyHist, 1);
            for (int i = 0; i < rowsHist.length; i++) {
                HistoricoInscrsEquipasRowImpl rowHist = (HistoricoInscrsEquipasRowImpl)rowsHist[i];
                rowHist.setDataFim(data);
            }
            
            // 3. inactivar familia associada
            desactivaFamiliaUtente(idInscricao);
            
            this.getDBTransaction().postChanges();
            
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao inactivar inscrição c/ o numero " + idInscricao, e);
          throw e;
        } finally {
            if(ps!=null) {
                try {
                    ps.close();
                } catch(Exception e) {
                  log.error("Erro no finally de inactivaInscricao", e);
                }
            }
        } 
        
        log.debug("inactivação de inscrição " + idInscricao + " efectuada com sucesso");
    }
    
    /*
     * Alterar Inscrição - Tipo Utente
     * nota: apenas altera o tipo de utente da inscrição activa
     *       A alteração não será refletida no histórico de inscrições.
     * */
    public void alterarTipoUtenteDaInscricao(String idInscricao, 
                                             String idTipoUtente) throws Exception {
        log.info("vai alterar tipo de utente para a inscrição " + idInscricao );
        try {
            InscricoesUtenteImpl vo = getInscricoesUtente();
            vo.clearCache();
            // insctiva registo de inscriçao actual
            Key rowKey = new Key(new Object[] { idInscricao });
            Row[] rows = vo.findByKey(rowKey, 1);
            InscricoesUtenteRowImpl oldRow = null;
            for (int i = 0; i < rows.length; i++) {
                oldRow = (InscricoesUtenteRowImpl)rows[i];
                oldRow.setScgTipoutenteId(new Number(idTipoUtente));
                oldRow.setDataFim(null);
            }
 
            this.getDBTransaction().commit();
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao alterar tipo de utente da inscrição " + idInscricao, e);
          throw e;
        }
        log.debug("alteraçao de tipo de utente para a inscrição " + idInscricao + " efectuada com sucesso");
    }
    
    /*
     * Alterar Inscrição - Médico
     * 1. insere novo registo na pro_hist_equipas (Médico Novo)
     * 2. inactiva registo de médico antigo na pro_hist_equipas (Médico Antigo)
     * nota: não duplica registo de inscrição.
     * */

    public void alterarMedicoDaInscricao(String idProHistEquipas,
                                         String idInscricao,
                                         String idEquipa) throws Exception {
        log.info("vai alterar médico para a inscrição " + idInscricao);
        try {
            if (idProHistEquipas.length() > 0 && idInscricao.length() > 0 &&
                idEquipa.length() > 0) {
                HistoricoInscrsEquipasImpl vo = getHistoricoInscrEquipas();
                vo.clearCache();
                Date data = new Date(Date.getCurrentDate());

                // 1. inactiva registo de médico antigo na pro_hist_equipas (Médico Antigo)
                Key rowKeyHist = new Key(new Object[] { idProHistEquipas });
                Row[] rowsHist = vo.findByKey(rowKeyHist, 1);
                for (int i = 0; i < rowsHist.length; i++) {
                    HistoricoInscrsEquipasRowImpl rowHist =
                        (HistoricoInscrsEquipasRowImpl)rowsHist[i];
                    rowHist.setDataFim(data);
                }
                // nota: necessario efectuar commit porque existe constraint na bd que restringe mais que uma equipa aberta para a mesma inscrição
                this.getDBTransaction().postChanges();

                // 2. insere novo registo na pro_hist_equipas (Médico Novo)
                associarHistoricoEquipas(new Number(idInscricao), idEquipa);
            }
        }

        catch (SQLException e) {
            if (SQLUtils.isValidationTransactionError_SQL(e)) {
                log.warn("Erro ao alterar medico para a inscrição " +
                         idInscricao + " - Erro na transacção" +
                         e.getErrorCode() + "  " + e.getSQLState());
                throw new DataValidationException("Erro ao alterar medico para a inscrição " +
                                                  idInscricao);
            } else {
                log.error("Erro ao alterar medico para a inscrição " +
                          idInscricao, e);
                throw e;
            }

        } catch (DMLException e) {
            if (SQLUtils.isValidationTransactionError_DML(e)) {
                log.warn(e.getDetailMessage());
                throw new DataValidationException("Erro ao alterar medico para a inscrição " +
                                                  idInscricao);
            } else {
                log.error("Erro ao alterar medico para a inscrição " +
                          idInscricao, e);
                throw e;
            }

        } catch (Exception e) {
            log.error("Erro ao alterar medico para a inscrição " + idInscricao, e);
           
            throw e;
        }
        log.debug("alteraçao do médico para a inscrição " + idInscricao +
                  " efectuada com sucesso");
    }
    
    /*
     * Alterar Inscrição - Família
     * 1. insere nova família associada a inscrição
     * 2. inactiva família anterior
     * */
    public void alterarFamiliaDaInscricao(String idInscricao,
                                          String idFamilia, 
                                          String nprocfam,
                                          String idParentesco) throws Exception {
        log.info("vai alterar familia para a inscrição " + idInscricao );
        try {
            desactivaFamiliaUtente(idInscricao);
            associarFamiliaUtente(idFamilia, nprocfam, new Number(idInscricao), idParentesco);
            this.getDBTransaction().commit();
        } 
        catch (SQLException e) {
            if (SQLUtils.isValidationTransactionError_SQL(e)) {
                log.warn("Erro ao alterar medico para a inscrição " +
                         idInscricao + " - Erro na transacção" +
                         e.getErrorCode() + "  " + e.getSQLState());
                throw new DataValidationException("Erro ao alterar medico para a inscrição " +
                                                  idInscricao);
            } else {
                log.error("Erro ao alterar medico para a inscrição " +
                          idInscricao, e);
                throw e;
            }

        } catch (DMLException e) {
            if (SQLUtils.isValidationTransactionError_DML(e)) {
                log.warn(e.getDetailMessage());
                throw new DataValidationException("Erro ao alterar medico para a inscrição " +
                                                  idInscricao);
            } else {
                log.error("Erro ao alterar medico para a inscrição " +
                          idInscricao, e);
                throw e;
            }
            }
         catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro ao alterar família da inscrição " + idInscricao, e);
          throw e;
        }
        log.debug("alteraçao de família da inscrição " + idInscricao + " efectuada com sucesso");
    }
    
    public void associarHistoricoEquipas(Number idInscricao,
                                         String idEquipa) throws Exception {
        try {
             log.debug("vai inserir histórico de inscrições para a inscrição " + idInscricao + " e para a equipa " + idEquipa);
             HistoricoInscrsEquipasImpl vo = getHistoricoInscrEquipas();
             vo.clearCache();
             HistoricoInscrsEquipasRowImpl row = (HistoricoInscrsEquipasRowImpl)vo.createRow();
             row.setIduInscrId(idInscricao);
             row.setProEquipasId(new Number(idEquipa));
             row.setDataIni(new Date(Date.getCurrentDate()));
             vo.insertRow(row);
             this.getDBTransaction().postChanges();
        } 
        catch (Exception e) {
             log.warn("Erro ao inserir histórico de inscrição " + idInscricao );
              throw e;
        }
    }
    
    // -- associar uma familia ao utente
    public void associarFamiliaUtente(String idFamilia, 
                                      String nprocfam,  
                                      Number idInscricao, 
                                      String idParentesco) throws Exception {
        log.info("vai associar inscrição " + idInscricao + " à família " + idFamilia + " com o parentesco " + idParentesco);
        try{
            HistFamiliasImpl voHistFamiliasUtente = getHistFamilias();
            voHistFamiliasUtente = getHistFamilias();
            
            HistFamiliasRowImpl rowHistFamilia = (HistFamiliasRowImpl)voHistFamiliasUtente.createRow();
            rowHistFamilia.setIduFamiliaId(new Number(idFamilia));
            rowHistFamilia.setIduInscrId(idInscricao);
            rowHistFamilia.setScgParentescoId(new Number(idParentesco));
            Number nop = getNop(nprocfam, getCodParentesco(idParentesco));
            rowHistFamilia.setNop(nop);
            rowHistFamilia.setDataIni(new Date(Date.getCurrentDate()));
            this.getDBTransaction().postChanges();
        } catch(Exception e){
          log.error("Erro ao associar inscrição à família", e);
          throw new Exception("Erro ao associar familia ao utente.");
        }
    }    
    
    /* 
     * método para pesquisar processos de famílias 
     * @descriçao: caso o seja fornecido o @param:idFamilia apenas executa a query por esse parâmetro, 
     *             caso contrario incluir no filtro das famílias os retantes parâmetros  
     * */
    public void listaFamiliasAddWhereClause(String idFamilia) throws Exception {
        listaFamiliasAddWhereClause(idFamilia,"","","","","","","","","","","","","","","","","",0);
    }
    public void listaFamiliasAddWhereClause(String idFamilia,       // id_familia
                                            String nProcPFam,       // procfam
                                            String idPFamVia,       // id_tp_rua
                                            String ruaPFam,         // rua
                                            String idPFamEdificio,  // id_tp_porta
                                            String portaPFam,       // porta
                                            String andarPFam,       // andar
                                            String idPFamLado,      // id_tp_andar
                                            String lugarPFam,       // lugar
                                            String localidadePFam,  // localidade
                                            String idPFamDistrito,  // distrito_id
                                            String idPFamConcelho,  // concelho_id
                                            String idPFamFreguesia, // freguesia_id
                                            String codPostPFam,     // cod_postal 
                                            String seqPostalPFam,   // seq_postal
                                            String lugarPostalPFam, // loc_postal
                                            String idCodPostPFam,   // id_cod_postal
                                            String cSaude,          // id_csaude
                                            int numMaxRegistos) throws Exception {
        try{
            
            ListaFamiliaImpl vo = this.getListaFamilia();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            
            String whereClause = "";
            if(idFamilia.length()>0){
                whereClause = whereClause.concat(" id_familia = ").concat(idFamilia);  
            } else {
                
                // número de processo de família
                whereClause = concatWhereClause("procfam", "=", nProcPFam, whereClause, false); 
                
                // tipo de rua
                whereClause = concatWhereClause("id_tp_rua", "=", idPFamVia, whereClause, false); 
                
                // rua
                whereClause = concatWhereClauseNormalized("rua", ruaPFam, whereClause); 
                
                // tipo porta
                whereClause = concatWhereClause("id_tp_porta", "=", idPFamEdificio, whereClause, false);
                
                // porta
                whereClause = concatWhereClauseNormalized("porta", portaPFam, whereClause);
                
                // andar
                whereClause = concatWhereClauseNormalized("andar", andarPFam, whereClause);
                
                // tipo andar
                whereClause = concatWhereClause("id_tp_andar", "=", idPFamLado, whereClause, false);
                
                // lugar
                whereClause = concatWhereClauseNormalized("lugar", lugarPFam, whereClause);
                
                // localidade
                whereClause = concatWhereClauseNormalized("localidade", localidadePFam, whereClause);
                
                // distrito
                whereClause = concatWhereClause("distrito_id", "=", idPFamDistrito, whereClause, false);
                
                // concelho
                whereClause = concatWhereClause("concelho_id", "=", idPFamConcelho, whereClause, false);
                
                // freguesia
                whereClause = concatWhereClause("freguesia_id", "=", idPFamFreguesia, whereClause, false);
                
                if(idCodPostPFam.length()>0){
                    // id código postal
                    whereClause = concatWhereClause("id_cod_postal", "=", idCodPostPFam, whereClause, false);
                } else {
                    // código postal
                    whereClause = concatWhereClause("cod_postal", "=", codPostPFam, whereClause, false);
                    
                    // sequencia postal
                    whereClause = concatWhereClause("seq_postal", "=", seqPostalPFam, whereClause, false);
                    
                    // localidade postal
                    whereClause = concatWhereClause("loc_postal", "like", lugarPostalPFam, whereClause, true);
                }
   
                // centro de saúde
                whereClause = concatWhereClause("id_csaude", "=", cSaude, whereClause, false);
                
                // restringuir resultados ao número máximo fornecido
                if(numMaxRegistos>0){
                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND rownum < " + numMaxRegistos);
                    } else {
                        whereClause = whereClause.concat(" rownum < " + numMaxRegistos);
                    }
                }
                
            }

            vo.setWhereClause(whereClause);
            // ordenar registos obtidos
            vo.setOrderByClause(" procfam, morada_completa ");
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao pesquisar familias", e);
          throw new Exception("Erro ao pesquisar familias: " + e.getMessage());
        }
    }
    
    public void detalheFamilia(String idFamilia) throws Exception {
        log.debug("vai obter detalhe de família com o identificador " + idFamilia);
        try{
            ListaFamiliaImpl vo = this.getDetalheFamilia();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idFamilia!=null){
                vo.setMaxFetchSize(-1);
                vo.setWhereClause("id_Familia = " + idFamilia);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();   
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error("Erro ao obter detalhe de Família", e);
          throw new Exception("Erro ao obter detalhe de Família: " + e.getMessage());
        }
    }
    
    // -- obtem lista de agregado para uma dada família
    public void edicaoUtenteListaAgregadoFamiliarAddWhereClause(String idFamilia) throws Exception {
        try  {
            ListaAgregadoFamiliarImpl vo = this.getListaAgregadoFamiliar();
            if(idFamilia.length()>0){
                log.debug("vou obter agregado para a família " + idFamilia);
                vo.clearWhereState(); 
                vo.clearCache();
                vo.setMaxFetchSize(-1);
                vo.setWhereClause("idu_familia_id = " + idFamilia +" AND ihf_data_fim IS NULL ");
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch (Exception ex)  {
          log.error("Erro ao obter agregado famíliar para a família " + idFamilia ,ex);
          throw new Exception("Erro ao obter agregado de família:" + ex.getMessage());
        }
    }
    
    // -- obtem lista de graus de parentescos ja atribuidos por familia
    public String[] getParentescosAtribuidos(String idFamilia) throws Exception {
        String[] retVal = new String[2];
        retVal[0] = "";
        retVal[1] = "";
        ResultSet rSet = null;
        PreparedStatement pStatement = null;
        boolean existeAgregado = false;
        try  {
            StringBuffer sb = new StringBuffer("");
            sb.append("SELECT hf.SCG_PARENTESCO_ID, cg.DESCRICAO ").
            append("     FROM idu_hist_familia hf, ").
            append("          sys_cod_genericos cg ").
            append("    WHERE hf.idu_familia_id = ").append(idFamilia).
            append("      and hf.scg_parentesco_id = cg.ID ").
            append("      and data_fim is null ").
            append(" ORDER BY cg.codigo ");
            pStatement = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rSet = pStatement.executeQuery();
            String separador = "";
            while (rSet.next()) {
                existeAgregado = true;
                retVal[0] += separador + rSet.getString(1);
                retVal[1] += separador + rSet.getString(2);
                separador = ", ";
            }
            
            if(!existeAgregado){
                retVal[0] = "0";
                retVal[1] = "familia sem agregado atribuído.";
            }
        } catch (Exception ex)  {
          log.error("Erro ao obter graus de parentesco ja atribuidos para a família " + idFamilia ,ex);
          throw new Exception("Erro ao obter graus de parentesco ja atribuidos para a família:" + ex.getMessage());
        } finally {
            try  {
                if(rSet!=null) rSet.close();
            } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
            try  {
                if(pStatement!=null) pStatement.close();
            } catch (Exception ex) {log.error("Erro ao devolver PreparedStatement",ex);} 
        }
        log.debug("ids de parentescos ja atribuidos para a família " + idFamilia +": <" + retVal[0] + ">");
        log.debug("descrições de parentescos ja atribuidos para a família " + idFamilia +": <" + retVal[1] + ">");
        return retVal;
    }
    
    public void pesqEntidadesEstrangeiras( String dominio,
                                           String codigo,
                                           String descAbrev,
                                           String descricao,
                                           String pais,
                                           String tipo) {
        ListaEntidadesEstrangeirasImpl vo = this.getListaEntidadesEstrangeiras();
        String whereClause = "";
        
        if(descAbrev!=null && descAbrev.length()>0){
            whereClause = " upper(entidade_desc_abrv) like (nvl('%' || q'["+ descAbrev.toUpperCase() + "]' || '%', upper(entidade_desc_abrv)))";
        }
        
        if(descricao!=null && descricao.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause + " and ";
            }
            whereClause = " upper(entidade_designacao) like (nvl('%' || q'["+ descricao.toUpperCase() + "]' || '%', upper(entidade_designacao)))";
        }
        
        if(tipo.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause + " and ";
            }
            whereClause = " codigo_codigo = '" + tipo + "'";
        }
        
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        vo.clearWhereState();
        vo.setNamedWhereClauseParam("P_TIPO_CODIGO", dominio);
        vo.setNamedWhereClauseParam("P_PAIS", pais);
        if(codigo !=null && !codigo.trim().equals("")){
            vo.setNamedWhereClauseParam("P_ENTIDADE", "%"+codigo.toUpperCase()+"%");
        }else{
            vo.setNamedWhereClauseParam("P_ENTIDADE", codigo);
        }
        vo.setNamedWhereClauseParam("bindDummy", 1);
        vo.setWhereClause(whereClause);
        vo.executeQuery();
    }
    
    // metodo para incluir clausula usando pesquisa em nome normalizado
    // nota: ter en atenção criar indice de função + coluna da tabela a pesquisar para optimizar a procura
    private String concatWhereClauseNormalized(String column, String value, String whereClause) throws Exception { 
        if(column.length()>0 && value.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause.concat(" AND ");
            }
            whereClause = whereClause.concat(" GERAL.NORMALIZA_NOME(").concat(column).concat(") like GERAL.NORMALIZA_NOME('%' || '").concat(value).concat("' || '%')");
        }
        return whereClause;
    }
    
    private String concatWhereClause(String column, String operator, String value, String whereClause, boolean useUpper) throws Exception {  
        if(column.length()>0 && value.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause.concat(" AND ");
            }
            if(operator.equalsIgnoreCase("like")){
                value = "%" + value.replace(' ', '%') + "%";
                
                if(useUpper){
                    whereClause = whereClause.concat(" UPPER(");
                }
                whereClause = whereClause.concat(column);
                if(useUpper){
                    whereClause = whereClause.concat(") ");
                }
                
                whereClause = whereClause.concat(operator);
                
                if(useUpper){
                    whereClause = whereClause.concat(" UPPER('");
                }
                whereClause = whereClause.concat(value);
                if(useUpper){
                    whereClause = whereClause.concat("') ");
                }
            
            } else {
                whereClause = whereClause.concat(" " + column + operator + value);
            }   
        }
        return whereClause;
    }
    
    private Number getNop(String nprocfam, String cod_parentesco){
        Number retVal = new Number();
        try  {
            String nop = nprocfam + cod_parentesco;
            retVal = new Number(nop);
        } catch (Exception ex)  {
            log.debug("", ex);
        }
        return retVal;
    }
    
    private String getCodParentesco(String idParentesco) throws Exception {
        String retVal = "";
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append(" select codigo from sys_cod_genericos where id = ").append(idParentesco);
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                retVal = rs.getString(1);
            }
        } catch(Exception e){
          log.error("",e); 
		  throw e;
        } finally{
            try  {
                rs.close();
            } catch (Exception ex)  {
            } 
            try  {
              ps.close();
            } catch (Exception ex)  {
            } 
        }
        return retVal;
    }
    
    private String getProcFam(Number idFamilia) throws Exception {
        String retVal = "";
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append(" select procfam from idu_familia where id = ").append(idFamilia);
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                retVal = rs.getString(1);
            }
        } catch(Exception e){
          log.error("",e); 
		  throw e;
        } finally{
            try  {
                rs.close();
            } catch (Exception ex)  {
            } 
            try  {
              ps.close();
            } catch (Exception ex)  {
            } 
        }
        return retVal;
    }
    
    private boolean existeNir(String idUtente) throws Exception {
        boolean retVal = false;
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append(" select nir from idu_ident_ut where id = ").append(idUtente);
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                String nir = rs.getString(1);
                if(nir!=null){
                    if(nir.length()>0){
                        retVal = true;
                    }
                }
            }
        } catch(Exception e){
          log.error("",e);
          throw e;		  
        } finally{
            try  {
                rs.close();
            } catch (Exception ex)  {
            } 
            try  {
              ps.close();
            } catch (Exception ex)  {
            } 
        }
        return retVal;
    }
    
     // -- validar se utente pode ter beneficio
     public boolean utentePodeTerBeneficio(String idUtente, 
                                           String tipo, 
                                           String benefValue) throws Exception {
         // apenas se tiver regra definida e que devolve true/false consoante o resultado do sqltext
         // caso contrario devolve sempre false
         boolean retVal = false;
         PreparedStatement ps = null;
         StringBuffer sb = new StringBuffer("");
         ResultSet rs = null;
         try{
             if(idUtente!=null){
                 if(idUtente.length() >0){

                     log.debug("vai verificar se utente com o id " + idUtente + " pode ter o beneficio " +  benefValue);
                     
                     sb.append("SELECT spp.sqltext ").
                     append("     FROM idu_benef_ut b, ").
                     append("          idu_benef_regras r, ").
                     append("          sys_parametros_pesquisas spp ");
                     
                     if(tipo.equals("C")){
                         sb.append("    WHERE b.cod_benef = ").append(benefValue);
                     } else {
                         sb.append("    WHERE b.id = ").append(benefValue);
                     }
                     
                     sb.append("      AND b.id = r.idu_benef_ut_id ").
                     append("      AND r.spp_id = spp.id ").
                     append("      AND r.tipo_regra = 'V' "); // apenas regras de validação
                     
                     log.debug(sb.toString());
                    
                     ps = this.getDBTransaction().createCallableStatement(sb.toString(), 1);
                     rs = ps.executeQuery();
                     if(rs.next()){
                         
                         String sqltext = rs.getString(1);
                         if(sqltext!=null){
                             if(sqltext.length()>0){
                                 
                                 // replace IDU_IDENT_UT_ID pelo parametro do id utente
                                 sqltext = sqltext.replaceAll(":IDU_IDENT_UT_ID", idUtente);
                                 log.debug("SQLTEXT: <"+ sqltext + ">");
                                 // executar sqltext
                                 ps = this.getDBTransaction().createCallableStatement(sqltext, 1);
                                 rs = ps.executeQuery();
                                 if(rs.next()){
                                     retVal = true;
                                 }
                             }
                         }
                     } else {
                         retVal = true;
                     }
                 }
             }
         } catch(Exception e){
           log.error("erro ao verificar se utente pode ter benefício ", e);
           throw new Exception("erro ao verificar se utente pode ter benefício ");
         } finally {
             try{
                 if(rs!=null){
                     rs.close();
                 }
             } catch(Exception e){}
             try{
                 if(ps!=null){
                     ps.close();
                 }
             } catch(Exception e){}
         }
         
         return retVal;
     }
    
    // -- validar se utente pode ter beneficio
    public String obtemDataValidadePorDefeitoParaBeneficio(String idUtente, String idBeneficio) throws Exception {
        String retVal = null;
        PreparedStatement ps = null;
        StringBuffer sb = new StringBuffer("");
        ResultSet rs = null;
        try{
            if(idUtente!=null && idBeneficio!=null){
                if(idUtente.length()>0 && idBeneficio.length()>0 ){
                    
                    // obter query de regra
                    sb.append("SELECT spp.sqltext ").
                    append("     FROM idu_benef_ut b, ").
                    append("          idu_benef_regras r, ").
                    append("          sys_parametros_pesquisas spp ").
                    append("    WHERE b.id = ").append(idBeneficio).
                    append("      AND b.id = r.idu_benef_ut_id ").
                    append("      AND r.spp_id = spp.id ").
                    append("      AND r.tipo_regra = 'D' "); // apenas regras de validação
                        
                    ps = this.getDBTransaction().createCallableStatement(sb.toString(), 1);
                    rs = ps.executeQuery();
                    if(rs.next()){
                        
                        String sqltext = rs.getString(1);
                        if(sqltext!=null){
                            if(sqltext.length()>0){
                                    
                                // nota: sempre que uma regra de obtenção de data fim incluir uma nova bind variable 
                                // é necessário implementar o código aqui para essa bind variable seja preenchida
                                if(sqltext.contains(":IDU_IDENT_UT_ID")){
                                    sqltext = sqltext.replaceAll(":IDU_IDENT_UT_ID", idUtente);
                                }
                                
                                log.debug("SQLTEXT: <"+ sqltext + ">"); 
                                // executar sqltext
                                ps = this.getDBTransaction().createCallableStatement(sqltext, 1);
                                rs = ps.executeQuery();
                                if(rs.next()){
                                    retVal = rs.getString(1);
                                }
                             
                            }
                        }
                    }
                }
            }
        } catch(Exception e){
          log.error("erro ao obter data fim por defeito para o beneficio ", e);
          throw new Exception("erro ao obter data fim por defeito para o beneficio ");
        } finally {
            try{
                if(rs!=null){
                    rs.close();
                }
            } catch(Exception e){}
            try{
                if(ps!=null){
                    ps.close();
                }
            } catch(Exception e){}
        }
        
        return retVal;
    }
    
    public String obtemIdInscricaoActiva(String idUtente) throws Exception{
        String retVal = "";
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            if(idUtente.length()>0){
                    StringBuffer sb = new StringBuffer("");
                    sb.append(" select id from idu_inscr where idu_ident_ut_id = ").append(idUtente).append(" and data_fim is null ");
                    ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                    rs = ps.executeQuery();
                    if (rs.next()) {
                            String id = rs.getString(1);
                            if(id!=null){
                                    if(id.length()>0){
                                            retVal = id;
                                    }
                            }
                    }
            }
        } catch(Exception e){
          log.error("",e); 
          throw e;
        } finally{
		  try {
            if(rs!=null){
				rs.close();
			}
          } catch (Exception ex)  { } 
          try  {
            if(ps!=null){
				ps.close();
			}
          } catch (Exception ex)  { }
		}
        return retVal;
    }
      
    public void detalheUtenteAddWhereClause(String idUtente) throws Exception{ 
        try{
            ViewObjectImpl vo = (ViewObjectImpl)this.getDetalheUtente();
            vo.clearWhereState();
            if (idUtente == null) {
                idUtente = new String("");
            }
            if (idUtente.length() > 0 ) {
                    String whereClause = new String(" idi_id = ").concat(idUtente);
                    vo.setNamedWhereClauseParam("idUtente", idUtente);
                    vo.addWhereClause(whereClause);
                    vo.setMaxFetchSize(-1);
                    vo.clearCache();
                    vo.setNamedWhereClauseParam("bindDummy", 1);
                    vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception t){
          log.error(t);
          throw t;
        }
    }
    
    
    static public final int vo_REGISTOPOTPRINCIPAL = 1;
    static public final int vo_REGISTOPOTDUPPLICADO = 2;
    public void detalheUtentePotencialDuplicado(String idUtente, int vo) throws Exception {
        try{
            
            DetalheUtenteDuplicadoImpl voU = null;
            switch (vo) {
              case vo_REGISTOPOTPRINCIPAL:
                   voU = this.getPotencialDuplicadoRP();
                   break;
              case vo_REGISTOPOTDUPPLICADO:
                   voU = this.getPotencialDuplicadoRD();
                   break;
              default:
                   voU = this.getPotencialDuplicadoRP();               
                   break;
            }
    
            voU.clearWhereState();
            voU.clearCache();
            if (idUtente.length() > 0 ) {
                String whereClause = new String(" id = ").concat(idUtente);
                voU.addWhereClause(whereClause);
                voU.setMaxFetchSize(-1);
                voU.setNamedWhereClauseParam("bindDummy", 1);
                voU.executeQuery();
            } else {
                voU.setMaxFetchSize(0);
            }
        } catch(Exception t){
          log.error(t);
          throw t;
        }
    }
    
    public void listaPaises() throws Exception {
        try  {
            ListaCodigosHierarquicosLovImpl vo = this.getListaPaisesLov();
            vo.clearWhereState();
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("SYS_TIPOS_CODIGOS_ID = ( SELECT ID FROM SYS_TIPOS_CODIGOS WHERE COD_TIPO = 'PAIS' )");
            vo.setOrderByClause("DESCRICAO");
            vo.setNamedWhereClauseParam("bindDummy", 1);
            vo.executeQuery();
        } catch (Exception ex)  {
          log.error("",ex);
          throw new Exception("erro ao obter lista de paises:" + ex.getMessage());
        }
    }
    
    // metodo para obter a lista de entidades estrangeiras responsaveis activas para determinado utente
    // Carla Diogo (22-06-2009)
    public void edicaoUtenteListaEntidadesEstrangeirasUtenteAddWhereClause(String idUtente) throws Exception {
        try{
            ListaEntidadesEstrangeirasUtenteImpl vo = this.getListaEntidadesEstrangeirasUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            if(idUtente.length()>0){
                vo.setMaxFetchSize(-1);
                vo.setid_ident_ut_id(idUtente);
                vo.setWhereClause(" data_fim is null ");
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error(e,e);
          throw new Exception("Erro ao obter entidades estrangeiras associadas ao utente: " + e.getMessage());
        }
    }
    
    public String obtemIdCodigoGenerico(String codigo, String dominio) throws Exception{
        String retVal = "";
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append(" select id from sys_cod_genericos where codigo = '").append(codigo).append("' and sys_tipos_codigos_id in (select id from sys_tipos_codigos where cod_tipo = '").append(dominio).append("'  ) ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                String id = rs.getString(1);
                if(id!=null){
                    if(id.length()>0){
                        retVal = id;
                    }
                }
            }
        } catch(Exception e){
          log.error("",e); 
		  throw e;
        } finally{
		  try {
            if(rs!=null){
				rs.close();
			}
          } catch (Exception ex)  { } 
          try  {
			if(ps!=null){
				ps.close();
			}
          } catch (Exception ex)  { } 
		}
        return retVal;
    }
    
    public boolean marcaDuplicado(String id1, String id2) throws Exception {
        boolean sucesso = false;
        CallableStatement cStatement = null; 
        DBTransaction con = null;
        try {
            con = this.getListaEntidades().getDBTransaction();
            cStatement = con.createCallableStatement("{ call IGIF.PKG_AGREGA_MATRIZ_RESULTADOS.ADICIONAR_POT_DUP(?,?) } ", 1);
            cStatement.setString(1,id1);
            cStatement.setString(2,id2);
            cStatement.execute();

            sucesso = true;

        } catch(Exception e) {
          log.error("Erro em marcaDuplicado", e);
          throw e;
          
        } finally {
            if(cStatement!=null) {
                try {
                    cStatement.close();
                } catch(Exception e) {
                    log.error("Erro no finally de marcaDuplicado", e);
                    throw e;
                }
            }
        }
        return sucesso;
        
    }
    
    /* Feature 81
     * */
    public void activaStatusInscricao(String idUtente, 
                                      String idInscr, 
                                      String codigoIntroduzido) throws Exception {
        PreparedStatement ps = null; 
        CallableStatement cs = null;
        ResultSet rs = null;
        try {
            StringBuffer sb = new StringBuffer("");
            String userOperacao = this.getInscricaoActiva().getSessionUser();
            
            // colocar data fim no registo actual para que fique em historico
            sb.append(" select codigo_validacao, activa from idu_inscr_status where idu_inscr_id = ? and data_fim is null and rownum = 1 ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.setString(1, idInscr);
            rs = ps.executeQuery();
            if(rs.next()){
                
                String codigo = "";
                if(rs.getString(1)!=null){
                    codigo = rs.getString(1);
                }
                
                if(!codigo.equalsIgnoreCase(codigoIntroduzido)){
                    throw new DataValidationException ("Código de ativação de inscrição incorreto.");
                } else {
                    cs = this.getDBTransaction().createCallableStatement("{ ? = call IGIF.Utentes_Potencialmente_N_Freq.Altera_Status_UT_Frequentador(?,?,?,?,?,?,?) }", 1);
                    cs.registerOutParameter(1, Types.NUMERIC);
                    cs.setString(2, idUtente);
                    cs.setString(3, rs.getString(2));
                    cs.setString(4, "S");
                    java.util.Date today = new java.util.Date();
                    cs.setDate(5, new java.sql.Date(today.getTime()));
                    cs.setDate(6, new java.sql.Date(today.getTime()));

                    cs.setString(7, userOperacao);
                    cs.registerOutParameter(8, Types.VARCHAR);
                    cs.execute();
                    
                    log.debug("RETVAL: " + cs.getString(1));
                    if(cs.getString(8)!=null){
                        log.debug("ERRO: " + cs.getString(8));
                        throw new Exception ("erro ao alterar estado da inscrição (Altera_Status_UT_Frequentador) : " + cs.getString(1));
                    }
                    
                    this.getDBTransaction().postChanges();
                }
            }
            
        } 
        catch(DataValidationException e) {
                 log.warn(e.getMessage() +" - para o utente com id "+idUtente+" com o código introduzido "+codigoIntroduzido );
                 throw e;
               } 
        catch(Exception e) {
          log.error("", e);
          throw e;
        } finally {
            if(rs!=null) {
                try {
                    rs.close();
                } catch(Exception e) {
                  log.error("", e);
                }
            }
            if(ps!=null) {
                try {
                    ps.close();
                } catch(Exception e) {
                  log.error("", e);
                }
            }
            if(cs!=null) {
                try {
                    cs.close();
                } catch(Exception e) {
                  log.error("", e);
                }
            }
        }
    }
    
    /*
    public void activaStatusInscricao(String nir, 
                                      String codigoIntroduzido) throws Exception {
        CallableStatement cs = null;
        try {
            String userOperacao = this.getInscricaoActiva().getSessionUser();
            if(!codigoIntroduzido.equalsIgnoreCase(codigoIntroduzido)){
                throw new Exception ("Código de ativação de inscrição incorreto.");
            } else {
                cs = this.getDBTransaction().createCallableStatement("{ ? = call IGIF.GMF.ATIVA_INSCRICAO(?,?) }", 1);
                cs.registerOutParameter(1, Types.NUMERIC);
                cs.setString(2, nir);
                cs.setString(3, codigoIntroduzido);
                // cs.setString(7, userOperacao);
                cs.registerOutParameter(8, Types.VARCHAR);
                cs.execute();
                
                log.debug("RETVAL: " + cs.getString(1));
                if(cs.getString(8)!=null){
                    log.debug("ERRO: " + cs.getString(8));
                    throw new Exception ("erro ao alterar estado da inscrição (Altera_Status_UT_Frequentador) : " + cs.getString(1));
                }                
                this.getDBTransaction().postChanges();
            }
            
            

        } catch(Exception e) {
          log.error("", e);
          throw e;
        } finally {
            if(cs!=null) {
                try {
                    cs.close();
                } catch(Exception e) {
                  log.error("", e);
                }
            }
        }
    }
    */
    
    /*
    public void activaInscricao(String idInscr) throws Exception {
        PreparedStatement ps = null; 
        try {
            StringBuffer sb = new StringBuffer("");
            String userOperacao = this.getInscricaoActiva().getSessionUser();
            
            // colocar data fim no registo actual para que fique em historico
            sb.append(" update idu_inscr_status set data_fim = sysdate, last_updated_by = ? where idu_inscr_id = ? and activa= 'N' and data_fim is null ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.setString(1, userOperacao);
            ps.setString(2, idInscr);
            ps.execute();
                        
            // inserir registo para nova posição da inscrição
            sb = new StringBuffer("");
            sb.append(" insert into idu_inscr_status (idu_inscr_id, activa, dta_ult_contacto, data_ini, created_by, last_updated_by) values (?,'S',sysdate,sysdate,?,?) ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            ps.setString(1, idInscr);
            ps.setString(2, userOperacao);
            ps.setString(3, userOperacao);
            ps.execute();
            
            this.getDBTransaction().postChanges();
            this.getDBTransaction().commit();
            
        } catch(Exception e) {
          this.getDBTransaction().rollback();
          log.error("Erro em activaInscricao", e);
          throw e;
        } finally {
            if(ps!=null) {
                try {
                    ps.close();
                } catch(Exception e) {
                  log.error("Erro no finally de activaInscricao", e);
                }
            }
        }
    }
    */
    
    public void utentesInsEconomicaAddWhereClause(String sns, 
                                                 String nif, 
                                                 String nifPrincipal) throws Exception {
        try{
            ListaUtentesInsEconomicaImpl vo = this.getListaUtentesInsEconomica();
            vo.clearCache();
            vo.clearWhereState();
            if(sns.length()>0 || nif.length()>0 || nifPrincipal.length()>0){
                String whereClause = "1=1";
            
                vo.setMaxFetchSize(-1);
                if(nif.length() > 0 ){
                    whereClause = whereClause + " and nifTitularAgregado = " + nif;
                }
                if(sns.length() > 0 ){
                    whereClause = whereClause + " and sns = " + sns;
                }
                if(nifPrincipal.length() > 0 ){
                    whereClause = whereClause + " and nifUtente = " + nifPrincipal;
                }
                vo.setWhereClause(whereClause);
                vo.setNamedWhereClauseParam("bindDummy", 1);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);   
            }
        } catch(Exception e){
          log.error(e);
          throw e;
        }
    }
    
    public void reprocessarPedido(String id) throws Exception {
        CallableStatement cStatement = null;
        try {
            if(id.length()>0){
                String userOperacao = this.getInscricaoActiva().getSessionUser();
                cStatement = this.getDBTransaction().createCallableStatement("{ call IGIF.utentes_insuf_econ.reprocessa_pedido('" + id + "','" + userOperacao + "') }", 1);
                cStatement.execute();
            }
        } catch(Exception e) {
          log.error("Erro em reprocessarPedido", e);
          throw e;
        } finally {
            if(cStatement!=null) {
                try {
                    cStatement.close();
                } catch(Exception e) {
                  log.error("Erro no finally de reprocessarPedido", e);
                }
            }
        }
    }
    
    
    public void reativarIsencao(String id) throws Exception {
        CallableStatement cStatement = null;
        try {
            if(id.length()>0){
                String userOperacao = this.getInscricaoActiva().getSessionUser();
                cStatement = this.getDBTransaction().createCallableStatement("{ call IGIF.utentes_insuf_econ.reactiva_isencoes_pred('" + id + "','" + userOperacao + "') }", 1);
                cStatement.execute();
            }
        } catch(Exception e) {
          log.error("Erro em reprocessarPedido", e);
          throw e;
        } finally {
            if(cStatement!=null) {
                try {
                    cStatement.close();
                } catch(Exception e) {
                  log.error("Erro no finally de reprocessarPedido", e);
                }
            }
        }
    }
    
    public void adicionarNota(String id, String nota) throws Exception {
        PreparedStatement ps = null;
        try {
            if(id.length()>0){
                ps = this.getDBTransaction().createPreparedStatement(" update utentes_insuf_economica set note = ? where id = ? ", 1);
                ps.setString(1,nota.length()>0?nota:null);
                ps.setString(2,id);
                ps.executeUpdate();
                this.getDBTransaction().postChanges();
                this.getDBTransaction().commit();
            }
        } catch(Exception e) {
          
          log.error("Erro em adicionarNota", e);
          throw e;
        } finally {
            if(ps!=null) {
                try {
                    ps.close();
                } catch(Exception e) {
                  log.error("Erro no finally de adicionarNota", e);
                }
            }
        }
    }

    /**Container's getter for ListaBeneficios1
     */
    public ListaBeneficiosLovImpl getListaBeneficios1() {
        return (ListaBeneficiosLovImpl)findViewObject("ListaBeneficios1");
    }

    /**Container's getter for UtentesDuplicadosLov
     */
    public UtentesDuplicadosLovImpl getUtentesDuplicadosLov() {
        return (UtentesDuplicadosLovImpl)findViewObject("UtentesDuplicadosLov");
    }


    /**Container's getter for EquipasMedicosLov
     */
    public EquipasMedicosLovImpl getEquipasMedicosLov() {
        return (EquipasMedicosLovImpl)findViewObject("EquipasMedicosLov");
    }

    /**Container's getter for ListaBeneficiosLov
     */
    public ListaBeneficiosLovImpl getListaBeneficiosLov() {
        return (ListaBeneficiosLovImpl)findViewObject("ListaBeneficiosLov");
    }


    private void onRemoverBeneficioIsTaxaMod(String id,String idUtente) {
    
        log.info("requerida acção de termino de benefício de 'Isenção de Taxa Moderadora'");
        try{           
            if(id.length()>0){
                String[] ids = new String[1];
                ids[0] = id;
                
                try{
                    if(ids!=null){
                        for (int i = 0; i < ids.length; i++) {
                            removerBeneficio(ids[i]);
                        }   
                    }
                } catch(Exception e){
                  throw e;
                }
                
                isencaoTaxaModeradoraAddWhereClause(idUtente); 
                
            }
        } catch(Exception e){
          String msg = "Erro ao terminar benefício de 'Isenção de Taxa Moderadora' para o utente.";
          log.error(msg, e);          
        }
    
    }
    
    // listaBeneficios
    public void listaBeneficios(String idUtente, String tipoBenef, String descricao) throws Exception {
        try{
            ListaBeneficiosLovImpl vo = this.getListaBeneficiosLov();
            vo.clearWhereState(); 
            vo.clearCache();
            if(tipoBenef.length()>0){
                vo.setMaxFetchSize(-1);
                vo.setWhereClause(null);
                vo.setWhereClause("1=1");
                vo.setWhereClause(vo.getWhereClause() + " AND scg_benef_tipo_cod = '"+ tipoBenef +"'");
                if(descricao.length()>0){
                    vo.setWhereClause(vo.getWhereClause() + " AND UPPER(DESCR) LIKE '%"+ descricao.toUpperCase() + "%'");
                }
                if(tipoBenef.equalsIgnoreCase("I")){
                    String sqlIn = devolvePossiveisBenefUtente(idUtente);
                    if(sqlIn.length()>0){
                        vo.setWhereClause(vo.getWhereClause() + " AND COD_BENEF IN ("+ sqlIn + ")");
                    }
                }
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception e){
          log.error(e,e);
          throw new Exception("Erro ao obter beneficios: " + e.getMessage());
        }
    }
    
    // -- 
    public String devolvePossiveisBenefUtente(String idUtente) throws Exception {
        PreparedStatement ps = null;
        ResultSet rs = null;
        String sqlInBenef = "";
        try{
            String query = "select idu.devolvePossiveisBenefUtente(" + idUtente + ") from dual";
            ps = this.getDBTransaction().createPreparedStatement(query, 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                sqlInBenef = rs.getString(1);
            }
        } catch(Exception e){
          log.error("Erro ao consultar beneficios que utente pode adicionar", e);
          throw e;
        } finally{
              if(rs!=null) {
                  try{
                      rs.close();
                  } catch(Exception e){}
              }
              if(ps!=null) {
                  try{
                      ps.close();
                  } catch(Exception e){}
              }
        }
        return sqlInBenef;
    }
    
    public void listaHistoricoEstadoInscricao(String idInscr) {
        ListaHistoricoEstadoInscricaoImpl vo = getListaHistoricoEstadoInscricao();
        vo.clearWhereState();
        if(idInscr!=null){
            vo.setMaxFetchSize(-1);
            vo.setNamedWhereClauseParam("idInscr", idInscr);
            vo.executeQuery();
        } else {
            vo.setMaxFetchSize(0);
        }
    }
    
  

    /*
     * Adicionado por Tiago Costa para permitir ir obter o codigo do Beneficio pelo seu ID
     *  Linha: Fim do controller, visto ser um método novo
     * */

    private String obtemCodigoBenfById(String benefValue) throws SQLException {
    
        PreparedStatement ps = null;
        StringBuffer sb = new StringBuffer("");
        ResultSet rs = null;
        
        try{
        sb.append(" SELECT b.cod_benef FROM idu_benef_ut b where b.id=").append(benefValue);
        
        //System.out.println(sb.toString());
        log.info(sb.toString());
            
        ps = this.getDBTransaction().createCallableStatement(sb.toString(), 1);
        rs = ps.executeQuery();
        if(rs.next()){
            String codigo = rs.getString(1);
            return codigo;
        }
        
        return "";
        
        } catch (SQLException e) {
              throw e;          
        }
        finally{
            if(rs!=null) {
                try{
                    rs.close();
                } catch(Exception e){}
            }
            if(ps!=null) {
                try{
                    ps.close();
                } catch(Exception e){}
            }
        }
        
    }
    
    public String identificacaoUtenteUpdateHospital(String idUtente, String niss, String nif) throws Exception {
        String retVal = "";
        try {
            // validar documentos (niss & nif)
            boolean isValidNiss = true;
            if(niss.length()>0){
                isValidNiss = validarDocumento('N', niss);
            }
            
            
            if(!isValidNiss){
                retVal += "Por Favor introduza um NISS válido.\n";
            }
            
            boolean isValidNif = true;
            if(niss.length()>0){
                isValidNif = validarDocumento('F', nif);
            }
            
            
            if(!isValidNif){
                retVal += "Por Favor introduza um NIF válido.\n";
            }
            
            // caso nif e niss não sejam validos devolve já mensagem de erro
            if(retVal.length()>0){
                return retVal;
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNiss(niss, idUtente)){
                retVal = retVal +"\nJá existem utentes com o Nº S.Social introduzido.";
            }
            
            // vou validar se doc. de ident. já existe na RNU
            if(existeNif(nif, idUtente)){
                retVal = retVal +"\nJá existem utentes com o NIF introduzido.";
            }
            
            if(retVal.length()>0){
                return retVal;
            }
            
            if(retVal.length()==0){
                IdentificacoesUtenteImpl voIdentificacaoUtente = getIdentificacoesUtente();
                voIdentificacaoUtente.clearCache();
                Key rowKey = new Key(new Object[] { idUtente });
                Row[] rows = voIdentificacaoUtente.findByKey(rowKey, 1);
                IdentificacoesUtenteRowImpl row = null;
                for (int i = 0; i < rows.length; i++) {
                    row = (IdentificacoesUtenteRowImpl)rows[i];
                    if(niss.length()==0) row.setNiss(null); else row.setNiss(new Number(niss));
                    if(nif.length()==0) row.setNif(null); else row.setNif(new Number(nif));
                    this.getDBTransaction().postChanges();
                    this.getDBTransaction().commit();                    
                }
            } 
        } catch (Exception e) {
          this.getDBTransaction().rollback();
          log.error("",e);
          throw e;
        }
        
        return retVal;
    }
    
    
    public int listaUtentesNifDuplicado(String idUtente,
                                        String nif) throws Exception {
        UtentesNifDuplicadoImpl vo = this.getUtentesNifDuplicado();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        try{
            vo.setidUtente(idUtente);
            vo.setnif(nif);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter lista de utentes com o nif duplicado", e);
          throw e;
        }
        return vo.getRowCount();
    }
   
    public int listaUtentesNissDuplicado(String idUtente,
                                        String niss) throws Exception {
        UtentesNissDuplicadoImpl vo = this.getUtentesNissDuplicado();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        try{
            vo.setidUtente(idUtente);
            vo.setniss(niss);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter lista de utentes com o niss duplicado", e);
          throw e;
        }
        return vo.getRowCount();
    }
    
    public int listaUtentesDocIdentDuplicado(String idUtente,
                                        String tipoDocId, String numDoc) throws Exception {
        UtentesDocIdentificacaoDuplicadosImpl vo = this.getUtentesDocIdentificacaoDuplicados();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        try{
            vo.setidutente(idUtente);
            vo.setnumero(numDoc);
            vo.settipoId(tipoDocId);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter lista de utentes com o documento de identificacao duplicado", e);
          throw e;
        }
        return vo.getRowCount();
    }
    
    /* ---------- FIM DE ADIÇÃO ----------- */

    /**Container's getter for ListaNovosUtentes
     */
    public ListaNovosUtentesImpl getListaNovosUtentes() {
        return (ListaNovosUtentesImpl)findViewObject("ListaNovosUtentes");
    }

    public int listaUsersMaternidadeByIduInscrId(String iduInscrId) {
    
        try{
        
            ListaUsersMaternidadeImpl vo = getListaUsersMaternidade();
            vo.clearWhereState();
            vo.clearCache();
            vo.setIDU_INSCR_ID(Integer.parseInt(iduInscrId));
            vo.executeQuery();
            return vo.getRowCount();
        } 
        catch(Exception e){
          log.error("",e);
        }
    }
   
}
