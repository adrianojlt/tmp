package ora.pt.cons.igif.sics.baixas;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import ora.pt.cons.igif.sics.baixas.common.BaixasModule;

import oracle.jbo.DMLException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.sql.DATE;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BaixasModuleImpl extends ApplicationModuleImpl implements BaixasModule {

    private static Logger log = Logger.getLogger(BaixasModuleImpl.class);
    /*
    private static Number idTipoItemAlta = null;
    private static Number idTipoItemInicial = null;
    private static Number idTipoItemProrrogacao = null;
    private static Number idTipoItemManual = null;
    */

    /**This is the default constructor (do not remove)
     */
    public BaixasModuleImpl() {
        PropertyConfigurator.configure(System.getProperty("sics.property.log4j.fileConfiguration"));
        /*
        this.idTipoItemInicial = this.getIdTipoItemBaixa("I");
        this.idTipoItemProrrogacao = this.getIdTipoItemBaixa("P");
        this.idTipoItemAlta = this.getIdTipoItemBaixa("A");
        this.idTipoItemManual = this.getIdTipoItemBaixa("M");
        log.debug("id Inicial = " + idTipoItemInicial);
        log.debug("id Prorrogacao = " + idTipoItemProrrogacao);
        log.debug("id Alta = " + idTipoItemAlta);
        log.debug("id Manual = " + idTipoItemManual);
        */
        log.info("BaixasModuleImpl instanciado");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("ora.pt.cons.igif.sics.baixas", 
                     "BaixasModuleLocal"); /* (package name, Configuration Name) */
    }

    public ListaBaixasImpl getListaBaixas() {
        return (ListaBaixasImpl)findViewObject("ListaBaixas");
    }

    public ListaItemsBaixasImpl getListaItemsBaixas() {
        return (ListaItemsBaixasImpl)findViewObject("ListaItemsBaixas");
    }

    public BaixaViewImpl getBaixaView() {
        return (BaixaViewImpl)findViewObject("BaixaView");
    }

    public ItemBaixaViewImpl getItemBaixaView() {
        return (ItemBaixaViewImpl)findViewObject("ItemBaixaView");
    }

    public ListaOperacoesLogImpl getListaOperacoesLog() {
        return (ListaOperacoesLogImpl)findViewObject("ListaOperacoesLog");
    }

    public OperacoesLogViewImpl getOperacoesLogView() {
        return (OperacoesLogViewImpl)findViewObject("OperacoesLogView");
    }
    
    /*
    public Integer annulItemBaixaCascade(Number idItemBaixa, Number idBaixa) {

        ItemBaixaViewImpl itembaixaView = getItemBaixaView();
        ViewCriteria viewCriteriaBaixa = itembaixaView.createViewCriteria();
        ViewCriteriaRow vcRowBaixa = viewCriteriaBaixa.createViewCriteriaRow();
        vcRowBaixa.setAttribute("GitBaixasId", " = " + idBaixa.toString());
        viewCriteriaBaixa.addElement(vcRowBaixa);
        itembaixaView.applyViewCriteria(viewCriteriaBaixa);

        while (itembaixaView.hasNext()) {

            ItemBaixaViewRowImpl row = 
                (ItemBaixaViewRowImpl)itembaixaView.next();

            if (row.getId().getSequenceNumber().longValue() >= 
                idItemBaixa.longValue()) {
                row.setAnulado("S");
                java.util.Date dataActualDate = 
                    new java.sql.Date(System.currentTimeMillis());
                try {
                    row.setDataAnulado(new Date(dataActualDate));
                } catch (SQLException e) {
                    log.error(e);
                    return -100;
                }
            }

        }
        itembaixaView.clearViewCriterias();
        itembaixaView.clearCache();

        //COMMIT
        this.getDBTransaction().commit();
        return 0; //Success
    }
    */

    public Integer annulItemBaixa(Number idItemBaixa, 
                                  Number scgMotivoAnulacaoId, 
                                  String comentarioAnulacao, 
                                  Number sysEntidadesId, 
                                  Number proProfissidPessoalId) throws Exception {
        try {
            ItemBaixaViewImpl itembaixaView = getItemBaixaView();
            itembaixaView.clearWhereState();
            itembaixaView.clearCache();
            Key newKey = new Key(new Object[] { idItemBaixa });
            Row[] linhas = itembaixaView.findByKey(newKey, 1);

            if (linhas.length != 1) {
                return -100; // ERRO: devolveu mais do que um registo, ou não devolveu registos
            }

            ItemBaixaViewRowImpl rowItemBaixaToUpdate = 
                (ItemBaixaViewRowImpl)linhas[0];
            rowItemBaixaToUpdate.setAnulado("S");
            rowItemBaixaToUpdate.setComentarioAnulacao(comentarioAnulacao);
            rowItemBaixaToUpdate.setScgMotivoAnulacaoId(scgMotivoAnulacaoId);
            rowItemBaixaToUpdate.setProProfissidPesAnulacaoId(proProfissidPessoalId);
            rowItemBaixaToUpdate.setSysEntidadesAnulucaoId(sysEntidadesId);
            java.util.Date dataActualDate = 
                new java.sql.Date(System.currentTimeMillis());
            try {
                rowItemBaixaToUpdate.setDataAnulado(new Date(dataActualDate));
            } catch (SQLException e) {
                this.getDBTransaction().rollback();
                log.error("",e);
                return -100;
            }
            
            Number scgCodigoManualNumber;
            try {
                scgCodigoManualNumber = new Number(getIdTipoItemBaixa("M"));
            } catch (Exception e) {
              this.getDBTransaction().rollback();
              log.error("",e);
              return -53;
            }

            //Check if the next item is a Manual item
            // If so, we need to delete it to
            CallableStatement idItemBaixaStatement = 
                this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_NEXT_ITEM_BAIXA(?)}", 
                                                                1);
            String idItemBaixaNext;
            Number idItemBaixaNextNumber;
            try {
                idItemBaixaStatement.setString(2, idItemBaixa.toString());
                idItemBaixaStatement.registerOutParameter(1, Types.NUMERIC);
                idItemBaixaStatement.execute();
                idItemBaixaNext = idItemBaixaStatement.getString(1);

                idItemBaixaNextNumber = new Number(idItemBaixaNext);
                //newRowItemBaixaManual.setScgTiporegistoId(idItemBaixaNextNumber);
            } catch (SQLException e) {
                this.getDBTransaction().rollback();
                log.error("",e);
                return -53;
            } finally{
                if (idItemBaixaStatement!=null)  {
                    try  {
                        idItemBaixaStatement.close();
                    } catch (Exception ex)  {} 
                }
            }
            
            //SP: primeiro commit quando anula o item principal e verifica a existência de outro item.
            try {
                this.getDBTransaction().commit();
            } catch (Exception e) {
                this.getDBTransaction().rollback();
                log.error("Erro na anulação do item",e);
                return -100;
            }

            newKey = new Key(new Object[] { idItemBaixaNextNumber });
            itembaixaView.clearWhereState();
            itembaixaView.clearCache();
            linhas = 
                    itembaixaView.findByKey(newKey, 1); //We only whant THE ONLY key. Primary Key

            if (linhas.length != 1) {
                return -100; // ERRO: devolveu mais do que um registo
            }
            ItemBaixaViewRowImpl rowItemBaixaNextToUpdate = 
                (ItemBaixaViewRowImpl)linhas[0];
            if (rowItemBaixaNextToUpdate.getScgTiporegistoId().toString().compareTo(scgCodigoManualNumber.toString()) == 
                0) { //Is a Manual Item
                rowItemBaixaNextToUpdate.setAnulado("S");
                dataActualDate = new java.sql.Date(System.currentTimeMillis());
                try {
                    rowItemBaixaNextToUpdate.setDataAnulado(new Date(dataActualDate));
                } catch (SQLException e) {
                    this.getDBTransaction().rollback();
                    log.error("",e);
                    return -100;
                }
                rowItemBaixaNextToUpdate.setComentarioAnulacao(comentarioAnulacao);
                rowItemBaixaNextToUpdate.setScgMotivoAnulacaoId(scgMotivoAnulacaoId);
                rowItemBaixaNextToUpdate.setProProfissidPesAnulacaoId(proProfissidPessoalId);
                rowItemBaixaNextToUpdate.setSysEntidadesAnulucaoId(sysEntidadesId);
                
                //COMMIT -- SP: alterado de forma a apena s fazer commit se ffor um item manual
                try {
                    this.getDBTransaction().commit();
                } catch (Exception e) {
                    this.getDBTransaction().rollback();
                    log.error("Erro na anulação do item manual associado",e);
                    return -100;
                }
            }

            //SP: Evitar que fiquem transacções  pendentes
            this.getDBTransaction().rollback();          

        } catch (Exception ex) {
            log.error("", ex);
            throw ex;
        } finally {
        }
        return 0;
    }

    public Integer insertNewAlta(Number gitBaixasId, Number scgTipoAltaId, 
                                 Date dataAlta, Date dataInicioPeridoBaixa, 
                                 Date dataTermoLastItem, Number sysEntidadesId, 
                                 Number proProfissidPessoalId, 
                                 Number idClassDoenca, Number numEpisodio, 
                                 Number scgModuloId) {
        ItemBaixaViewImpl itembaixaView = null;
        int vError = 0;
        try {

            /*
              * Businness Rules
              *
              */

            // Data Inicio must not be null 
            if (dataAlta == null) {
                return -1;
            }

            // Data Alta cannot be inferior than when started the Baixa
            if (dataAlta.compareTo(dataInicioPeridoBaixa) == -1) {
                return -2;
            }

            //Data Inicio must be at most one day more than the last Item baixa.
            java.util.Date dataAltaDate = dataAlta.dateValue();
            java.util.Date dataTermoLastItemDate = 
                dataTermoLastItem.dateValue();
            long dataDiff = 
                dataAltaDate.getTime() - dataTermoLastItemDate.getTime();
            long numberDays = Math.round(dataDiff / (24.0 * 60 * 60 * 1000));
            if (numberDays > 1) {
                return -6;
            }

            /*
              * End Businees Rules
              */


            itembaixaView = getItemBaixaView();
            itembaixaView.setWhereClause(null);
            itembaixaView.clearCache();

            /* Annul items superioeres a data de alta a estar a ser inserida */
            //Gets the collumns to be updated
            itembaixaView.addWhereClause("ItemBaixa.GIT_BAIXAS_ID = " + 
                                         gitBaixasId);
            itembaixaView.addWhereClause("AND ItemBaixa.ANULADO <> 'S'");
            itembaixaView.addWhereClause("AND ItemBAixa.DATA_INICIO >= to_date('" + 
                                         dataAlta + "','yyyy-mm-dd')");
            itembaixaView.setOrderByClause("ItemBaixa.data_inicio asc"); //order is important for the updates of the dates
            itembaixaView.executeQuery();

            ItemBaixaViewRowImpl itemBaixaRow;

            Date sysdate;
            java.util.Date dataActualDate = 
                new java.util.Date(System.currentTimeMillis());
            try {
                sysdate = new Date(dataActualDate);
            } catch (SQLException e) {
                log.error("",e);
                sysdate = null;
            }

            //Puts the row iterator on the first position
            itembaixaView.first();
            int itemBaixaViewQueryRowCount = itembaixaView.getRowCount();

            for (int i = 0; i < itemBaixaViewQueryRowCount; i++) {
                itemBaixaRow = 
                        (ItemBaixaViewRowImpl)itembaixaView.getCurrentRow();
                itemBaixaRow.setAnulado("S");
                itemBaixaRow.setDataAnulado(sysdate);
                itembaixaView.next();
            }

            // Create new Row to be inserted in the table ItemsBaixas
            ItemBaixaViewRowImpl newRowItemBaixa = 
                (ItemBaixaViewRowImpl)itembaixaView.createRow();

            //Items Baixa Attributes
            newRowItemBaixa.setGitBaixasId(gitBaixasId);
            newRowItemBaixa.setScgTipoaltaId(scgTipoAltaId);
            newRowItemBaixa.setDataInicio(dataAlta);
            newRowItemBaixa.setDataTermo(dataAlta);
            newRowItemBaixa.setSysEntidadesId(sysEntidadesId);
            newRowItemBaixa.setProProfissidPessoalId(proProfissidPessoalId);
            newRowItemBaixa.setScgClassifdoencaId(idClassDoenca);
            newRowItemBaixa.setNumEpisodio(numEpisodio);
            newRowItemBaixa.setScgCodModuloId(scgModuloId != null ? 
                                              scgModuloId : null);

            try {
                newRowItemBaixa.setScgTiporegistoId(getIdTipoItemBaixa("A"));
            } catch (Exception e) {
                newRowItemBaixa.remove();
                log.error("",e);
                vError = -50;
                throw e;
            }

            //COMMIT
            try {
                this.getDBTransaction().commit();
            } catch (Exception e) {
                log.error("",e);
                itembaixaView.setWhereClause(null);
                itembaixaView.clearCache();
                this.getDBTransaction().rollback();
                vError = -100;
                throw e;
            }

            itembaixaView.setWhereClause(null);
            itembaixaView.clearCache();

            return vError; //Success

        } catch (Exception e) {
            log.error("",e);
            if (itembaixaView != null) {
                itembaixaView.setWhereClause(null);
                itembaixaView.clearCache();
            }
            this.getDBTransaction().rollback();
            if (vError == 0) {
                vError = 1000;
            }
            return vError;
        }
    }


    public Integer insertNewProgor(Number idGitBaixa, 
                                   Number iduHistEntUtId, 
                                   Number iduIdentUtIdDupId, 
                                   Number iduIdentUtId, 
                                   Number sysEntidadesId, 
                                   Number proProfissidPessoalId, 
                                   Date dataInicio, 
                                   Date dataTermo, 
                                   Date dataInicioLastBoletim, 
                                   Date dataTermoLastItem, 
                                   Number scgClassifDoencaID, 
                                   String incapacitado, 
                                   String cuidadosInadiaveis, 
                                   String internamento, 
                                   String cirurgiaAmbulatorio, 
                                   String autorizSaida, 
                                   String justificacaoSaida, 
                                   String baixaManual, 
                                   Number numEpisodio, 
                                   Number scgModuloId) {

        PreparedStatement baixaCodIStatement = null;
        Number scgTipoItemBaixaId = null;
        String SCGcodigo = "P";
        String STCcodTipo = "GTRG";
        baixaCodIStatement = 
                this.getDBTransaction().createPreparedStatement("SELECT SCG.ID AS ID" + 
                                                                "  FROM SYS_COD_GENERICOS SCG " + 
                                                                " WHERE SCG.CODIGO = '" + 
                                                                SCGcodigo + 
                                                                "' " + 
                                                                "   AND SCG.SYS_TIPOS_CODIGOS_ID = ( SELECT STC.ID FROM SYS_TIPOS_CODIGOS STC WHERE STC.COD_TIPO = '" + 
                                                                STCcodTipo + 
                                                                "')", 1);
        try {
            ResultSet resultSet = baixaCodIStatement.executeQuery();
            resultSet.next();
            scgTipoItemBaixaId = new Number(resultSet.getInt(1));
            resultSet.close();
        } catch (SQLException e) {
            log.error("",e);
            return -50;
        }

        int resultadoRegras = 
            commonBaixasRules(dataInicio, dataTermo, scgTipoItemBaixaId, 
                              scgClassifDoencaID, null, null, null, null, null, 
                              null, null, incapacitado, cuidadosInadiaveis, 
                              internamento, cirurgiaAmbulatorio, autorizSaida, 
                              justificacaoSaida, "ERES", 
                              iduIdentUtId.toString(), null, sysEntidadesId);
        if (resultadoRegras != 0) {
            return resultadoRegras;
        }


        //Data Inicio must be one day more than the last Item baixa.
        java.util.Date dataTermoDate = dataTermo.dateValue();
        java.util.Date dataInicioDate = dataInicio.dateValue();
        long dataDiff = dataTermoDate.getTime() - dataInicioDate.getTime();
        long numberDays = Math.round(dataDiff / (24.0 * 60 * 60 * 1000) + 1);
        if (baixaManual.compareToIgnoreCase("S") != 0) {
            java.util.Date dataTermoLastItemDate = 
                dataTermoLastItem.dateValue();
            dataDiff = 
                    dataInicioDate.getTime() - dataTermoLastItemDate.getTime();
            numberDays = Math.round(dataDiff / (24.0 * 60 * 60 * 1000));
            if (numberDays != 1) {
                return -5;
            }
        }

        /*
        //Validate if data Inicio is not between the dates of the last boletim dates
        if(dataInicioLastBoletim != null && dataTermoLastItem != null) {  //It's not the first Baixa for this Utente
             if ((dataInicio.compareTo(dataInicioLastBoletim) == 1 || dataInicio.compareTo(dataInicioLastBoletim) == 0) && (dataInicio.compareTo(dataTermoLastItem) == 0 ||dataInicio.compareTo(dataTermoLastItem) == -1)) { //If is between
                return -10;
             }
        }


        //Verifica se está seleccionada a check incapacitado ou cuidados inadiaveis
        PreparedStatement baixaCodIStatement1 =  this.getDBTransaction().createPreparedStatement(
        "SELECT codigo " +
        "FROM sys_cod_genericos " +
        "where id ="+scgClassifDoencaID, 1);

        String codigo = null;
        try {
            ResultSet resultSet1 = baixaCodIStatement1.executeQuery();
            resultSet1.next();
            codigo = resultSet1.getString(1);
        } catch (SQLException e) {
            log.error(e);
            return -50;
        }

        if(codigo.equals("DN") || codigo.equals("T") || codigo.equals("DP") || codigo.equals("AT") || codigo.equals("DD")){
            if(incapacitado.equals("N") && cuidadosInadiaveis.equals("N")){
                return -11;
            }
        }

        /*
         * End Businees Rules
         */


        ItemBaixaViewImpl itembaixaView = getItemBaixaView();
        // Create new Row to be inserted in the table ItemsBaixas
        ItemBaixaViewRowImpl newRowItemBaixa = 
            (ItemBaixaViewRowImpl)itembaixaView.createRow();

        // Gets Id from the Baixa Initial code. Inicial Baixa
        baixaCodIStatement = 
                this.getDBTransaction().createPreparedStatement("SELECT SCG.ID AS ID" + 
                                                                "  FROM SYS_COD_GENERICOS SCG " + 
                                                                " WHERE SCG.CODIGO = 'P' " + 
                                                                "   AND SCG.SYS_TIPOS_CODIGOS_ID = ( SELECT STC.ID FROM SYS_TIPOS_CODIGOS STC WHERE STC.COD_TIPO = 'GTRG')", 
                                                                1);

        Integer scgTipoBaixaId = null;
        try {
            ResultSet resultSet = baixaCodIStatement.executeQuery();
            resultSet.next();
            scgTipoBaixaId = resultSet.getInt(1);
            newRowItemBaixa.setScgTiporegistoId(new Number(scgTipoBaixaId));
        } catch (SQLException e) {
            newRowItemBaixa.remove();
            log.error("",e);
            return -50;
        }

        //Foreign Key to Git_Baixas
        newRowItemBaixa.setGitBaixasId(idGitBaixa);

        //Inserts into Item Baixas
        newRowItemBaixa.setSysEntidadesId(sysEntidadesId);
        newRowItemBaixa.setProProfissidPessoalId(proProfissidPessoalId);
        newRowItemBaixa.setDataInicio(dataInicio);
        newRowItemBaixa.setDataTermo(dataTermo);
        newRowItemBaixa.setScgClassifdoencaId(scgClassifDoencaID);
        newRowItemBaixa.setIncapacitado(incapacitado);
        newRowItemBaixa.setCuidadosInadiaveis(cuidadosInadiaveis);
        newRowItemBaixa.setInternamento(internamento);
        newRowItemBaixa.setCirurgiaAmbulatorio(cirurgiaAmbulatorio);
        newRowItemBaixa.setAutorizSaida(autorizSaida);
        newRowItemBaixa.setJustificacaoSaida(justificacaoSaida);
        newRowItemBaixa.setNumEpisodio(numEpisodio);
        newRowItemBaixa.setScgCodModuloId(scgModuloId != null ? scgModuloId : 
                                          null);

        //Insert Item Baixa Row
        itembaixaView.insertRow(newRowItemBaixa);

        //If Manual Baixa, then we have to create a new Item Baixa
        ItemBaixaViewRowImpl newRowItemBaixaManual = null;

        if (baixaManual.compareToIgnoreCase("S") == 0) {
            newRowItemBaixaManual = 
                    (ItemBaixaViewRowImpl)itembaixaView.createRow();

            newRowItemBaixaManual.setGitBaixasId(idGitBaixa);
            newRowItemBaixaManual.setSysEntidadesId(sysEntidadesId);
            newRowItemBaixaManual.setProProfissidPessoalId(proProfissidPessoalId);

            //Day of Manual Item is only the day before the item Progorragação
            DATE dataTermoManualTemp = dataInicio.addJulianDays(-1, 0);
            dataInicio.addJulianDays(1, 0);
            Date dataTermoManual = new Date(dataTermoManualTemp);
            newRowItemBaixaManual.setDataTermo(dataTermoManual);

            //Day of Manual Item is only the day after of the last Item
            DATE dataInicioManualTemp = dataTermoLastItem.addJulianDays(1, 0);
            dataTermoLastItem.addJulianDays(-1, 0);
            Date dataInicioManual = new Date(dataInicioManualTemp);
            newRowItemBaixaManual.setDataInicio(dataInicioManual);

            //Gets Item Baixa Code
            CallableStatement codigoItemBaixaStatement = 
                this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_SCG_CODIGO_BAIXA('M')}", 
                                                                1);
            String scgCodigoManual = null;
            try {
                codigoItemBaixaStatement.registerOutParameter(1, 
                                                              Types.NUMERIC);
                codigoItemBaixaStatement.execute();
                scgCodigoManual = codigoItemBaixaStatement.getString(1);

                Number scgCodigoManualNumber = new Number(scgCodigoManual);
                newRowItemBaixaManual.setScgTiporegistoId(scgCodigoManualNumber);
            } catch (SQLException e) {
                log.error("",e);
                return -53;
            }

            //inserts Row            
            itembaixaView.insertRow(newRowItemBaixaManual);
        }

        //COMMIT
        try {
            this.getDBTransaction().commit();
        } catch (Exception e) {
            log.error("",e);
            this.getDBTransaction().rollback();
            return -100;
        }

        //Success
        return 0;
    }


    public Integer insertNewBaixa(String novaBaixa,
                                  Number iduHistEntUtId, 
                                  String entidadePublica, 
                                  Number iduIdentUtIdDupId, 
                                  Number iduIdentUtId, 
                                  Number nissUtente, 
                                  String numBeneficiario, 
                                  Boolean selectedAssistenciaFamilia, 
                                  String nomeFamiliar, 
                                  Date dtaFamiliar, 
                                  Number nissFamiliar, 
                                  Number nissFamiliarImpedido, 
                                  Number idFamiliar, 
                                  Number scgParentescoId, 
                                  String outroParentesco, 
                                  Boolean selectedOutroParentesco, 
                                  Number sysEntidadesId, 
                                  Number proProfissidPessoalId, 
                                  Date dataInicio, 
                                  Date dataTermo, 
                                  Date dataInicioLastBoletim, 
                                  Date dataTermoLastBoletim, 
                                  Number scgClassifDoencaID, 
                                  String incapacitado, 
                                  String cuidadosInadiaveis, 
                                  String internamento, 
                                  String cirurgiaAmbulatorio, 
                                  String autorizSaida, 
                                  String justificacaoSaida, 
                                  Number idBaixaAltaAberta, 
                                  String baixaManual, 
                                  Number numEpisodio, 
                                  Number scgModuloId) throws Exception {

        PreparedStatement baixaCodIStatement = null;

        Integer scgTipoAltaId = null;
        Number scgTipoItemBaixaId = null;
        // Gets Id from the TipoAlta. Necessary if it's a new Baixa. Bussiness Rule
        if (novaBaixa.compareTo("novaBaixa") == 0) {

            //Caso a checkbox de baixa manual esteja check, aplicam-se as regras de prorrogação
            String SCGcodigo = "I";
            String STCcodTipo = "GTIA";
            if (baixaManual.equals("S")) {
                SCGcodigo = "P";
                STCcodTipo = "GTRG";
            }

            // get
            baixaCodIStatement = 
                    this.getDBTransaction().createPreparedStatement("SELECT SCG.ID AS ID" + 
                                                                    "  FROM SYS_COD_GENERICOS SCG " + 
                                                                    " WHERE SCG.CODIGO = '" + 
                                                                    SCGcodigo + 
                                                                    "' " + 
                                                                    "   AND SCG.SYS_TIPOS_CODIGOS_ID = ( SELECT STC.ID FROM SYS_TIPOS_CODIGOS STC WHERE STC.COD_TIPO = '" + 
                                                                    STCcodTipo + 
                                                                    "')", 1);

            try {
                ResultSet resultSet = baixaCodIStatement.executeQuery();
                resultSet.next();
                scgTipoAltaId = resultSet.getInt(1);
                scgTipoItemBaixaId = new Number(scgTipoAltaId);
                resultSet.close();
            } catch (SQLException e) {
                log.error("",e);
                return -50;
            }
        }

        /*
         * Businness Rules
         */
        int resultadoRegras = 
            commonBaixasRules(dataInicio, 
                              dataTermo, 
                              scgTipoItemBaixaId, 
                              scgClassifDoencaID, 
                              nomeFamiliar, 
                              dtaFamiliar, 
                              idFamiliar, 
                              scgParentescoId, 
                              outroParentesco, 
                              nissFamiliar, 
                              nissFamiliarImpedido, 
                              incapacitado, 
                              cuidadosInadiaveis, 
                              internamento, 
                              cirurgiaAmbulatorio, 
                              autorizSaida, 
                              justificacaoSaida, 
                              entidadePublica, 
                              iduIdentUtId.toString(), 
                              null, 
                              sysEntidadesId);
        if (resultadoRegras != 0) {
            return resultadoRegras;
        }


        // For a inicial Baixa, the number of days must be at most 12 or 30 if it is public utente
        // For a prorrogação, the number if days must be at most 30
        java.util.Date dataTermoDate = dataTermo.dateValue();
        java.util.Date dataInicioDate = dataInicio.dateValue();

        long dataDiff = dataTermoDate.getTime() - dataInicioDate.getTime();
        long numberDays = Math.round(dataDiff / (24 * 60 * 60 * 1000) + 1);
        //If the manual baixa check is on, so this is actualy a progorraçao
        if (novaBaixa.compareTo("novaBaixa") == 0 && 
            baixaManual.compareToIgnoreCase("N") == 0) {
            if (entidadePublica.compareTo("EPUB") == 0) {
                if (numberDays > 30) {
                    return -11;
                }
            }
        }
        

        
        //Sónia Pereira: nas baixas por SS o niss do uetente não pode ser igual ao do familiar
         if (entidadePublica.compareTo("ERES") == 0) {
            if (nissFamiliar!=null&&nissFamiliar.equals(nissUtente)){
                return -47;
            }
         }

        // For inicial Baixa the dataInicio must not be bigger than 1 day from the actual day
        // and must not be smaller than 10 days from the actual day
        /*
        if (novaBaixa.compareTo("novaBaixa") == 0) {


            java.util.Date dataActualDate = new java.util.Date(System.currentTimeMillis());

            if (dataInicioDate.after(dataActualDate)) { // must not be greater than 1 day
                dataDiff = dataInicioDate.getTime() - dataActualDate.getTime();
                numberDays = Math.round(dataDiff / (24 * 60 * 60 * 1000) + 1);
                if (numberDays > 1) {
                    return -5;
                }



            } else {    //must not be smaller than 10 days
                dataDiff = dataActualDate.getTime() -  dataInicioDate.getTime();
                numberDays = Math.round(dataDiff / (24 * 60 * 60 * 1000) + 1);
                if (numberDays > 10){
                    return -6;
                }
            }
        }
        */

        // -- @autor -- Rui Moura: validar se dtInicio superior que dtFim
        if (dataInicio.dateValue().after(dataTermo.dateValue())) {
            return -9;
        }

        //Validate if data Inicio is not between the dates of the last boletim dates
        if (dataInicioLastBoletim != null && 
            dataTermoLastBoletim != null) { //It's not the first Baixa for this Utente
            //Uma baixa pode ser subreposta à data de Alta de uma baixa anterior. Por isso retiramos um dia a data.
            //retirar um dia segnifica nao comparar se o dia é igual no limite. Ver parte comentada
            if /*dataInicio.compareTo(dataTermoLastBoletim) == 0 ||*/((dataInicio.compareTo(dataInicioLastBoletim) == 
                                                                       1 || 
                                                                       dataInicio.compareTo(dataInicioLastBoletim) == 
                                                                       0) && 
                                                                      (dataInicio.compareTo(dataTermoLastBoletim) == 
                                                                       -1)) { //If is between 
                return -10;
            }
        }

        /* Just to ensure if numBeneficiario is not null then nissUtente must be null*/
        if (entidadePublica.equals("EPUB")) {
            nissUtente = null;
        } else {
            iduHistEntUtId = null;
            numBeneficiario = null;
        }

        /* If OutroParentesco is selected then, Outro Parentesco must be given*/
        if (selectedOutroParentesco != null && selectedOutroParentesco && 
            (outroParentesco == null || outroParentesco.length() == 0)) {
            return -12;
        }

        /*
         * End Businees Rules
         */

        BaixaViewImpl baixaView = getBaixaView();
        ItemBaixaViewImpl itembaixaView = getItemBaixaView();

        // Create new Row to be inserted in the table Baixas
        BaixaViewRowImpl newRowBaixa = (BaixaViewRowImpl)baixaView.createRow();
        // Create new Row to be inserted in the table ItemsBaixas
        ItemBaixaViewRowImpl newRowItemBaixa = 
            (ItemBaixaViewRowImpl)itembaixaView.createRow();

        //Inserts into Baixa
        newRowBaixa.setIduHistEntUtId(iduHistEntUtId);
        newRowBaixa.setIduIdentUtId(iduIdentUtId);
        newRowBaixa.setIduIdentUtDupId(iduIdentUtIdDupId);
        newRowBaixa.setNiss(nissUtente);
        newRowBaixa.setNumBenef(numBeneficiario);
        newRowBaixa.setIduIdentUtIdFamiliar(idFamiliar);
        newRowBaixa.setNomeFamiliar(nomeFamiliar);
        newRowBaixa.setDtaNascFamiliar(dtaFamiliar);
        newRowBaixa.setNissFamiliar(nissFamiliar);
        newRowBaixa.setNissProgenitorImp(nissFamiliarImpedido);
        newRowBaixa.setScgParentescoId(scgParentescoId);

        if (selectedOutroParentesco != null && selectedOutroParentesco) {
            newRowBaixa.setParentescoOutro(outroParentesco);
        } else {
            newRowBaixa.setParentescoOutro(null);
        }

        //Inserts Baixa Row
        baixaView.insertRow(newRowBaixa);

        String itemBaixaCode = null;
        //See if it is a Nova Baixa or Prorrogação
        if (novaBaixa.compareTo("novaBaixa") != 0 || 
            baixaManual.compareToIgnoreCase("S") == 0) { //it's equal
            itemBaixaCode = new String("P");
        } else {
            itemBaixaCode = new String("I");
        }

        // Gets Id from the Baixa Initial code or Progorrocagao. Inicial Baixa
        baixaCodIStatement = 
                this.getDBTransaction().createPreparedStatement("SELECT SCG.ID AS ID" + 
                                                                "  FROM SYS_COD_GENERICOS SCG " + 
                                                                " WHERE SCG.CODIGO = '" + 
                                                                itemBaixaCode + 
                                                                "' " + 
                                                                "   AND SCG.SYS_TIPOS_CODIGOS_ID = ( SELECT STC.ID FROM SYS_TIPOS_CODIGOS STC WHERE STC.COD_TIPO = 'GTRG')", 
                                                                1);

        // Gets Id from the Baixa Initial code or Progorrocagao. Inicial Baixa
        Integer scgTipoBaixaId = null;
        try {
            ResultSet resultSet = baixaCodIStatement.executeQuery();
            resultSet.next();
            scgTipoBaixaId = resultSet.getInt(1);
            newRowItemBaixa.setScgTiporegistoId(new Number(scgTipoBaixaId));
            resultSet.close();
        } catch (SQLException e) {
            newRowBaixa.remove();
            newRowItemBaixa.remove();
            log.error("",e);
            return -50;
        }

        Number idBaixa;
        //Sets the foreign key to git_baixas
        //(See the doDML overrided method on entity object
        try {
            idBaixa = new Number(newRowBaixa.getId().toString());
            newRowItemBaixa.setGitBaixasId(idBaixa);
        } catch (SQLException e) {
            newRowBaixa.remove();
            newRowItemBaixa.remove();
            log.error("",e);
            return -51;
        }

        newRowItemBaixa.setScgTipoaltaId(scgTipoItemBaixaId);
        //Inserts into Item Baixas
        newRowItemBaixa.setSysEntidadesId(sysEntidadesId);
        newRowItemBaixa.setProProfissidPessoalId(proProfissidPessoalId);
        newRowItemBaixa.setDataInicio(dataInicio);
        newRowItemBaixa.setDataTermo(dataTermo);
        newRowItemBaixa.setScgClassifdoencaId(scgClassifDoencaID);
        newRowItemBaixa.setIncapacitado(incapacitado);
        newRowItemBaixa.setCuidadosInadiaveis(cuidadosInadiaveis);
        newRowItemBaixa.setInternamento(internamento);
        newRowItemBaixa.setCirurgiaAmbulatorio(cirurgiaAmbulatorio);
        newRowItemBaixa.setAutorizSaida(autorizSaida);
        newRowItemBaixa.setJustificacaoSaida(justificacaoSaida);
        newRowItemBaixa.setNumEpisodio(numEpisodio);
        newRowItemBaixa.setScgCodModuloId(scgModuloId != null ? scgModuloId : 
                                          null);

        //Insert Item Baixa Row
        // itembaixaView.insertRow(newRowItemBaixa);

        //If Manual Baixa, then we have to create a new Item Baixa
        ItemBaixaViewRowImpl newRowItemBaixaManual = null;

        if (baixaManual.compareToIgnoreCase("S") == 0) {
            newRowItemBaixaManual = 
                    (ItemBaixaViewRowImpl)itembaixaView.createRow();
            newRowItemBaixaManual.setGitBaixasId(idBaixa);
            newRowItemBaixaManual.setSysEntidadesId(sysEntidadesId);
            newRowItemBaixaManual.setProProfissidPessoalId(proProfissidPessoalId);

            //Day of Manual Item is only the day before the item Progorragação
            DATE dataInicioManualTemp = dataInicio.addJulianDays(-1, 0);
            dataInicio.addJulianDays(1, 0);
            Date dataInicioManual = new Date(dataInicioManualTemp);
            newRowItemBaixaManual.setDataInicio(dataInicioManual);
            newRowItemBaixaManual.setDataTermo(dataInicioManual);

            //Gets Item Baixa Code
            CallableStatement codigoItemBaixaStatement = 
                this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_SCG_CODIGO_BAIXA('M')}", 
                                                                1);
            String scgCodigoManual = null;
            try {
                codigoItemBaixaStatement.registerOutParameter(1, 
                                                              Types.NUMERIC);
                codigoItemBaixaStatement.execute();
                scgCodigoManual = codigoItemBaixaStatement.getString(1);

                Number scgCodigoManualNumber = new Number(scgCodigoManual);
                newRowItemBaixaManual.setScgTiporegistoId(scgCodigoManualNumber);

                codigoItemBaixaStatement.close();
            } catch (SQLException e) {
                log.error("",e);
                return -53;
            }

            //inserts Row            
            itembaixaView.insertRow(newRowItemBaixaManual);
        }

        //Try to maintain this as close as possible to commit, to release the lock
        //on row (GIT_BAIXAS,NUM_BOLETIM) on sys_sequencias to get the num_boletim
        CallableStatement numBoletimStatement = 
            this.getDBTransaction().createCallableStatement("{? = call git.get_num_boletim}", 
                                                            1);
        String numBoletim = null;
        try {
            //Executes the query, and retrieve the num_boletim
            numBoletimStatement.registerOutParameter(1, Types.NUMERIC);
            numBoletimStatement.execute();
            numBoletim = numBoletimStatement.getString(1);

            Number numBoletimNumber = new Number(numBoletim);
            if (numBoletimNumber.intValue() < 0) {
                //TODO: log errors on a table
                newRowBaixa.remove();
                newRowItemBaixa.remove();
                this.getDBTransaction().rollback();
                return -52;
            }
            newRowBaixa.setNumBoletim(numBoletimNumber);
        } catch (SQLException e) {
            //TODO: log errors on a table
            newRowBaixa.remove();
            newRowItemBaixa.remove();
            this.getDBTransaction().rollback();
            log.error("",e);
            return -53;
        }
        
        itembaixaView.insertRow(newRowItemBaixa);
        //itembaixaView.insertRow(duplicate(newRowItemBaixa));

        try {
            this.getDBTransaction().postChanges();
            this.getDBTransaction().commit();
        } catch (Exception e) {
            log.error("",e);
            this.getDBTransaction().rollback();
            if(e instanceof DMLException){
                DMLException dmlE = (DMLException)e;
                Object[] detalhes = dmlE.getDetails();
                for ( int i = 0 ; i < detalhes.length ; i++)  {
                    if(detalhes[i] instanceof java.sql.SQLException){
                        SQLException sqlE = (SQLException)detalhes[i];
                        int codigo = sqlE.getErrorCode();
                        if(codigo == 20000 || codigo == 20001){
                            return -codigo;
                        }
                    }
                }
                return -100;
            } else {
                return -100;
            }
        }
        return 0;
    }
    
    private ItemBaixaViewRowImpl duplicate(ItemBaixaViewRowImpl d) throws Exception {
        ItemBaixaViewRowImpl r = null;
        try  {
            ItemBaixaViewImpl itembaixaView = getItemBaixaView();
            r = (ItemBaixaViewRowImpl)itembaixaView.createRow();
            r.setAnulado("N");
            r.setAutorizSaida(d.getAutorizSaida());
            r.setCirurgiaAmbulatorio(d.getCirurgiaAmbulatorio());
            r.setComentarioAnulacao(d.getComentarioAnulacao());
            r.setCreatedBy(d.getCreatedBy());
            r.setCreationDate(d.getCreationDate());
            r.setCuidadosInadiaveis(d.getCuidadosInadiaveis());
            r.setDataAnulado(d.getDataAnulado());
            r.setDataInicio(d.getDataInicio());
            r.setDataTermo(d.getDataTermo());
            r.setGitBaixasId(d.getGitBaixasId());
            r.setIncapacitado(d.getIncapacitado());
            r.setInternamento(d.getInternamento());
            r.setJustificacaoSaida(d.getJustificacaoSaida());
            r.setLastUpdateDate(d.getLastUpdateDate());
            r.setLastUpdatedBy(d.getLastUpdatedBy());
            r.setProProfissidPessoalId(d.getProProfissidPessoalId());
            r.setScgClassifdoencaId(d.getScgClassifdoencaId());
            r.setScgTiporegistoId(d.getScgTiporegistoId());
            r.setSysEntidadesId(d.getSysEntidadesId());
        } catch (Exception ex)  {
          log.debug("",ex);
          throw ex;
        } 
        return r;
    }
    
    private Number getIdTipoRegistoItemBaixa(String tipoRegisto) {
        PreparedStatement baixaCodIStatement = null;
        ResultSet resultSet = null;
        Number idTipoItemBaixa = new Number(-50);
        try {
            baixaCodIStatement = 
                    this.getDBTransaction().createPreparedStatement("SELECT SCG.ID AS ID" + 
                                                                    "  FROM SYS_COD_GENERICOS SCG " + 
                                                                    " WHERE SCG.CODIGO = '" + 
                                                                    tipoRegisto + 
                                                                    "'" + 
                                                                    "   AND SCG.SYS_TIPOS_CODIGOS_ID = ( SELECT STC.ID FROM SYS_TIPOS_CODIGOS STC WHERE STC.COD_TIPO = 'GTRG')", 
                                                                    1);
            resultSet = baixaCodIStatement.executeQuery();
            if (resultSet.next()) {
                idTipoItemBaixa = new Number(resultSet.getInt(1));
            }
        } catch (Exception ex) {
            log.error("", ex);
            return new Number(-50);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
            } catch (Exception ex) {
            }
            try {
                if (baixaCodIStatement != null) {
                    baixaCodIStatement.close();
                }
            } catch (Exception ex) {
            }
        }
        return idTipoItemBaixa;
    }

    public Integer updateItemBaixa(Number idItemBaixa, // ("Nova Baixa"/"no")
                                   Number idBaixa, Boolean selectedAssistenciaFamilia, 
                                   String nomeFamiliar, Date dtaFamiliar, Number nissFamiliar, 
                                   Number nissFamiliarImpedido, Number idFamiliar, Number scgParentescoId, 
                                   String outroParentesco, Boolean selectedOutroParentesco, 
                                   Number sysEntidadesId, Number proProfissidPessoalId, Date dataInicio, 
                                   Date oldDataInicio, Date dataTermo, Date oldDataTermo, 
                                   Number scgClassifDoencaID, String incapacitado, 
                                   String cuidadosInadiaveis, String internamento, 
                                   String cirurgiaAmbulatorio, String autorizSaida, 
                                   String justificacaoSaida, String tipoRegisto, /* I / P / A*/
                                   String entidadePublica, String baixaManual, Number numEpisodio, 
                                   Number scgModuloId, boolean admin) throws Exception {

        try {
            Number scgTipoItemBaixaId = getIdTipoRegistoItemBaixa(tipoRegisto);
            if (scgTipoItemBaixaId.longValue() < 0) {
                return -50;
            } else {
                BaixaViewImpl baixasView = getBaixaView();
                BaixaViewRowImpl baixasRow = null;
                baixasView.setMaxFetchSize(-1);
                baixasView.clearWhereState();
                baixasView.setWhereClause(null);
                baixasView.addWhereClause("Baixa.ID = " + idBaixa);
                baixasView.executeQuery();
                baixasRow = (BaixaViewRowImpl)baixasView.getRowAtRangeIndex(0);

                ItemBaixaViewImpl itembaixaView = getItemBaixaView();

                /*
                 * Return Codes
                 *  0               - Success
                 *  -5              - For inicial Baixa the dataInicio must not be bigger than 1 day from the actual day
                 *  -6              -
                 *  -8              - If selectedAssistenciaFamilia, nome familar must be given
                 *  -13              - Changing the Data Termo, the date should not "cover" the next item
                 *
                 *  -14             -
                 *  -11              - Number of Days is superior than 30, for Public
                 *  -12             - If selectedOutroParentesco, outroParentesco must be given
                 *
                 *  -100            - Undifened error
                 */

                int resultadoRegras = 
                    commonBaixasRules(dataInicio, dataTermo, scgTipoItemBaixaId, 
                                      scgClassifDoencaID, nomeFamiliar, 
                                      dtaFamiliar, idFamiliar, scgParentescoId, 
                                      outroParentesco, nissFamiliar, 
                                      nissFamiliarImpedido, incapacitado, 
                                      cuidadosInadiaveis, internamento, 
                                      cirurgiaAmbulatorio, autorizSaida, 
                                      justificacaoSaida, entidadePublica, 
                                      baixasRow.getIduIdentUtId().toString(), 
                                      idItemBaixa.toString(), sysEntidadesId);
                if (resultadoRegras != 0) {
                    return resultadoRegras;
                }


                // For a inicial Baixa, the number of days must be at most 12 or 30 if it is public utente
                // For a prorrogação, the number if days must be at most 30
                java.util.Date dataTermoDate = dataTermo.dateValue();
                java.util.Date dataInicioDate = dataInicio.dateValue();

                long dataDiff = 
                    dataTermoDate.getTime() - dataInicioDate.getTime();
                long numberDays = 
                    Math.round(dataDiff / (24.0 * 60 * 60 * 1000) + 1);
                if (tipoRegisto.compareTo("I") == 0) {
                    if (entidadePublica.compareTo("EPUB") == 0) {
                        if (numberDays > 30) {
                            return -11;
                        }
                    }
                }

                if (numberDays < 1)
                    return -14;

                // For inicial Baixa the dataInicio must not be bigger than 1 day from the actual day
                // and must not be smaller than 10 days from the actual day
                /*
                if (tipoRegisto.compareTo("I") == 0) {
                    java.util.Date dataActualDate = new java.util.Date(System.currentTimeMillis());

                    if (dataInicioDate.after(dataActualDate)) { // must not be greater than 1 day
                        dataDiff = dataInicioDate.getTime() - dataActualDate.getTime();
                        numberDays = Math.round(dataDiff / (24.0 * 60 * 60 * 1000) + 1);
                        if (numberDays > 1){
                            return -5;
                        }
                    } else {    //must not be smaller than 10 days
                        dataDiff = dataActualDate.getTime() -  dataInicioDate.getTime();
                        numberDays = Math.round(dataDiff / (24.0 * 60 * 60 * 1000) + 1);
                        if (numberDays > 10){
                            return -6;
                        }
                    }
                }
                */

                /* If OutroParentesco is selected then, Outro Parentesco must be given*/
                if (selectedOutroParentesco != null && 
                    selectedOutroParentesco && 
                    (outroParentesco == null || outroParentesco.length() == 
                     0)) {
                    return -12;
                }

                java.util.Date oldDataInicioDate = oldDataInicio.dateValue();
                Date smallerDataInicio; // We need to update only the items above the smaller of this two dates

                if (oldDataInicioDate.after(dataInicioDate)) {
                    smallerDataInicio = dataInicio;
                } else {
                    smallerDataInicio = oldDataInicio;
                }

                //Gets the collumns to be updated
                itembaixaView.clearWhereState();
                itembaixaView.setWhereClause(null);
                itembaixaView.addWhereClause("ItemBaixa.GIT_BAIXAS_ID = " + 
                                             idBaixa);
                itembaixaView.addWhereClause("AND ItemBaixa.ANULADO <> 'S'");
                itembaixaView.addWhereClause("AND ItemBAixa.DATA_INICIO >= to_date('" + 
                                             smallerDataInicio + 
                                             "','yyyy-mm-dd')");
                itembaixaView.setOrderByClause("ItemBaixa.data_inicio asc"); //order is important for the updates of the dates

                //executes
                itembaixaView.setMaxFetchSize(-1);
                itembaixaView.executeQuery();

                ItemBaixaViewRowImpl itemBaixaRow;
                ItemBaixaViewRowImpl itemBaixaRowToInsert;

                java.util.Date dataActualDate = 
                    new java.sql.Date(System.currentTimeMillis());
                Date sysdate;
                try {
                    sysdate = new Date(dataActualDate);
                } catch (SQLException e) {
                    log.error("",e);
                    sysdate = null;
                }

                int itemBaixaViewQueryRowCount = itembaixaView.getRowCount();

                //Puts the row iterator on the first position
                itembaixaView.first();

                ItemBaixaViewRowImpl[] bagOfRowsToInsert = 
                    new ItemBaixaViewRowImpl[itembaixaView.getRowCount()];
                Boolean flagChangeData = false;

                for (int i = 0; i < itemBaixaViewQueryRowCount; i++) {

                    if (i == 0 && 
                        (!dataTermo.toString().equalsIgnoreCase(oldDataTermo.toString()))) {
                        //Item that is being updated. Garanted by itembaixaView.addWhereClause("AND ItemBAixa.DATA_INICIO >= to_date('" + dataInicio + "','yyyy-mm.dd')");
                        flagChangeData = true;
                    }

                    itemBaixaRow = 
                            (ItemBaixaViewRowImpl)itembaixaView.getCurrentRow();

                    //Copys line
                    itemBaixaRowToInsert = 
                            (ItemBaixaViewRowImpl)itembaixaView.createRow();
                    //To Guarante that updates are done first than inserts
                    itemBaixaRowToInsert.setNewRowState(Row.STATUS_INITIALIZED);

                    //Anuuls Item Baixa
                    itemBaixaRow.setAnulado("S");
                    itemBaixaRow.setDataAnulado(sysdate);
                    this.getDBTransaction().postChanges();
                    
                    //initialize new row
                    itemBaixaRowToInsert.setScgTipoaltaId(itemBaixaRow.getScgTipoaltaId());
                    if (itemBaixaRow.getId().getSequenceNumber().intValue() == 
                        idItemBaixa.intValue()) { //Item that we are changing 
                        itemBaixaRowToInsert.setAutorizSaida(autorizSaida);
                        itemBaixaRowToInsert.setCuidadosInadiaveis(cuidadosInadiaveis);
                        itemBaixaRowToInsert.setIncapacitado(incapacitado);
                        itemBaixaRowToInsert.setInternamento(internamento);
                        itemBaixaRowToInsert.setCirurgiaAmbulatorio(cirurgiaAmbulatorio);
                        itemBaixaRowToInsert.setJustificacaoSaida(justificacaoSaida);
                        itemBaixaRowToInsert.setDataInicio(dataInicio);
                        itemBaixaRowToInsert.setDataTermo(dataTermo);
                        itemBaixaRowToInsert.setNumEpisodio(numEpisodio);
                        itemBaixaRowToInsert.setScgCodModuloId(scgModuloId != 
                                                               null ? 
                                                               scgModuloId : 
                                                               null);
                        //Caso seja baixa Manual
                    } else {
                        itemBaixaRowToInsert.setAutorizSaida(itemBaixaRow.getAutorizSaida());
                        itemBaixaRowToInsert.setCuidadosInadiaveis(itemBaixaRow.getCuidadosInadiaveis());
                        itemBaixaRowToInsert.setIncapacitado(itemBaixaRow.getIncapacitado());
                        itemBaixaRowToInsert.setInternamento(itemBaixaRow.getInternamento());
                        itemBaixaRowToInsert.setCirurgiaAmbulatorio(itemBaixaRow.getCirurgiaAmbulatorio());
                        itemBaixaRowToInsert.setJustificacaoSaida(itemBaixaRow.getJustificacaoSaida());
                        itemBaixaRowToInsert.setDataInicio(itemBaixaRow.getDataInicio());
                        itemBaixaRowToInsert.setNumEpisodio(numEpisodio);
                        itemBaixaRowToInsert.setScgCodModuloId(scgModuloId != 
                                                               null ? 
                                                               scgModuloId : 
                                                               null);

                        if (flagChangeData == true && 
                            i != 0) { //It's the second item, the one we should compare the DataTermo
                            long newDataTermoLong = 
                                dataTermo.dateValue().getTime();
                            long oldDataTermoLong = 
                                itemBaixaRow.getDataTermo().dateValue().getTime();
                            if (oldDataTermoLong <= newDataTermoLong) {
                                //Check if this.data_termo is diferrent. if so, must be smaller than data_termo of the next item baixa and
                                //the previous item baixa and next item baixa must obay the rules of beeing 12 or 30 max, depending if it is Inicial or Progorragção
                                this.getDBTransaction().rollback();

                                itembaixaView.setWhereClause(null);
                                itembaixaView.clearCache();
                                return -13;
                            }

                            //Data de Inicio must be one day after the new Date of Termo
                            DATE newDataInicioTemp = 
                                dataTermo.addJulianDays(1, 0);
                            dataTermo.addJulianDays(-1, 0);
                            Date newDataTermo = new Date(newDataInicioTemp);
                            itemBaixaRowToInsert.setDataInicio(new Date(newDataTermo));

                            flagChangeData = false;
                        }
                        itemBaixaRowToInsert.setDataTermo(itemBaixaRow.getDataTermo());
                    }

                    //Global Updates //Values controled via web-interface throw javascript
                    itemBaixaRowToInsert.setIdPai(itemBaixaRow.getId().getSequenceNumber());
                    itemBaixaRowToInsert.setGitBaixasId(itemBaixaRow.getGitBaixasId());
                    itemBaixaRowToInsert.setScgClassifdoencaId(scgClassifDoencaID);
                    itemBaixaRowToInsert.setProProfissidPessoalId(proProfissidPessoalId);
                    itemBaixaRowToInsert.setScgTiporegistoId(itemBaixaRow.getScgTiporegistoId());
                    itemBaixaRowToInsert.setSysEntidadesId(sysEntidadesId);

                    itemBaixaRowToInsert.removeFromCollection();
                    bagOfRowsToInsert[i] = itemBaixaRowToInsert;

                    itembaixaView.next();

                }

                //If Manual Baixa, then we have to create a new Item Baixa
                ItemBaixaViewRowImpl newRowItemBaixaManual = null;

                if (baixaManual.compareToIgnoreCase("S") == 0) {
                    newRowItemBaixaManual = 
                            (ItemBaixaViewRowImpl)itembaixaView.createRow();

                    newRowItemBaixaManual.setGitBaixasId(idBaixa);
                    newRowItemBaixaManual.setSysEntidadesId(sysEntidadesId);
                    newRowItemBaixaManual.setProProfissidPessoalId(proProfissidPessoalId);

                    //Day of Manual Item is only the day before the item Progorragação
                    DATE dataInicioManualTemp = 
                        dataInicio.addJulianDays(-1, 0);
                    dataInicio.addJulianDays(1, 0);
                    Date dataInicioManual = new Date(dataInicioManualTemp);
                    newRowItemBaixaManual.setDataInicio(dataInicioManual);
                    newRowItemBaixaManual.setDataTermo(dataInicioManual);

                    //Gets Item Baixa Code
                    CallableStatement codigoItemBaixaStatement = 
                        this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_SCG_CODIGO_BAIXA('M')}", 
                                                                        1);
                    String scgCodigoManual = null;
                    try {
                        codigoItemBaixaStatement.registerOutParameter(1, 
                                                                      Types.NUMERIC);
                        codigoItemBaixaStatement.execute();
                        scgCodigoManual = 
                                codigoItemBaixaStatement.getString(1);

                        Number scgCodigoManualNumber = 
                            new Number(scgCodigoManual);
                        newRowItemBaixaManual.setScgTiporegistoId(scgCodigoManualNumber);

                        codigoItemBaixaStatement.close();
                    } catch (SQLException e) {
                        log.error("",e);
                        return -53;
                    }

                    //inserts Row            
                    itembaixaView.insertRow(newRowItemBaixaManual);
                }

                // Actualizar valores no item baixa (dados de familiar

                if (baixasRow != null) {
                    /*
                     if(scgParentescoId!=null){ baixasRow.setScgParentescoId(scgParentescoId); }
                     if(nomeFamiliar!=null){ baixasRow.setNomeFamiliar(nomeFamiliar); }
                     if(nissFamiliar!=null){ baixasRow.setNissFamiliar(nissFamiliar); }
                     if(nissFamiliarImpedido!=null){ baixasRow.setNissProgenitorImp(nissFamiliarImpedido); }
                     if(dtaFamiliar!=null){ baixasRow.setDtaNascFamiliar(dtaFamiliar); }
                     if(idFamiliar!=null){ baixasRow.setIduIdentUtIdFamiliar(idFamiliar); }
                     if (selectedOutroParentesco != null) { baixasRow.setParentescoOutro(outroParentesco); } else { baixasRow.setParentescoOutro(null); }
                    */
                    baixasRow.setScgParentescoId(scgParentescoId);
                    baixasRow.setNomeFamiliar(nomeFamiliar);
                    baixasRow.setNissFamiliar(nissFamiliar);
                    baixasRow.setNissProgenitorImp(nissFamiliarImpedido);
                    baixasRow.setDtaNascFamiliar(dtaFamiliar);
                    baixasRow.setIduIdentUtIdFamiliar(idFamiliar);
                    baixasRow.setParentescoOutro(outroParentesco);
                    
                    /*
                    // submeter alterações para verificar se não são devolvido erros
                    this.getDBTransaction().postChanges();
                    // efetuar commit das alterações
                    this.getDBTransaction().commit();

                    // registar log de operações especiais caso a alteração seja requerida no módulo de administração de baixas
                    // ordem de registo de log de operacoes especiais
                    if (admin) {
                        String comentarioAnulacao = 
                            "Anulação automática por alteração de Item Baixa.";
                        Number idMotivo = 
                            obtemId("GTAN", "8"); // 8 - codigo de 'Anulação Interna' p/ os Motivos de Anulação
                        registaOperacoesLog(idBaixa, idItemBaixa, "AL", 
                                            idMotivo, comentarioAnulacao, 
                                            sysEntidadesId, 
                                            proProfissidPessoalId, false);
                    }
                    */
                    
                    
                    // submeter alterações para verificar se não são devolvido erros
                    this.getDBTransaction().postChanges();
                    // efetuar commit das alterações
                    this.getDBTransaction().commit();

                } else {
                    throw new Exception("Item baixa não identificado. Contactar Direcção Informática do Centro.");
                }
            }
        } catch (Exception e) {
            log.error("", e);
            throw e;
        }
        return 0;
    }


    /**Container's getter for ListaHistBaixas
     */
    public ListaHistBaixasImpl getListaHistBaixas() {
        return (ListaHistBaixasImpl)findViewObject("ListaHistBaixas");
    }


    /**Container's getter for ListaHistItemsBaixas
     */
    public ListaHistItemsBaixasImpl getListaHistItemsBaixas() {
        return (ListaHistItemsBaixasImpl)findViewObject("ListaHistItemsBaixas");
    }


    // regista operacao especial das baixas

    public Integer registaOperacoesLog(Number idBaixa, Number idItemBaixa, 
                                       String idTipoOperacao, 
                                       Number scgMotivoAnulacaoId, 
                                       String comentarioAnulacao, 
                                       Number sysEntidadesId, 
                                       Number proProfissId, 
                                       boolean executaCommit) {
        try {
            // obter id da operacao
            Number idOper = obtemId("GTOP", idTipoOperacao);
            OperacoesLogViewImpl vi = getOperacoesLogView();
            OperacoesLogViewRowImpl row = 
                (OperacoesLogViewRowImpl)vi.createRow();
            row.setGitBaixasId(idBaixa);
            row.setDataOperacao(new Date(new java.sql.Date(System.currentTimeMillis())));
            row.setGitItemsBaixasIdAntigo(idItemBaixa);
            row.setGitItemsBaixasIdNovo(idItemBaixa);
            row.setProProfissidId(proProfissId);
            row.setSysCodGenericosId(idOper);
            row.setSysEntidadesId(sysEntidadesId);
            row.setComentarioAnulacao(comentarioAnulacao);
            row.setScgMotivoAnulacaoId(scgMotivoAnulacaoId);
            vi.insertRow(row);
            if (executaCommit) {
                this.getDBTransaction().commit();
            }
        } catch (Exception e) {
            log.error("",e);
            this.getDBTransaction().rollback();
            return -1;
        }
        return 0;
    }


    public Number obtemId(String dominio, String idTipoOperacao) {
        Number retVal = new Number(0);
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            StringBuffer sb = 
                new StringBuffer("Select codigo, id from sys_cod_genericos ").append("where sys_tipos_codigos_id in ( ").append("select id from sys_tipos_codigos where cod_tipo = ? ").append(") and codigo = ? ");
            ps = 
 this.getDBTransaction().createPreparedStatement(sb.toString(), 0);
            ps.setString(1, dominio);
            ps.setString(2, idTipoOperacao);
            rs = ps.executeQuery();
            while (rs.next()) {
                retVal = new Number(rs.getLong("id"));
            }
        } catch (Exception e) {
            log.error("",e);
        } finally {
            if (rs != null) {
                try {
                    rs.close();
                } catch (Exception e) {
                    log.error(e);
                }
            }
            if (ps != null) {
                try {
                    ps.close();
                } catch (Exception e) {
                    log.error(e);
                }
            }
        }
        return retVal;
    }

    // anula um item baixa e cria um outro com a mesma informação à excepção do tipo

    public void alteraTipoComBaseItemBaixa(Number idBaixa, Number idItemBaixa, 
                                           Number scgMotivoAnulacaoId, 
                                           String comentarioAnulacao, 
                                           Number sysEntidadesId, 
                                           Number proProfissId, 
                                           Number idNovoTipoRegisto, 
                                           String tipoRegistoAAlterar, 
                                           Number idItemBaixaAnularAltInicial) throws Exception {
        try {
            // anula item baixa alvo da alteração do tipo
            Integer o1 = 
                annulItemBaixa(idItemBaixa, scgMotivoAnulacaoId, comentarioAnulacao, 
                               sysEntidadesId, proProfissId);
            // ordem de registo de log de operacoes especiais para registo #
            Integer o2 = 
                registaOperacoesLog(idBaixa, idItemBaixa, "PI", scgMotivoAnulacaoId, 
                                    comentarioAnulacao, sysEntidadesId, 
                                    proProfissId, false);

            // se for uma alteração de Inicial para Prorrogação vamos incerir uma Manual para um dia antes da data inicio do item a alterar
            // caso seja uma alteração de Porrogação para Inicial anular items activos Manuais anteriores
            Integer o3 = 0;
            if (tipoRegistoAAlterar.equalsIgnoreCase("P")) {
                // #
                o3 = 
 insereItemBaixaManual(idBaixa, idItemBaixa, sysEntidadesId, proProfissId);
            }

            // duplica tipo #
            Integer o4 = duplicaItemBaixa(idItemBaixa, idNovoTipoRegisto);

            // se todas as operacoes correram bem efetuo o commit
            // caso contrario faço rollback
            if (o1 == 0 && o2 == 0 && o3 == 0 && o4 == 0) {
                this.getDBTransaction().commit();
            } else {
                this.getDBTransaction().rollback();
            }
        } catch (Exception ex) {
            throw ex;
        }
    }


    // duplica item baixa com base num existente alterando o tipo de registo

    private Integer duplicaItemBaixa(Number idItemBaixa, 
                                     Number idNovoTipoRegisto) {
        try {
            // obter item baixa através do id fornecido
            ItemBaixaViewImpl itembaixaView = getItemBaixaView();
            Key newKey = new Key(new Object[] { idItemBaixa });
            Row[] linhas = itembaixaView.findByKey(newKey, 1);
            if (linhas.length != 1) {
                return -100; // ERRO: devolveu mais do que um registo
            }
            ItemBaixaViewRowImpl row = (ItemBaixaViewRowImpl)linhas[0];

            // -- criar uma row nova
            ItemBaixaViewRowImpl newRow = 
                (ItemBaixaViewRowImpl)itembaixaView.createRow();
            newRow.setAnulado("N");
            newRow.setAutorizSaida(row.getAutorizSaida());
            newRow.setCuidadosInadiaveis(row.getCuidadosInadiaveis());
            newRow.setDataInicio(row.getDataInicio());
            newRow.setDataTermo(row.getDataTermo());
            newRow.setGitBaixasId(row.getGitBaixasId());
            newRow.setIdPai(row.getIdPai());
            newRow.setIncapacitado(row.getIncapacitado());
            newRow.setInternamento(row.getInternamento());
            newRow.setCirurgiaAmbulatorio(row.getCirurgiaAmbulatorio());
            newRow.setJustificacaoSaida(row.getJustificacaoSaida());
            newRow.setProProfissidPessoalId(row.getProProfissidPessoalId());
            newRow.setScgClassifdoencaId(row.getScgClassifdoencaId());
            newRow.setScgTiporegistoId(idNovoTipoRegisto); // tipo de registo para o qual estamos a alterar
            newRow.setSysEntidadesId(row.getSysEntidadesId());
            itembaixaView.insertRow(newRow);
        } catch (Exception e) {
            log.error("",e);
            return -1;
        }
        return 0;
    }


    private Integer insereItemBaixaManual(Number idBaixa, Number idItemBaixa, 
                                          Number sysEntidadesId, 
                                          Number proProfissId) {

        try {
            // criar novo item baixa manual
            ItemBaixaViewImpl itembaixaView = getItemBaixaView();
            ItemBaixaViewRowImpl newRowItemBaixaManual = 
                (ItemBaixaViewRowImpl)itembaixaView.createRow();
            newRowItemBaixaManual.setGitBaixasId(idBaixa);
            newRowItemBaixaManual.setSysEntidadesId(sysEntidadesId);
            newRowItemBaixaManual.setProProfissidPessoalId(proProfissId);

            // obter item baixa através do id fornecido
            Key newKey = new Key(new Object[] { idItemBaixa });
            Row[] linhas = itembaixaView.findByKey(newKey, 1);
            if (linhas.length != 1) {
                return -100; // ERRO: devolveu mais do que um registo
            }
            ItemBaixaViewRowImpl row = (ItemBaixaViewRowImpl)linhas[0];
            Date dataInicio = row.getDataInicio();

            // calcular data inicio e data termo para o item baixa manual
            // nota: dia antes da data inicio da Progorragação
            DATE dataTermoManualTemp = dataInicio.addJulianDays(-1, 0);
            dataInicio.addJulianDays(1, 0);
            Date dataTermoManual = new Date(dataTermoManualTemp);
            newRowItemBaixaManual.setDataInicio(dataTermoManual);
            newRowItemBaixaManual.setDataTermo(dataTermoManual);

            // -- obter codigo de tipo item baixa manual
            CallableStatement codigoItemBaixaStatement = 
                this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_SCG_CODIGO_BAIXA('M')}", 
                                                                1);
            String scgCodigoManual = null;
            codigoItemBaixaStatement.registerOutParameter(1, Types.NUMERIC);
            codigoItemBaixaStatement.execute();
            scgCodigoManual = codigoItemBaixaStatement.getString(1);
            Number scgCodigoManualNumber = new Number(scgCodigoManual);
            newRowItemBaixaManual.setScgTiporegistoId(scgCodigoManualNumber);
            itembaixaView.insertRow(newRowItemBaixaManual);

        } catch (Exception e) {
            log.error("",e);
            return -1;
        }

        return 0;
    }


    /* Método para invocar regras em package da bd */

    private int commonBaixasRules(Date dataInicio, 
                                  Date dataTermo, 
                                  Number tipoItemBaixaId, 
                                  Number tipoBaixaId, 
                                  String familiarNome, 
                                  Date familiarDtaNasc, 
                                  Number familiarIduIdentUtId, 
                                  Number familiarParentescoId, 
                                  String familiarOutroParentesco, 
                                  Number familiarNiss, 
                                  Number familiarImpedidoNiss, 
                                  String incapacitado, 
                                  String cuidadosInadiaveis, 
                                  String internamento, 
                                  String cirurgiaAmbulatorio, 
                                  String autorizSaida, 
                                  String justificacaoSaida, 
                                  String entidadePublica, String iduIdentUt, 
                                  String idItemBaixa,
                                  Number idEntidade) {
        CallableStatement regrasBaixas = null;
        int result;
        try {
            regrasBaixas = 
                    this.getDBTransaction().createCallableStatement("{? = call git.REGRAS(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}", 
                                                                    1);
            regrasBaixas.registerOutParameter(1, Types.NUMERIC);
            regrasBaixas.setObject(2, dataInicio);
            regrasBaixas.setObject(3, dataTermo);
            regrasBaixas.setObject(4, tipoItemBaixaId);
            regrasBaixas.setObject(5, tipoBaixaId);
            regrasBaixas.setObject(6, familiarNome);
            regrasBaixas.setObject(7, familiarDtaNasc);
            regrasBaixas.setObject(8, familiarIduIdentUtId);
            regrasBaixas.setObject(9, familiarParentescoId);
            regrasBaixas.setObject(10, familiarOutroParentesco);
            regrasBaixas.setObject(11, familiarNiss);
            regrasBaixas.setObject(12, familiarImpedidoNiss);
            regrasBaixas.setObject(13, incapacitado);
            regrasBaixas.setObject(14, cuidadosInadiaveis);
            regrasBaixas.setObject(15, internamento);
            regrasBaixas.setObject(16, cirurgiaAmbulatorio);
            regrasBaixas.setObject(17, autorizSaida);
            regrasBaixas.setObject(18, justificacaoSaida);
            regrasBaixas.setObject(19, entidadePublica);
            regrasBaixas.setObject(20, iduIdentUt);
            regrasBaixas.setObject(21, idItemBaixa);
            regrasBaixas.setObject(22, idEntidade);
            regrasBaixas.execute();
            result = regrasBaixas.getInt(1);
        } catch (SQLException e) {
            log.error("",e);
            return -10000;
        } finally {
            try {
                if (regrasBaixas != null) {
                    regrasBaixas.close();
                }
            } catch (Exception ex) {
            }
        }
        return result;
    }
    
    /* Método para obter id da classificaçao de doença */
    private Number getIdTipoItemBaixa(String codigo) throws Exception {
        CallableStatement regrasBaixas = null;
        Number result;
        try {
            regrasBaixas = this.getDBTransaction().createCallableStatement("{? = call git.GET_ID_SCG_CODIGO_BAIXA(?)}", 1);
            regrasBaixas.registerOutParameter(1, Types.NUMERIC);
            regrasBaixas.setString(2, codigo);
            regrasBaixas.execute();
            result = new Number(regrasBaixas.getString(1));
        } catch (Exception e) {
            log.error("",e);
            throw e;
        } finally {
            try {
                if (regrasBaixas != null) {
                    regrasBaixas.close();
                }
            } catch (Exception ex) {
            }
        }
        return result;
    }
}
