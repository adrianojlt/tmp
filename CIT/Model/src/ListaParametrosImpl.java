package ora.pt.cons.igif.sics;

import java.sql.ResultSet;

import ora.pt.cons.igif.sics.common.ListaParametros;

import oracle.jbo.server.TransactionEvent;
import ora.pt.cons.igif.sics.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ListaParametrosImpl extends ViewObjectImpl implements ListaParametros {
    
    
    private String pathToForwardActions      = ".ROOT.SNU.URLS.FORWARD";
    private String nameBaixasForwardAction   = "BAIXAS_ACTION";
    private String adminSincForwardAction    = "ADMINSINC_ACTION";
    private String namePesquisaUtenteForwardAction = "PESQUISA_UTENTE_ACTION";
    private String nameReceitasForwardAction = "RECEITAS_ACTION";
    private String reportServerUrl           = ".ROOT.REPORTS.REPORTS_SERVER_URL";
    
    /**This is the default constructor (do not remove)
     */
    public ListaParametrosImpl() {
    }


    /**executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object params[], int noUserParams) {super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc,
                                                 ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**getEstimatedRowCount - overridden for custom java data source support.
     */
    public long getEstimatedRowCount() {
        long value = super.getEstimatedRowCount();
        return value;
    }
    
    /**Gets the bind variable value for Path
     */
    public String getPath() {
        return (String)getNamedWhereClauseParam("Path");
    }

    /**Sets <code>value</code> for bind variable Path
     */
    public void setPath(String value) {
        setNamedWhereClauseParam("Path", value);
    }
    
    public void setPathForUrlsRedirect() {
        setPath(pathToForwardActions + ".");
    }
    
    public void setPathForUrlsRedirectBaixa() {
        setPath(pathToForwardActions + "." + nameBaixasForwardAction);
    }
    
    public void setPathForUrlsRedirectAdminSinc() {
        setPath(pathToForwardActions + "." + adminSincForwardAction);
    }

    public void setPathForUrlsRedirectPesquisaUtente() {
        setPath(pathToForwardActions + "." + namePesquisaUtenteForwardAction);
    }
    
    public void setPathForUrlsRedirectReceitas() {
        setPath(pathToForwardActions + "." + nameReceitasForwardAction);
    }
    
    public void setPathForUrlsFromContext(String context){
        if (context.compareToIgnoreCase("git") == 0) {
            setPathForUrlsRedirectBaixa();
        } else if (context.compareToIgnoreCase("med") == 0) {
            setPathForUrlsRedirectReceitas();
        } else if (context.compareToIgnoreCase("adminSinc") == 0) {
            setPathForUrlsRedirectAdminSinc();
        } else {
            setPathForUrlsRedirectPesquisaUtente();
        }
    }
    
    public void setPathForReportServerUrl(){
        setPath(reportServerUrl);
    }
    
    public void setPathForReportsMedParam(){
        setPath(".ROOT.REPORTS.SNU.MED");
    }
    
    public void setPathForReportsGitParam(){
        setPath(".ROOT.REPORTS.SNU.GIT");
    }

    public void setPathForReportsIdentificacaoParam(){
        setPath(".ROOT.REPORTS.SNU.IDU.FICHAUTENTE");
    }
    
    public void beforeRollback(TransactionEvent transactionEvent) {
        // -- 24.04.2008 comentado para que em caso de rollback o estado da ViewObject seja mantido
        // super.beforeRollback(transactionEvent);
    }

    public void afterRollback(TransactionEvent transactionEvent) {
        // -- 24.04.2008 comentado para que em caso de rollback o estado da ViewObject seja mantido
        // super.afterRollback(transactionEvent);
    }
}
