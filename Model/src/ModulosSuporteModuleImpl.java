package ora.pt.cons.igif.sics.suporte;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.List;

import ora.pt.cons.igif.sics.ViewObjectImpl;
import ora.pt.cons.igif.sics.ldap.LdapAccessControl;
import ora.pt.cons.igif.sics.suporte.common.ModulosSuporteModule;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ModulosSuporteModuleImpl extends ApplicationModuleImpl implements ModulosSuporteModule {
    
    private static Logger log = Logger.getLogger(ModulosSuporteModuleImpl.class);
    
    /**This is the default constructor (do not remove)
     */
    public ModulosSuporteModuleImpl() {
        PropertyConfigurator.configure(System.getProperty("sics.property.log4j.fileConfiguration"));
        log.info("ModulosSuporteModuleImpl instanciado");
    }

    public ListaCodigosGenericosImpl getListaCodigosGenericos() { return (ListaCodigosGenericosImpl)findViewObject("ListaCodigosGenericos"); }
    public ListaCodigosGenericosImpl getListaCodigosGenericos1() { return (ListaCodigosGenericosImpl)findViewObject("ListaCodigosGenericos1"); }
    public ListaEntidadesResponsaveisImpl getListaEntidadesResponsaveis() {return (ListaEntidadesResponsaveisImpl)findViewObject("ListaEntidadesResponsaveis");}
    public ListaCodigosGenericosImpl getListaCodigosGenericos2() {return (ListaCodigosGenericosImpl)findViewObject("ListaCodigosGenericos2");}
    public ListaCodigosGenericosImpl getListaCodigosGenericos3() {return (ListaCodigosGenericosImpl)findViewObject("ListaCodigosGenericos3");}
    public UtilizadorViewImpl getUtilizadorView() {return (UtilizadorViewImpl)findViewObject("UtilizadorView");}
    public ListaCodigosHierarquicosLovImpl getListaCodigosHierarquicosLov() {return (ListaCodigosHierarquicosLovImpl)findViewObject("ListaCodigosHierarquicosLov");}

    public static void main(String[] args) {
        launchTester("ora.pt.cons.igif.sics.suporte", "ModulosSuporteModuleLocal");
    }
    
    // -- redefine pesquisa ListaEntidades Responsaveis
    public void listaEntidadesResponsaveisWhereClause(String idUtente) throws JboException { 
        try{
            ViewObjectImpl vo = getListaEntidadesUtente();
            vo.clearWhereState();
            if(idUtente!=null){
                // -- aplica condicoes de pesquisa e executa query.
                vo.setWhereClause(" idUtente = " + idUtente);
                vo.defineNamedWhereClauseParam("idUtente", null, null);
                vo.setNamedWhereClauseParam("idUtente", idUtente);
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            } 
        } catch(Exception e ){
          log.error("Erro em listaEntidadesResponsaveisWhereClause()",e);
        }
    }

    // -- altera password utilizador
    public void alteraUserPassword(String idUser, String password) throws Exception {
        ViewObjectImpl vo = getUtilizadorView();
        try{
            UtilizadorViewRowImpl r = null;
            Key k = new Key(new Object[] { idUser });
            Row[] kk = vo.findByKey(k, 1);
            for (int i = 0; i < kk.length; i++) {
                Row row = kk[i];
                 r = (UtilizadorViewRowImpl) row;
                r.setSenha(password);
                vo.getDBTransaction().commit();
            }
        } catch(Exception e){
          log.error("erro ao alterar password do user id "+ idUser, e);
          vo.getDBTransaction().rollback();
          throw e;
        }
    }
    
    public void listaCodigosGenericosExecutesQuery(String tipoCodigo) {
        try{
            ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos();
            listaCodigosGenericosVO.clearWhereState();
            listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" + tipoCodigo + "'");
            listaCodigosGenericosVO.executeQuery();
        } catch(Exception e){
          log.error("",e);
          // throw e;
        }
    }

    public void listaCodigosGenericos1ExecutesQuery(String tipoCodigo) {
        try{
            ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos1();
            listaCodigosGenericosVO.clearWhereState();
            listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" + tipoCodigo + "'");
            listaCodigosGenericosVO.executeQuery();
        } catch(Exception e){
          log.error("",e);
          // throw e;
        }
    }

    public void listaCodigosGenericos1ExecutesQuery(String tipoCodigo, 
                                                    Integer sysEntidadesId) {
        try{
            ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos1();
            listaCodigosGenericosVO.clearWhereState();
            listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" + tipoCodigo + "' AND " + "scg_sys_entidades_id = '" + sysEntidadesId.toString() + "'");
            listaCodigosGenericosVO.executeQuery();
        } catch(Exception e){
          log.error("",e);
          // throw e;
        }
    }
    
// ******************************************************************************************************************************************
 
    
 


    //PAULO SANTOS 15-06-2007

    public int codigosGenericosAddWhereClause(String codigoDetalhe, 
                                              String descricaoDetalhe, 
                                              String sysEntidadesId, 
                                              String sysTiposCodigosId,
                                              String tipoCodigo,
                                              String tipoDescr,
                                              String paramVal,
                                              String tipCodTable) {
            ListaCodigosGenericosImpl vo = this.getListaCodigosGenericos();
            vo.clearWhereState();
            String whereClause = new String ("");

            if (codigoDetalhe == null) {
                codigoDetalhe = new String("");
            }
            if (descricaoDetalhe == null) {
                descricaoDetalhe = new String("");
            }
             if(sysEntidadesId == null){
            sysEntidadesId = new String("");
            }
              if(sysTiposCodigosId == null){
            sysTiposCodigosId = new String("");
            }

             if(tipoCodigo == null){
            tipoCodigo = new String("");
             }
             
            if (tipoDescr==null){
                tipoDescr = new String("");
            }
            
            // if (codigoDetalhe.length() > 0 || descricaoDetalhe.length() > 0 || sysEntidadesId.length() > 0 || sysTiposCodigosId.length() > 0 || tipoCodigo.length() > 0 || tipoDescr.length()>0) {

              /*  if(sysEntidadesId.length() > 0){
                //whereClause = whereClause.concat("SYS_ENTIDADES_ID = :sysEntidadesId ");scg_sys_entidades_id
                whereClause = whereClause.concat("scg_sys_entidades_id = :sysEntidadesId ");
                vo.defineNamedWhereClauseParam("sysEntidadesId", null, null);
                vo.setNamedWhereClauseParam("sysEntidadesId", sysEntidadesId);

                }*/
                
                if(sysTiposCodigosId.length() > 0){
                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }
                whereClause = whereClause.concat("Sys_Tipos_Codigos_Id = :sysTiposCodigosId");
                vo.defineNamedWhereClauseParam("sysTiposCodigosId", null, null);
                vo.setNamedWhereClauseParam("sysTiposCodigosId", sysTiposCodigosId);
                }

                if (codigoDetalhe.length() > 0) {

                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }
                    whereClause = 
                            whereClause.concat("UPPER(CODIGO) LIKE (UPPER(NVL(:codigoDetalhe,CODIGO))||'%')");
                    vo.defineNamedWhereClauseParam("codigoDetalhe", null, 
                                                   null);
                    vo.setNamedWhereClauseParam("codigoDetalhe", 
                                                codigoDetalhe);

                }


                if (descricaoDetalhe.length() > 0) {

                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }
                    whereClause = 
                            whereClause.concat(" UPPER(DESCRICAO) LIKE (UPPER(NVL(:descricaoDetalhe,DESCRICAO))||'%')");
                    vo.defineNamedWhereClauseParam("descricaoDetalhe", null, 
                                                   null);
                    vo.setNamedWhereClauseParam("descricaoDetalhe", 
                                                descricaoDetalhe);

                }

                if (tipoCodigo.length() > 0) {

                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }
                    whereClause = 
                            whereClause.concat("TipoCodigo_codtipo LIKE UPPER(:tipoCodigo)||'%'");
                    vo.defineNamedWhereClauseParam("tipoCodigo", null, 
                                                   null);
                    vo.setNamedWhereClauseParam("tipoCodigo", 
                                                tipoCodigo);

                }
                
                if (tipoDescr.length() > 0) {

                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }
                    whereClause = 
                            whereClause.concat("UPPER(tipocod_descr) LIKE (UPPER(:tipocod_descr) || '%')");
                    vo.defineNamedWhereClauseParam("tipocod_descr", null,null);
                    vo.setNamedWhereClauseParam("tipocod_descr",tipoDescr);

                }                
                
                if (tipCodTable.length() > 0) {

                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND ");
                    }

                    whereClause = whereClause.concat("codigo_tabela = :tipCodTable ");
                    vo.defineNamedWhereClauseParam("tipCodTable",null,null);
                    vo.setNamedWhereClauseParam("tipCodTable", tipCodTable); 
                }  
                
                
                
                if(paramVal.length()>0){
                    
                    if(paramVal.equals("TENT")){
                        if (whereClause.length() > 0) {
                            whereClause = whereClause.concat(" AND ");
                        }
                        whereClause = whereClause.concat(" SYS_TIPOS_CODIGOS_ID IN ( SELECT ID FROM SYS_TIPOS_CODIGOS WHERE Codigo_Tabela = 'E' ) ");
                        
                    } else {
                        if (whereClause.length() > 0) {
                            whereClause = whereClause.concat(" AND ");
                        }
                        whereClause = 
                                 whereClause.concat("SYS_TIPOS_CODIGOS_ID IN (SELECT STC.ID\n" + 
                                                                "               FROM SYS_PARAMETROS    SPA,\n" + 
                                                                "                    SYS_TIPOS_CODIGOS STC\n" + 
                                                                "              WHERE STC.Cod_Tipo   = SPA.Valor_Char\n" + 
                                                                "                AND SPA.CODIGO     = :paramVal\n" + 
                                                                "            )");
                        vo.defineNamedWhereClauseParam("paramVal", null,null);
                        vo.setNamedWhereClauseParam("paramVal",paramVal);     
                    }
                    
                    
                }
                
                
                vo.setWhereClause(whereClause);
                vo.setMaxFetchSize(-1);
                vo.executeQuery();

            /*
            } else {
                vo.setMaxFetchSize(0);
                vo.executeQuery();
            }
            */

            return 0; //Success
     
    }

  
     
  

    public String codigoHierarquicoGetId(String codigo) throws SQLException {

        if (codigo == null)
            return "-1";
        if (codigo.length() == 0)
            return "-1";
            
        // Gets Id from the Baixa Alta code.
        PreparedStatement idCodigo = 
            this.getDBTransaction().createPreparedStatement(" SELECT CodigoHierarquico.ID " + 
                                                            "   FROM SYS_COD_HIER CodigoHierarquico " + 
                                                            "   WHERE (CodigoHierarquico.codigo = '" + 
                                                            codigo + "')", 1);

        Integer id = null;

        ResultSet resultSet = idCodigo.executeQuery();
        resultSet.next();
        id = resultSet.getInt(1);

        return id.toString();
    }





    // -- <inicio> metodos LDAP 
    // @autor: Rui Moura
    // -- obter propriedades de ligacao ao ldap apartir da tabela SYS_CONF_PARAM
    public LdapAccessControl ldapAccessControl() throws Exception {
        String ldapSecurityPrincipal = "";
        String ldapSecurityCredentials = "";
        String ldapBaseDn = "";
        String ldapProviderUrl = "";
        LdapAccessControl ldap = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        
        try{
            ps = this.getDBTransaction().createPreparedStatement("SELECT * FROM SYS_CONF_PARAM WHERE NOME LIKE 'LDAP%'", 1);
            rs = ps.executeQuery();
            while (rs.next()) {
                String nome = rs.getString("NOME");
                if (nome.equals("LDAP_USERNAME")) {
                    ldapSecurityPrincipal = rs.getString("VAL_TEXT");
                } else if (nome.equals("LDAP_PASSWORD")) {
                    ldapSecurityCredentials = rs.getString("VAL_TEXT");
                } else if (nome.equals("LDAP_BASEDN")) {
                    ldapBaseDn = rs.getString("VAL_TEXT");
                } else if (nome.equals("LDAP_URL")) {
                    ldapProviderUrl = rs.getString("VAL_TEXT");
                }
            }
            
            // -- verificar se propriedades estão preenchidas
            if(ldapSecurityPrincipal.length()>0 
                && ldapSecurityCredentials.length()>0 
                && ldapBaseDn.length()>0
                && ldapProviderUrl.length()>0){
                    ldap = new LdapAccessControl(ldapProviderUrl, ldapSecurityPrincipal, ldapBaseDn, ldapSecurityCredentials);
                    ps.close();
            } else {
                throw new Exception("Variaveis de inicialização de Contexto de Ligação Ldap vazias. ");
            }
            
        } catch(Exception e){
          throw new Exception(e.getMessage());
        } finally{
            if(rs!=null) rs.close();
            if(ps!=null) ps.close();
        }
        return ldap;
    }
    
    public List obtemPerfisLDAP() throws Exception {
        return ldapAccessControl().getPerfis();
    }
    
    public String obtemArvoreAcessosLdap() throws Exception {
        return ldapAccessControl().getArvoreAcessos();
    }
    
    // -- <fim> metodos LDAP

 

    public void listaCodigosGenericosCodTipExecutesQuery(String tipoCodigo, 
                                                         String scgCodigo) {
        ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos();
        listaCodigosGenericosVO.clearWhereState();
        //Sets the query look for cods related with this Domain (tipoCodigo)
        listaCodigosGenericosVO.clearCache();
        listaCodigosGenericosVO.setMaxFetchSize(-1);
        listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" + 
                                               tipoCodigo + "'" + 
                                               " AND CODIGO = '" + scgCodigo + 
                                               "'");
      
        listaCodigosGenericosVO.executeQuery();
          }
          
    public void listaCodigosGenericos2CodTipExecutesQuery(String tipoCodigo, 
                                                         String scgCodigo) {
        ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos2();
        listaCodigosGenericosVO.clearWhereState();
        //Sets the query look for cods related with this Domain (tipoCodigo)
        listaCodigosGenericosVO.clearCache();
        listaCodigosGenericosVO.setMaxFetchSize(-1);
        listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" + 
                                               tipoCodigo + "'" + 
                                               " AND CODIGO = '" + scgCodigo + 
                                               "'");
      
        listaCodigosGenericosVO.executeQuery();
          }
     
    
    public void listaCodigosGenericos3CodTipExecutesQuery(String tipoCodigo,
                                                   String scgCodigo) {
    ViewObjectImpl listaCodigosGenericosVO = getListaCodigosGenericos3();
    listaCodigosGenericosVO.clearWhereState();
    //Sets the query look for cods related with this Domain (tipoCodigo)
    listaCodigosGenericosVO.clearCache();
    listaCodigosGenericosVO.setMaxFetchSize(-1);
    listaCodigosGenericosVO.setWhereClause("TipoCodigo_CODTIPO = '" +
                                         tipoCodigo + "'" + 
                                         " AND CODIGO = '" + scgCodigo + 
                                         "'");
    
    listaCodigosGenericosVO.executeQuery();
    }     

 
 
    
    // gerar username para determinado profissional
    public String gerarUsername(String idProfissional) throws Exception {
        ResultSet rs = null;
        CallableStatement cs = null;
        String username = "";
        try  {
            cs = this.getDBTransaction().createCallableStatement("{ ? = call sup.GERAR_USERNAME('" + idProfissional + "') }", 1);
            cs.registerOutParameter(1, Types.VARCHAR);
            log.debug("vai invocar sup.GERAR_USERNAME() ");
            cs.execute();
            if(cs.getString(1)!=null){
                username = cs.getString(1);
            }
            log.info("username gerado: " + username);
        } catch (Exception ex)  {
          log.error("Erro ao gerar username", ex);
          throw new Exception("Erro ao gerar username para o profissional: " + ex.getMessage());
        } finally  {
          if (rs!=null)  {
            try  {
                rs.close();
            } catch (Exception ex)  { } 
          }
            if (cs!=null)  {
              try  {
                  cs.close();
              } catch (Exception ex)  { } 
            }
        }
        log.info("devolve username: " + username);
        return username;
    }
  
    public String[] obtemARSDDaEntidade(String idEntidade) throws Exception {
        PreparedStatement ps = null;
        ResultSet rs = null;
        String[] retVal = null;
        try{
        
            if(idEntidade.length()>0){
                StringBuffer sb = new StringBuffer("");
                    sb.append("SELECT e.id, e.codigo, e.designacao, sysCG.Descricao ").
                       append("from sys_entidades e, sys_cod_genericos sysCG ").
                       append("where e.sys_subtipo_entidades_id = sysCG.Id ").
                       append("and sysCG.codigo = 'ARSD' ").
                       append("START WITH e.sys_entidades_id = ? ").
                       append("CONNECT BY PRIOR e.sys_entidades_id = e.id ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                ps.setInt(1, Integer.parseInt(idEntidade));
                rs = ps.executeQuery();
                while(rs.next()){
                    retVal = new String[3];
                    retVal[0] = rs.getString(1);
                    retVal[1] = rs.getString(2);
                    retVal[2] = rs.getString(3);
                }
            }  
        } catch(Exception e){
          throw new Exception(e.getMessage());
        } finally{
            if(rs!=null) {
                try{
                    rs.close();
                } catch(Exception e){}
            }
            if(ps!=null){
                try{
                    ps.close();
                } catch(Exception e){}
            }
        }
        return retVal;
    }

    /**Container's getter for ListaCodigosGenericos4
     */
    public ListaCodigosGenericosImpl getListaCodigosGenericos4() {
        return (ListaCodigosGenericosImpl)findViewObject("ListaCodigosGenericos4");
    }

    /**Container's getter for ListaEntidadesUtente
     */
    public ListaEntidadesResponsaveisImpl getListaEntidadesUtente() {
        return (ListaEntidadesResponsaveisImpl)findViewObject("ListaEntidadesUtente");
    }
}
