package ora.pt.cons.igif.sics.utentes;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;

import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;

import ora.pt.cons.igif.sics.ViewObjectImpl;
import ora.pt.cons.igif.sics.suporte.ListaCodigosHierarquicosLovImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class IdentificacaoUtenteModuleImpl extends ApplicationModuleImpl {
              
    private static Logger log = Logger.getLogger(IdentificacaoUtenteModuleImpl.class);
                
    public IdentificacaoUtenteModuleImpl() {
        PropertyConfigurator.configure(System.getProperty("sics.property.log4j.fileConfiguration"));
        log.info("IdentificacaoUtenteModuleImpl instanciado");
    }

    public static void main(String[] args) { 
        launchTester("ora.pt.cons.igif.sics.utentes", "IdentificacaoUtenteModuleLocal");
    }

    /* Container's getter's */
    public DetalheUtenteImpl getDetalheUtente() { return (DetalheUtenteImpl)findViewObject("DetalheUtente"); }
    public ListaAgregadoFamiliarImpl getListaAgregadoFamiliar() { return (ListaAgregadoFamiliarImpl)findViewObject("ListaAgregadoFamiliar"); }
    public ListaCodigosHierarquicosLovImpl getListaPaisesLov() { return (ListaCodigosHierarquicosLovImpl)findViewObject("ListaPaisesLov"); }
    public ListaFamiliaImpl getListaFamilia() { return (ListaFamiliaImpl)findViewObject("ListaFamilia"); }
    public ListaUtentesImpl getListaUtentes() { return (ListaUtentesImpl)findViewObject("ListaUtentes"); }
    public ListaFamiliaImpl getDetalheFamilia() { return (ListaFamiliaImpl)findViewObject("DetalheFamilia"); }
    public ListaBeneficiosDoUtenteImpl getListaBeneficiosDoUtente() { return (ListaBeneficiosDoUtenteImpl)findViewObject("ListaBeneficiosDoUtente"); }
    public InscricaoActivaImpl getInscricaoActiva() { return (InscricaoActivaImpl)findViewObject("InscricaoActiva"); }
    public DistritosLovImpl getDistritosLov() { return (DistritosLovImpl)findViewObject("DistritosLov");  }

 
    // -- pesquisa de utentes
    public int listaUtentesAddWhereClause(Collection col, Number maxFS) {
        Iterator params = col.iterator();
        ListaUtentesImpl vo = this.getListaUtentes();
        vo.clearWhereState(); 
        vo.clearCache();
        vo.setMaxFetchSize(-1);
        
        String whereClause = "";
        String operador = "";
        String nomeCompleto = "";
        String idadeDe = "";
        String idadeAte = "";

        while (params.hasNext()) {
            Object[][] linha = (Object[][])params.next();
            String tipo = (String)linha[0][0];
            String nome = (String)linha[0][1];
            
           
            if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                vo.defineNamedWhereClauseParam(nome, null, null);
            }
      

            if (nome.equalsIgnoreCase("dta_nasc")) {
                java.util.Date valor = (java.util.Date)linha[0][2];
                oracle.jbo.domain.Date dtOra = new oracle.jbo.domain.Date(new java.sql.Date(valor.getTime()));
                operador = "=";
                vo.setNamedWhereClauseParam(nome, dtOra);
            } else if (nome.equalsIgnoreCase(("idade"))) {
                if (idadeDe.equalsIgnoreCase(""))
                    idadeDe = (String)linha[0][2];
                else
                    idadeAte = (String)linha[0][2];
            } else {
                String valor = (String)linha[0][2];
                if (tipo.equalsIgnoreCase("NUMBER")) {
                    Number num = new Number(0);
                    try {
                        num = new Number(valor);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    operador = "=";
                    vo.setNamedWhereClauseParam(nome, num);
                } else if (tipo.equalsIgnoreCase("STRING") && !nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    operador = "like";
                    vo.setNamedWhereClauseParam(nome, valor);
                } else if (nome.equalsIgnoreCase("NOMES_PROPRIOS") || nome.equalsIgnoreCase("APELIDOS")) {
                    // constroi nome completo para posterior definicao da where clause para procura por 'nomes_proprios' ou 'apelidos'
                    String sep = nomeCompleto.length() > 0 ? " " : "";
                    nomeCompleto = nomeCompleto + sep + valor;
                }

            }

            if (whereClause.length() > 0) {
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    whereClause = whereClause.concat(" AND " + nome + " " + operador + " :" + nome);
                }

            } else {
                if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && !nome.equalsIgnoreCase("APELIDOS") && !nome.equalsIgnoreCase("idade")) {
                    whereClause = whereClause.concat(nome + " " + operador + " :" + nome);
                }
            }

            if (operador.equalsIgnoreCase("LIKE")) {
                whereClause = whereClause.concat(" || '%'");
            }

        }

        // -- procurar por idade
        if (idadeDe.length() > 0) {
            if (whereClause.length() > 0) {
                if (idadeDe.length() > 0)
                    whereClause = whereClause.concat(" and idade >= " + idadeDe + " ");
                if (idadeAte.length() > 0)
                    whereClause = whereClause.concat(" and idade <= " + idadeAte + " ");
            } else {
                if (idadeDe.length() > 0)
                    whereClause = whereClause.concat(" idade >= " + idadeDe + " ");
                if (idadeAte.length() > 0 && whereClause.length() > 0)
                    whereClause = whereClause.concat(" and idade <= " + idadeAte + " ");
            }
        }

        if (nomeCompleto.length() > 0) {
            if (whereClause.length() > 0) {
                whereClause = whereClause.concat(" and iiu_id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
            } else {
                whereClause = whereClause.concat(" iiu_id in ( select column_value from table(geral_manual.procura_nome(:nome)))");
            }
            vo.defineNamedWhereClauseParam("nome", null, null);
            vo.setNamedWhereClauseParam("nome", nomeCompleto);
        }
       
        // limitar registos a 100
        if(!maxFS.isZero()){
            if (whereClause.length() > 0) {
                whereClause = whereClause.concat(" and rownum < " + maxFS );
            } else {
                whereClause = whereClause.concat(" rownum < " + maxFS );
            }
        }
        
        vo.setWhereClause(whereClause);
        vo.executeQuery();
        return vo.getRowCount();
    }

    // obtem benefícios de medicação especial - Iterador = ListaBeneficiosDoUtente
    public void listaBeneficiosUtenteAddWhereClause(String idUtente) throws Exception {
        try{
            String whereclause = "";
            ListaBeneficiosDoUtenteImpl vo = this.getListaBeneficiosDoUtente();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            whereclause = "idu_ident_ut_id = " + idUtente;
            whereclause = whereclause.concat(" AND cod_benef NOT IN ('R','I') AND data_fim is NULL ");
            vo.setWhereClause(whereclause);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter lista de beneficios de Medicação Especial do utente", e);
          throw e;
        }
    }
  
    // -- validar beneficiario para a entidade
    public boolean validaBenificiario(String benef, 
                                      String entidade) throws Exception {
        boolean retVal = true;
        DBTransaction con = null;
        CallableStatement cStatement = null;
        StringBuffer sb = new StringBuffer("");
        try{
            if(benef.length() >0 && entidade.length() > 0){
                retVal = false;
                log.debug("vai validar beneficiário " + benef + " para a entidade " + entidade );
                sb.append("{ ? = call IDU.valida_benef(?,?) }");
                con = this.getDBTransaction();
                cStatement = con.createCallableStatement(sb.toString(), 1);
                cStatement.registerOutParameter(1, Types.NUMERIC);
                cStatement.setString(2, entidade);
                cStatement.setString(3, benef);
                cStatement.execute();
                int result = cStatement.getInt(1);
                if(result > 0){
                    retVal = true;
                }
            }
        } catch(Exception e){
          log.error("Erro ao validar beneficiário", e);
          throw new Exception("Erro ao validar beneficiário");
        } finally {
            try{
                if(cStatement!=null) cStatement.close();
            } catch(Exception e){log.error("Erro ao devolver CallableStatement",e);}
        }
        return retVal;
    }
    
 
  
    
    // método para validação de número de documento para determinado tipo de documento
    public boolean validarDocumento(char tipo, String numero) throws Exception {
        ResultSet rs = null;
        Statement stmt = null;
        boolean retVal = true;
        if(numero.length()>0){
            retVal = false;
            log.info("vai validar documento do tipo " + tipo + " com o número: " + numero);
            try  {
                StringBuffer sb = new StringBuffer("");
                switch (tipo) {
                    case 'N': 
                          // validar NISS   
                          sb.append(" select IDU.VALIDA_DOCUMENTO('N', '").append(numero).append("') from dual ");
                          break;
                    case 'F':
                          // validar NIF
                          sb.append("select IDU.VALIDA_DOCUMENTO('N', '").append(numero).append("') from dual ");  
                          break;
                    default: 
                        throw new Exception("Tipo de documento para validação desconhecido.");
                }
            
                stmt = this.getDBTransaction().createStatement(1);
                log.debug("query<" + sb.toString() + ">");
                rs = stmt.executeQuery(sb.toString());
                if(rs.next()){
                    int r = rs.getInt(1);
                    if(r==0){
                        retVal = false;
                    } else {
                        retVal = true;
                    } 
                }
                
            } catch (Exception ex)  {
              log.error("Erro ao validar documento ", ex);
              throw new Exception("Erro ao validar documento: " + ex.getMessage());
            } finally  {
              if (rs!=null)  {
                try  {
                    rs.close();
                } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
              }
                if (stmt!=null)  {
                  try  {
                      stmt.close();
                  } catch (Exception ex) {log.error("Erro ao devolver CallableStatement",ex);} 
                }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia na RNU de documentos
    public boolean existeDocumentoRNU(String tipoId, String numero, String idUtente) throws Exception {  
        boolean retVal = false;
        if(tipoId.length()>0 && numero.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where scg_tipobi_id = ").append(tipoId).append(" ").
                    append("and bi = '").append(numero).append("' ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar documento ", ex);
              throw new Exception("Erro ao validar documento: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia de NIF na RNU
    public boolean existeNif(String nif, String idUtente) throws Exception {  
        boolean retVal = false;
        if(nif.length()>0 && idUtente.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where nif = ").append(nif).append(" ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar nif ", ex);
              throw new Exception("Erro ao validar nif: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
            }
        }
        return retVal;
    }
    
    //-- verifica existencia de NISS na RNU
    public boolean existeNiss(String niss, String idUtente) throws Exception {  
        boolean retVal = false;
        if(niss.length()>0 && idUtente.length()>0){
            StringBuffer sb = new StringBuffer("");
            ResultSet rs = null;
            PreparedStatement ps = null;
           
            try{
                sb.append("select count(*) ").
                    append("from idu_ident_ut ").
                    append("where niss = ").append(niss).append(" ").
                    append("and id not in (").append(idUtente).append(") ");
                ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
                rs = ps.executeQuery();
                if (rs.next()) {
                   int result = rs.getInt(1);
                   if(result>0){
                    retVal = true;
                   }
                }
            } catch (Exception ex)  {
              log.error("Erro ao validar niss ", ex);
              throw new Exception("Erro ao validar niss: " + ex.getMessage());
            } finally  {
                 if (rs!=null)  {
                   try  {
                       rs.close();
                   } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
                 }
            }
        }
        return retVal;
    }

   
    
   
    
    /* 
     * método para pesquisar processos de famílias 
     * @descriçao: caso o seja fornecido o @param:idFamilia apenas executa a query por esse parâmetro, 
     *             caso contrario incluir no filtro das famílias os retantes parâmetros  
     * */
    public void listaFamiliasAddWhereClause(String idFamilia) throws Exception {
        listaFamiliasAddWhereClause(idFamilia,"","","","","","","","","","","","","","","","","",0);
    }
    public void listaFamiliasAddWhereClause(String idFamilia,       // id_familia
                                            String nProcPFam,       // procfam
                                            String idPFamVia,       // id_tp_rua
                                            String ruaPFam,         // rua
                                            String idPFamEdificio,  // id_tp_porta
                                            String portaPFam,       // porta
                                            String andarPFam,       // andar
                                            String idPFamLado,      // id_tp_andar
                                            String lugarPFam,       // lugar
                                            String localidadePFam,  // localidade
                                            String idPFamDistrito,  // distrito_id
                                            String idPFamConcelho,  // concelho_id
                                            String idPFamFreguesia, // freguesia_id
                                            String codPostPFam,     // cod_postal 
                                            String seqPostalPFam,   // seq_postal
                                            String lugarPostalPFam, // loc_postal
                                            String idCodPostPFam,   // id_cod_postal
                                            String cSaude,          // id_csaude
                                            int numMaxRegistos) throws Exception {
        try{
            
            ListaFamiliaImpl vo = this.getListaFamilia();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            
            String whereClause = "";
            if(idFamilia.length()>0){
                whereClause = whereClause.concat(" id_familia = ").concat(idFamilia);  
            } else {
                
                // número de processo de família
                whereClause = concatWhereClause("procfam", "=", nProcPFam, whereClause, false); 
                
                // tipo de rua
                whereClause = concatWhereClause("id_tp_rua", "=", idPFamVia, whereClause, false); 
                
                // rua
                whereClause = concatWhereClauseNormalized("rua", ruaPFam, whereClause); 
                
                // tipo porta
                whereClause = concatWhereClause("id_tp_porta", "=", idPFamEdificio, whereClause, false);
                
                // porta
                whereClause = concatWhereClauseNormalized("porta", portaPFam, whereClause);
                
                // andar
                whereClause = concatWhereClauseNormalized("andar", andarPFam, whereClause);
                
                // tipo andar
                whereClause = concatWhereClause("id_tp_andar", "=", idPFamLado, whereClause, false);
                
                // lugar
                whereClause = concatWhereClauseNormalized("lugar", lugarPFam, whereClause);
                
                // localidade
                whereClause = concatWhereClauseNormalized("localidade", localidadePFam, whereClause);
                
                // distrito
                whereClause = concatWhereClause("distrito_id", "=", idPFamDistrito, whereClause, false);
                
                // concelho
                whereClause = concatWhereClause("concelho_id", "=", idPFamConcelho, whereClause, false);
                
                // freguesia
                whereClause = concatWhereClause("freguesia_id", "=", idPFamFreguesia, whereClause, false);
                
                if(idCodPostPFam.length()>0){
                    // id código postal
                    whereClause = concatWhereClause("id_cod_postal", "=", idCodPostPFam, whereClause, false);
                } else {
                    // código postal
                    whereClause = concatWhereClause("cod_postal", "=", codPostPFam, whereClause, false);
                    
                    // sequencia postal
                    whereClause = concatWhereClause("seq_postal", "=", seqPostalPFam, whereClause, false);
                    
                    // localidade postal
                    whereClause = concatWhereClause("loc_postal", "like", lugarPostalPFam, whereClause, true);
                }
   
                // centro de saúde
                whereClause = concatWhereClause("id_csaude", "=", cSaude, whereClause, false);
                
                // restringuir resultados ao número máximo fornecido
                if(numMaxRegistos>0){
                    if (whereClause.length() > 0) {
                        whereClause = whereClause.concat(" AND rownum < " + numMaxRegistos);
                    } else {
                        whereClause = whereClause.concat(" rownum < " + numMaxRegistos);
                    }
                }
                
            }

            vo.setWhereClause(whereClause);
            // ordenar registos obtidos
            vo.setOrderByClause(" procfam, morada_completa ");
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao pesquisar familias", e);
          throw new Exception("Erro ao pesquisar familias: " + e.getMessage());
        }
    }
    
    public void detalheFamilia(String idFamilia) throws Exception {
        log.debug("vai obter detalhe de família com o identificador " + idFamilia);
        try{
            ListaFamiliaImpl vo = this.getDetalheFamilia();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("id_Familia = " + idFamilia);
            vo.executeQuery();
        } catch(Exception e){
          log.error("Erro ao obter detalhe de Família", e);
          throw new Exception("Erro ao obter detalhe de Família: " + e.getMessage());
        }
    }
    
    // -- obtem lista de agregado para uma dada família
    public void edicaoUtenteListaAgregadoFamiliarAddWhereClause(String idFamilia) throws Exception {
        try  {
            ListaAgregadoFamiliarImpl vo = this.getListaAgregadoFamiliar();
            if(idFamilia.length()>0){
                log.debug("vou obter agregado para a família " + idFamilia);
                vo.clearWhereState(); 
                vo.clearCache();
                vo.setMaxFetchSize(-1);
                vo.setWhereClause("idu_familia_id = " + idFamilia +" AND ihf_data_fim IS NULL ");
                vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
                vo.executeQuery();
            }
        } catch (Exception ex)  {
          log.error("Erro ao obter agregado famíliar para a família " + idFamilia ,ex);
          throw new Exception("Erro ao obter agregado de família:" + ex.getMessage());
        }
    }
    
    // -- obtem lista de graus de parentescos ja atribuidos por familia
    public String[] getParentescosAtribuidos(String idFamilia) throws Exception {
        String[] retVal = new String[2];
        retVal[0] = "";
        retVal[1] = "";
        ResultSet rSet = null;
        PreparedStatement pStatement = null;
        boolean existeAgregado = false;
        try  {
            StringBuffer sb = new StringBuffer("");
            sb.append("SELECT hf.SCG_PARENTESCO_ID, cg.DESCRICAO ").
            append("     FROM idu_hist_familia hf, ").
            append("          sys_cod_genericos cg ").
            append("    WHERE hf.idu_familia_id = ").append(idFamilia).
            append("      and hf.scg_parentesco_id = cg.ID ").
            append("      and data_fim is null ").
            append(" ORDER BY cg.codigo ");
            pStatement = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rSet = pStatement.executeQuery();
            String separador = "";
            while (rSet.next()) {
                existeAgregado = true;
                retVal[0] += separador + rSet.getString(1);
                retVal[1] += separador + rSet.getString(2);
                separador = ", ";
            }
            
            if(!existeAgregado){
                retVal[0] = "0";
                retVal[1] = "familia sem agregado atribuído.";
            }
        } catch (Exception ex)  {
          log.error("Erro ao obter graus de parentesco ja atribuidos para a família " + idFamilia ,ex);
          throw new Exception("Erro ao obter graus de parentesco ja atribuidos para a família:" + ex.getMessage());
        } finally {
            try  {
                if(rSet!=null) rSet.close();
            } catch (Exception ex) {log.error("Erro ao devolver resultSet",ex);} 
            try  {
                if(pStatement!=null) pStatement.close();
            } catch (Exception ex) {log.error("Erro ao devolver PreparedStatement",ex);} 
        }
        log.debug("ids de parentescos ja atribuidos para a família " + idFamilia +": <" + retVal[0] + ">");
        log.debug("descrições de parentescos ja atribuidos para a família " + idFamilia +": <" + retVal[1] + ">");
        return retVal;
    }
    
    
    // metodo para incluir clausula usando pesquisa em nome normalizado
    // nota: ter en atenção criar indice de função + coluna da tabela a pesquisar para optimizar a procura
    private String concatWhereClauseNormalized(String column, String value, String whereClause) throws Exception { 
        if(column.length()>0 && value.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause.concat(" AND ");
            }
            whereClause = whereClause.concat(" GERAL.NORMALIZA_NOME(").concat(column).concat(") like GERAL.NORMALIZA_NOME('%' || '").concat(value).concat("' || '%')");
        }
        return whereClause;
    }
    
    private String concatWhereClause(String column, String operator, String value, String whereClause, boolean useUpper) throws Exception {  
        if(column.length()>0 && value.length()>0){
            if(whereClause.length()>0){
                whereClause = whereClause.concat(" AND ");
            }
            if(operator.equalsIgnoreCase("like")){
                value = "%" + value.replace(' ', '%') + "%";
                
                if(useUpper){
                    whereClause = whereClause.concat(" UPPER(");
                }
                whereClause = whereClause.concat(column);
                if(useUpper){
                    whereClause = whereClause.concat(") ");
                }
                
                whereClause = whereClause.concat(operator);
                
                if(useUpper){
                    whereClause = whereClause.concat(" UPPER('");
                }
                whereClause = whereClause.concat(value);
                if(useUpper){
                    whereClause = whereClause.concat("') ");
                }
            
            } else {
                whereClause = whereClause.concat(" " + column + operator + value);
            }   
        }
        return whereClause;
    }
    
  
  
    
    // -- validar se utente pode ter beneficio
    // TODO: #### nova implementação
    public boolean utentePodeTerBeneficio(String idUtente, String idBeneficio) throws Exception {
        boolean retVal = true;
        PreparedStatement ps = null;
        StringBuffer sb = new StringBuffer("");
        ResultSet rs = null;
        try{
            if(idUtente!=null){
                if(idUtente.length() >0){

                    log.debug("vai verificar se utente com o id " + idUtente + " pode ter o beneficio " +  idBeneficio);
                    
                    // obter query de regra
                    sb.append("SELECT spp.sqltext ").
                    append("     FROM idu_benef_ut b, ").
                    append("          idu_benef_regras r, ").
                    append("          sys_parametros_pesquisas spp ").
                    append("    WHERE b.id = ").append(idBeneficio).
                    append("      AND b.id = r.idu_benef_ut_id ").
                    append("      AND r.spp_id = spp.id ").
                    append("      AND r.tipo_regra = 'V' "); // apenas regras de validação
                        
                    ps = this.getDBTransaction().createCallableStatement(sb.toString(), 1);
                    rs = ps.executeQuery();
                    if(rs.next()){
                        
                        // apenas se tiver regra definida e que devolve true/false consuante o resultado do sqltext
                        // caso contrario devolve sempre true
                        retVal = false;
                        
                        String sqltext = rs.getString(1);
                        if(sqltext!=null){
                            if(sqltext.length()>0){
                                
                                // replace IDU_IDENT_UT_ID pelo parametro do id utente
                                sqltext = sqltext.replaceAll(":IDU_IDENT_UT_ID", idUtente);
                                log.debug("SQLTEXT: <"+ sqltext + ">");
                                
                                // executar sqltext
                                ps = this.getDBTransaction().createCallableStatement(sqltext, 1);
                                rs = ps.executeQuery();
                                if(rs.next()){
                                    retVal = true;
                                }
                            }
                        }
                    }
                }
            }
        } catch(Exception e){
          log.error("erro ao verificar se utente pode ter benefício ", e);
          throw new Exception("erro ao verificar se utente pode ter benefício ");
        } finally {
            try{
                if(rs!=null){
                    rs.close();
                }
            } catch(Exception e){}
            try{
                if(ps!=null){
                    ps.close();
                }
            } catch(Exception e){}
        }
        
        return retVal;
    }
    
   
    public String obtemIdInscricaoActiva(String idUtente) throws Exception{
        String retVal = "";
        ResultSet rs = null;
        PreparedStatement ps = null;
        try{
            StringBuffer sb = new StringBuffer("");
            sb.append(" select id from idu_inscr where idu_ident_ut_id = ").append(idUtente).append(" and data_fim is null ");
            ps = this.getDBTransaction().createPreparedStatement(sb.toString(), 1);
            rs = ps.executeQuery();
            if (rs.next()) {
                String id = rs.getString(1);
                if(id!=null){
                    if(id.length()>0){
                        retVal = id;
                    }
                }
            }
        } catch(Exception e){
          log.error("",e); 
          try {
            rs.close();
          } catch (Exception ex)  { } 
          try  {
            ps.close();
          } catch (Exception ex)  { } 
          throw new Exception("");
          
        }
        return retVal;
    }
      
    public void detalheUtenteAddWhereClause(String idUtente) throws Exception {
        try{
            ViewObjectImpl vo = (ViewObjectImpl)this.getDetalheUtente();
            vo.clearWhereState();
            if (idUtente == null) {
                idUtente = new String("");
            }
            if (idUtente.length() > 0 ) {
                    String whereClause = new String(" idi_id = ").concat(idUtente);
                    vo.setNamedWhereClauseParam("idUtente", idUtente);
                    vo.addWhereClause(whereClause);
                    vo.setMaxFetchSize(-1);
                    vo.clearCache();
                    vo.executeQuery();
            } else {
                vo.setMaxFetchSize(0);
            }
        } catch(Exception t){
          log.error(t);
          throw t;
        }
    }
    
    public boolean isValidNiss(String niss) {
        log.debug("niss: <" + niss + ">");
        if(niss==null || niss.length()==0){
            return true;
        } else {
        
            boolean isNumber = isNumber(niss);
            if(!isNumber){
                return false;
            }
            
            CallableStatement validNiss = this.getDBTransaction().createCallableStatement("{? = call git.is_valid_niss_j2ee(?)}",1);
            
            int result;
            try {
                validNiss.registerOutParameter(1,Types.NUMERIC);
                
                validNiss.setObject(2,niss);
                validNiss.execute();
                result = validNiss.getInt(1);
                validNiss.close();
            } catch (SQLException e) {
                e.printStackTrace();
                result = 0;
            }
            if (result == 1) {
                return true;
            } else {
                return false;
            }
        }
    }
    
    public boolean isNumber(String niss){
        String caracter="";
        int inicio = 0;
        int fim = 1;
        
        for(int i=0; i<niss.length();i++){
            boolean numero = false;
            caracter = niss.substring(inicio,fim);
            inicio++;
            fim++;
            
            for(int j=0;j<10;j++){
                if(caracter.equals(j + "")){
                    numero = true;
                }
            }
            
            if(numero == false){
                return false;
            }
        }
        return true;
        
    }
    
    public int edicaoUtenteInscricaoActivaAddWhereClause(String idInscricao) {
            InscricaoActivaImpl vo = this.getInscricaoActiva();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            vo.setWhereClause("iin_id = " + idInscricao +" and data_fim is null and phe_data_fim is null ");
            vo.executeQuery();
            return 0;
    }
    
    public int listaUtentesDupAddWhereClause(Collection col) {
            int count = 0;
            try{
                Iterator params = col.iterator();
                ListaUtentesDupImpl vo = this.getListaUtentesDup();
                vo.clearWhereState();
                String whereClause = "";
                String operador = "";
        
                String nomeCompleto = "";
                String idadeDe = "";
                String idadeAte = "";
        
                while (params.hasNext()) {
                    Object[][] linha = (Object[][])params.next();
                    String tipo = (String)linha[0][0];
                    String nome = (String)linha[0][1];
        
                    if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                        !nome.equalsIgnoreCase("APELIDOS") && 
                        !nome.equalsIgnoreCase("idade")) {
                        vo.defineNamedWhereClauseParam(nome, null, null);
                    }
        
                    if (nome.equalsIgnoreCase("dta_nasc")) {
                        java.util.Date valor = (java.util.Date)linha[0][2];
                        oracle.jbo.domain.Date dtOra = 
                            new oracle.jbo.domain.Date(new java.sql.Date(valor.getTime()));
                        operador = "=";
                        vo.setNamedWhereClauseParam(nome, dtOra);
                    } else if (nome.equalsIgnoreCase(("idade"))) {
                        if (idadeDe.equalsIgnoreCase(""))
                            idadeDe = (String)linha[0][2];
                        else
                            idadeAte = (String)linha[0][2];
                    } else {
                        String valor = (String)linha[0][2];
                        if (tipo.equalsIgnoreCase("NUMBER")) {
                            Number num = new Number(0);
                            try {
                                num = new Number(valor);
                            } catch (Exception e) {
                              log.error(e);
                            }
                            operador = "=";
                            vo.setNamedWhereClauseParam(nome, num);
                        } else if (tipo.equalsIgnoreCase("STRING") && 
                                   !nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                                   !nome.equalsIgnoreCase("APELIDOS") && 
                                   !nome.equalsIgnoreCase("idade")) {
                            operador = "like";
                            vo.setNamedWhereClauseParam(nome, valor);
                        } else if (nome.equalsIgnoreCase("NOMES_PROPRIOS") || 
                                   nome.equalsIgnoreCase("APELIDOS")) {
                            // constroi nome completo para posterior definicao da where clause para procura por 'nomes_proprios' ou 'apelidos'
                            String sep = nomeCompleto.length() > 0 ? " " : "";
                            nomeCompleto = nomeCompleto + sep + valor;
                        }
        
                    }
        
                    if (whereClause.length() > 0) {
                        if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                            !nome.equalsIgnoreCase("APELIDOS") && 
                            !nome.equalsIgnoreCase("idade")) {
                            whereClause = 
                                    whereClause.concat(" AND " + nome + " " + operador + 
                                                       " :" + nome);
                        }
        
                    } else {
                        if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                            !nome.equalsIgnoreCase("APELIDOS") && 
                            !nome.equalsIgnoreCase("idade")) {
                            whereClause = 
                                    whereClause.concat(nome + " " + operador + " :" + 
                                                       nome);
                        }
                    }
        
                    if (operador.equalsIgnoreCase("LIKE")) {
                        whereClause = whereClause.concat(" || '%'");
                    }
        
                }
        
                // -- procurar por idade
                if (idadeDe.length() > 0) {
                    if (whereClause.length() > 0) {
                        if (idadeDe.length() > 0)
                            whereClause = 
                                    whereClause.concat(" and idade >= " + idadeDe + 
                                                       " ");
                        if (idadeAte.length() > 0)
                            whereClause = 
                                    whereClause.concat(" and idade <= " + idadeAte + 
                                                       " ");
                    } else {
                        if (idadeDe.length() > 0)
                            whereClause = 
                                    whereClause.concat(" idade >= " + idadeDe + " ");
                        if (idadeAte.length() > 0 && whereClause.length() > 0)
                            whereClause = 
                                    whereClause.concat(" and idade <= " + idadeAte + 
                                                       " ");
                    }
                }
        
                if (nomeCompleto.length() > 0) {
                    if (whereClause.length() > 0) {
                        whereClause = 
                                whereClause.concat(" and iiu_dup_id in ( select column_value from table(geral_manual.procura_nome_dup(:nome)))");
                        // whereClause = whereClause.concat(" and row_id in ( select column_value from table(geral_manual.procura_nome_rowid(:nome)))"); 
                    } else {
                        whereClause = 
                                whereClause.concat(" iiu_dup_id in ( select column_value from table(geral_manual.procura_nome_dup(:nome)))");
                        // whereClause = whereClause.concat(" row_id in ( select column_value from table(geral_manual.procura_nome_rowid(:nome)))"); 
                    }
                    vo.defineNamedWhereClauseParam("nome", null, null);
                    vo.setNamedWhereClauseParam("nome", nomeCompleto);
                }
        
                vo.setWhereClause(whereClause);
                vo.clearCache();
                vo.setMaxFetchSize(-1);
                vo.executeQuery();
             
                params = null;
                params = col.iterator();
                while (params.hasNext()) {
                    Object[][] linha = (Object[][])params.next();
                    String nome = (String)linha[0][1];
                    if (!nome.equalsIgnoreCase("NOMES_PROPRIOS") && 
                        !nome.equalsIgnoreCase("APELIDOS") && 
                        !nome.equalsIgnoreCase("idade")) {
                        vo.removeNamedWhereClauseParam(nome);
                    }
                }
        
                if (nomeCompleto.length() > 0) {
                    vo.removeNamedWhereClauseParam("nome");
                }
        
                vo.setWhereClause(null);
                count = vo.getRowCount();
            
            } catch(Throwable t){
              log.error(t);
              return -1;
            }
            return count;
        }

    /**Container's getter for ListaUtentesDup
     */
    public ListaUtentesDupImpl getListaUtentesDup() {
        return (ListaUtentesDupImpl)findViewObject("ListaUtentesDup");
    }



    public void getListaDistritos() throws Exception {
        log.debug("ora.pt.cons.igif.sics.utentes.IdentificacaoModuleImpl.getDistritosLov vai obter lista de distritos");
        try{
            DistritosLovImpl vo = this.getDistritosLov();
            vo.clearWhereState(); 
            vo.clearCache();
            vo.setMaxFetchSize(-1);
            vo.executeQuery();
        } catch(Exception e){
          log.error("ora.pt.cons.igif.sics.utentes.IdentificacaoModuleImpl.getDistritosLov -Erro ao obter lista de distritos", e);
          throw new Exception("Erro ao obter lista de distritos:" + e.getMessage());
        }
    }
}

