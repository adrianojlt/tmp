// !DO NOT EDIT THIS FILE!
// This source file is generated by Oracle tools
// Contents may be subject to change
// For reporting problems, use the following
// Version = Oracle WebServices (10.1.3.1.0, build 061008.0900.00025)

package ora.pt.cons.igif.services.proxy.federacao.runtime;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.StringWriter;

import oracle.j2ee.ws.common.streaming.*;
import oracle.j2ee.ws.common.encoding.*;
import oracle.j2ee.ws.common.soap.SOAPEncodingConstants;
import oracle.j2ee.ws.common.encoding.literal.*;
import oracle.j2ee.ws.common.soap.streaming.*;
import oracle.j2ee.ws.common.soap.message.*;
import oracle.j2ee.ws.common.soap.SOAPVersion;
import oracle.j2ee.ws.common.soap.SOAPEnvelopeConstants;
import oracle.j2ee.ws.common.wsdl.document.schema.SchemaConstants;
import oracle.j2ee.ws.common.util.exception.JAXRPCExceptionBase;
import oracle.j2ee.ws.common.util.SoapWithAttachmentsUtil;
import javax.xml.namespace.QName;
import java.rmi.RemoteException;
import java.util.Iterator;
import java.lang.reflect.*;

import java.net.URI;

import oracle.j2ee.ws.client.*;
import oracle.j2ee.ws.client.http.*;
import oracle.webservices.transport.*;
import oracle.webservices.*;
import oracle.webservices.attachments.*;
import javax.xml.rpc.handler.*;
import javax.xml.rpc.JAXRPCException;
import javax.xml.rpc.soap.SOAPFaultException;
import javax.xml.soap.SOAPElement;

import ora.pt.cons.igif.services.proxy.federacao.AttributedURI;

import oracle.xml.parser.v2.XMLElement;

import org.w3c.dom.Document;

public class IDFedValidateWellKnownFactsResponsePortBinding_Stub
    extends oracle.j2ee.ws.client.StubBase
    implements ora.pt.cons.igif.services.proxy.federacao.IDFedValidateWellKnownFactsResponseType {
    
    
    /*
     *  public constructor
     */
    public IDFedValidateWellKnownFactsResponsePortBinding_Stub(HandlerChain handlerChain) {
        super(handlerChain);
        //PRODUCAO
        //_setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://toolkitsaude:80/Saude/"); 
        
        //TESTES
        _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://toolkitsaude_testes:80/Saude/"); 
        
        //ANTIGO
        // _setProperty(ENDPOINT_ADDRESS_PROPERTY, "http://toolkitsaude:80/gw/dynamicgateway/IDFedValidateWellKnownFactsResponse");
        setSoapVersion(SOAPVersion.SOAP_11);
        setServiceName( new QName("http://dynamicgateway.fsc.pt.gov.interop/","IDFedValidateWellKnownFactsResponseService"));
        setPortName( new QName("http://dynamicgateway.fsc.pt.gov.interop/","IDFedValidateWellKnownFactsResponsePort"));
        setupConfig("ora/pt/cons/igif/services/proxy/federacao/runtime/IDFedValidateWellKnownFactsResponsePortBinding_Stub.xml");
    }
    
    /*
     *  implementation of IDFedValidateWellKnownFactsResponse
     */
    public void IDFedValidateWellKnownFactsResponse(javax.xml.soap.SOAPElement IDFedValidateWellKnownFactsResponseParameters)
         {
        
        StreamingSenderState _state = null;
        String h = null;
        String p = null;
        String s = null;
        try {
            //carla inicio
            String sMessageId = null;
            String sTo = null;
            String sAction = null;
            String sRelatesTo = null;
            
            Iterator i = null;
            SOAPElement header = null;
            SOAPElement el = null;
            String headerValue = null;
            String headerName = null;
            Object o = null;
            
            //System.out.println("TRATAR MENSAGEM");
            
            i = IDFedValidateWellKnownFactsResponseParameters.getParentElement().getParentElement().getChildElements();
            while(i.hasNext()){
               o = i.next();     
               if(o.getClass().getName().indexOf("Header") >= 0){
                   header = (SOAPElement) o;
                   break;
               }                   
            }
            i = header.getChildElements();
            while(i.hasNext()){
               o = i.next();
               if(o instanceof SOAPElement){
                   el = (SOAPElement) o;
                   headerName = el.getNodeName();
                   headerValue = el.getValue();
                   if(headerName.toUpperCase().indexOf("RELATESTO") >= 0){
                       sRelatesTo = headerValue;
                   }else if(headerName.toUpperCase().indexOf("MESSAGEID") >= 0){
                       sMessageId = headerValue;
                   }else if(headerName.toUpperCase().indexOf("ACTION") >= 0){
                       sAction = headerValue;
                   }else if(headerName.toUpperCase().indexOf("TO") >= 0){
                       if(!(headerName.toUpperCase().indexOf("RELATESTO") >= 0)){
                           sTo = headerValue;
                       }
                   }                    
               }
            }
            //carla fim
            
             try{            
                 Document d = IDFedValidateWellKnownFactsResponseParameters.getOwnerDocument();
                 StringWriter stringWriter = new StringWriter();
                 ((XMLElement) d.getDocumentElement()).print(stringWriter);            
                 s = stringWriter.toString();
             }catch (Exception e){

             }
             
             
            _state = _start(_handlerChain);
            if (_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS) != null) {
                _state.getMessageContext().getMessage().setProperty("DimeEncode",_getProperty(ClientConstants.DIME_ENCODE_MESSAGES_WITH_ATTACHMENTS));
            }
            
            InternalSOAPMessage _request = _state.getRequest();
            _request.setOperationCode(IDFedValidateWellKnownFactsResponse_OPCODE);
            _state.getMessageContext().setProperty("oracle.j2ee.ws.mgmt.interceptor.operation-qname",new QName("","IDFedValidateWellKnownFactsResponse"));
            
            SOAPHeaderBlockInfo _headerInfo;
            try{
                _headerInfo = new SOAPHeaderBlockInfo(ns1_MessageID_QNAME, null, false);
                AttributedURI messageID = new AttributedURI();
                messageID.set_value(new URI(sMessageId));
                _headerInfo.setValue(messageID);
                _headerInfo.setSerializer(myns1_AttributedURI__AttributedURI_LiteralSerializer);
                _request.add(_headerInfo);   
            }catch (Exception e1){
                
            }
            try{
                _headerInfo = new SOAPHeaderBlockInfo(ns1_RelatesTo_QNAME, null, false);
                AttributedURI relatesTo = new AttributedURI();
                relatesTo.set_value((new URI(sRelatesTo)));
                _headerInfo.setValue(relatesTo);
                _headerInfo.setSerializer(myns1_AttributedURI__AttributedURI_LiteralSerializer);
                _request.add(_headerInfo);
            }catch (Exception e1){
            
            }
            
            try{
                _headerInfo = new SOAPHeaderBlockInfo(ns1_Action_QNAME, null, false);
                AttributedURI action = new AttributedURI();
                action.set_value(new URI(sAction));
                _headerInfo.setValue(action);
                _headerInfo.setSerializer(myns1_AttributedURI__AttributedURI_LiteralSerializer);
                _request.add(_headerInfo);
            }catch (Exception e1){
            
            }
            
            try{
                _headerInfo = new SOAPHeaderBlockInfo(ns1_To_QNAME, null, false);
                AttributedURI to = new AttributedURI();
                to.set_value(new URI(sTo));
                _headerInfo.setValue(to);
                _headerInfo.setSerializer(myns1_AttributedURI__AttributedURI_LiteralSerializer);
                _request.add(_headerInfo);
            }catch (Exception e1){
            
            }
            
            SOAPBlockInfo _bodyBlock = new SOAPBlockInfo(ns1_IDFedValidateWellKnownFactsResponse_IDFedValidateWellKnownFactsResponse_QNAME);
            _bodyBlock.setValue(IDFedValidateWellKnownFactsResponseParameters);
            _bodyBlock.setSerializer(ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAMEjavax$2e$xml$2e$soap$2e$SOAPElement_Serializer);
            _request.setBody(_bodyBlock);
            
            _state.getMessageContext().setProperty("http.soap.action", "http://dynamicgateway.fsc.pt.gov.interop/IDFedValidateWellKnownFactsResponse");
            
            try {
                //BufferedWriter bw = new BufferedWriter(new FileWriter(new File("c:\\proxy_fed.log"),true));
                BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/oracle/product/10.1.3/proxy_fed.log"),true));
                bw.newLine();
                bw.write("<-- -->");
                bw.newLine();
                bw.write("<-- Incoming Payload -->");
                bw.newLine();
                bw.write(s);
                bw.newLine();
                /*
                bw.write("<-- Extracted RelatesTo -->");
                bw.newLine();
                bw.write(h);
                bw.newLine();
                */
                bw.flush();
                bw.close();
                bw = null;
            }catch (Exception e) {
                
            }finally {
                
            }
            //System.out.println("VOU CHAMAR WS");
                        
            _sendOneWay((String) _getProperty(ENDPOINT_ADDRESS_PROPERTY), _state);
        } catch (JAXRPCException e) {
            // let this one through unchanged, one-way operation
             try {
             
                //PRODUCAO
                 //BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/oracle/product/10.1.3/proxy_fed.err"),true));
                 
                 //TESTES
                 BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/oracle/product/10.1.3.1/proxy_fed.err"),true));
                 
                 //BufferedWriter bw = new BufferedWriter(new FileWriter(new File("c:\\proxy_fed.err"),true));
                 bw.newLine();
                 java.util.Date date = new java.util.Date();
                 bw.write("<-- Erro " + date.toString() + " -->");
                 bw.newLine();
                
                 bw.write(e.getMessage());
                 StackTraceElement[] ste = e.getStackTrace();
                 bw.newLine();
                 for(int i  = 0 ; i < ste.length ; i++){
                     bw.write(ste[i].toString());
                     bw.newLine();
                 }
                 bw.newLine();
                 bw.flush();
                 bw.close();
                 bw = null;
             }catch (Exception ex) {
                
             }finally {
                
             }
            throw e;
        } catch (Exception e) {
            try {
                
                //PRODUCAO
                //BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/oracle/product/10.1.3/proxy_fed.err"),true));
                
                //TESTES
                BufferedWriter bw = new BufferedWriter(new FileWriter(new File("/oracle/product/10.1.3.1/proxy_fed.err"),true));
                                 
                                 
                //BufferedWriter bw = new BufferedWriter(new FileWriter(new File("c:\\proxy_fed.err"),true));
                bw.newLine();
                java.util.Date date = new java.util.Date();
                bw.write("<-- Erro " + date.toString() + " -->");
                bw.newLine();
               
                bw.write(e.getMessage());
                StackTraceElement[] ste = e.getStackTrace();
                bw.newLine();
                for(int i  = 0 ; i < ste.length ; i++){
                    bw.write(ste[i].toString());
                    bw.newLine();
                }
                bw.newLine();
                bw.flush();
                bw.close();
                bw = null;
            }catch (Exception ex) {
               
            }finally {
               
            }
            if (e instanceof RuntimeException) {
                throw (RuntimeException)e;
            }
        }
    }
    
    
    /*
     *  this method deserializes the request/response structure in the body
     */
    protected void _readFirstBodyElement(XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState  state) throws Exception {
        int opcode = state.getRequest().getOperationCode();
        switch (opcode) {
            default:
                throw new SenderException("sender.response.unrecognizedOperation", Integer.toString(opcode));
        }
    }
    
    protected boolean _readHeaderElement(SOAPHeaderBlockInfo headerInfo, XMLReader headerReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        if (headerInfo.getName().equals(ns1_RelatesTo_QNAME)) {
            _deserialize_ns1_RelatesTo(headerInfo, headerReader, deserializationContext, state);
            if (headerInfo.getValue() instanceof Exception) {
                 throw (Exception)headerInfo.getValue();
            }return true;
        } 
        //Carla inicio
        else if (headerInfo.getName().equals(ns1_MessageID_QNAME)) {
            _deserialize_ns1_MessageID(headerInfo, headerReader, deserializationContext, state);
            if (headerInfo.getValue() instanceof Exception) {
                 throw (Exception)headerInfo.getValue();
            }return true;
        }
        else if (headerInfo.getName().equals(ns1_Action_QNAME)) {
            _deserialize_ns1_Action(headerInfo, headerReader, deserializationContext, state);
            if (headerInfo.getValue() instanceof Exception) {
                 throw (Exception)headerInfo.getValue();
            }return true;
        }
        else if (headerInfo.getName().equals(ns1_To_QNAME)) {
            _deserialize_ns1_To(headerInfo, headerReader, deserializationContext, state);
            if (headerInfo.getValue() instanceof Exception) {
                 throw (Exception)headerInfo.getValue();
            }return true;
        }
        //Carla fim
            
        headerReader.skipElement();
        return false;
    }    
    
    private void _deserialize_ns1_RelatesTo(SOAPHeaderBlockInfo headerInfo, XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        QName elementName = bodyReader.getName();
        if (elementName.equals(ns1_RelatesTo_QNAME)) {
            AttributedURI obj =
                (AttributedURI)myns1_AttributedURI__AttributedURI_LiteralSerializer.deserialize(ns1_RelatesTo_QNAME, bodyReader, deserializationContext);
            headerInfo.setValue(obj);
            state.getResponse().add(headerInfo);
        } else {
            // the QName of the header is not what we expected and not a fault either
            throw new SOAPProtocolViolationException("soap.unexpectedHeaderBlock", elementName.getLocalPart());
        }
    }
    
    //carla inicio
     private void _deserialize_ns1_MessageID(SOAPHeaderBlockInfo headerInfo, XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
         QName elementName = bodyReader.getName();
         if (elementName.equals(ns1_MessageID_QNAME)) {
             AttributedURI obj =
                 (AttributedURI)myns1_AttributedURI__AttributedURI_LiteralSerializer.deserialize(ns1_MessageID_QNAME, bodyReader, deserializationContext);
             headerInfo.setValue(obj);
             state.getResponse().add(headerInfo);
         } else {
             // the QName of the header is not what we expected and not a fault either
             throw new SOAPProtocolViolationException("soap.unexpectedHeaderBlock", elementName.getLocalPart());
         }
     }
        
    private void _deserialize_ns1_Action(SOAPHeaderBlockInfo headerInfo, XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        QName elementName = bodyReader.getName();
        if (elementName.equals(ns1_Action_QNAME)) {
            AttributedURI obj =
                (AttributedURI)myns1_AttributedURI__AttributedURI_LiteralSerializer.deserialize(ns1_Action_QNAME, bodyReader, deserializationContext);
            headerInfo.setValue(obj);
            state.getResponse().add(headerInfo);
        } else {
            // the QName of the header is not what we expected and not a fault either
            throw new SOAPProtocolViolationException("soap.unexpectedHeaderBlock", elementName.getLocalPart());
        }
    }
    
    private void _deserialize_ns1_To(SOAPHeaderBlockInfo headerInfo, XMLReader bodyReader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
        QName elementName = bodyReader.getName();
        if (elementName.equals(ns1_To_QNAME)) {
            AttributedURI obj =
                (AttributedURI)myns1_AttributedURI__AttributedURI_LiteralSerializer.deserialize(ns1_To_QNAME, bodyReader, deserializationContext);
            headerInfo.setValue(obj);
            state.getResponse().add(headerInfo);
        } else {
            // the QName of the header is not what we expected and not a fault either
            throw new SOAPProtocolViolationException("soap.unexpectedHeaderBlock", elementName.getLocalPart());
        }
    }
    
    //Carla fim
    
    
    
    
    
    public String _getEncodingStyle() {
        return SOAPEncodingConstants.getSOAPEncodingConstants(soapVersion).getURIEncoding();
    }
    
    public void _setEncodingStyle(String encodingStyle) {
        throw new UnsupportedOperationException("cannot set encoding style");
    }
    
    public ClientTransport getClientTransport() {
        return super._getTransport();
    }
    
    
    
    
    
    /*
     * This method returns an array containing (prefix, nsURI) pairs.
     */
    protected String[] _getNamespaceDeclarations() {
        return myNamespace_declarations;
    }
    
    /*
     * This method returns an array containing the names of the headers we understand.
     */
    public QName[] _getUnderstoodHeaders() {
        return understoodHeaderNames;
    }
    
    /*
     * This method handles the case of an empty SOAP body.
     */
    protected void _handleEmptyBody(XMLReader reader, SOAPDeserializationContext deserializationContext, StreamingSenderState state) throws Exception {
    }
    
    public void _initialize(InternalTypeMappingRegistry registry) throws Exception {
        super._initialize(registry);
        ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAMEjavax$2e$xml$2e$soap$2e$SOAPElement_Serializer = (CombinedSerializer)registry.getSerializer("", javax.xml.soap.SOAPElement.class, ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAME);
        myns1_AttributedURI__AttributedURI_LiteralSerializer = (CombinedSerializer)registry.getSerializer("", AttributedURI.class, ns1_AttributedURI_TYPE_QNAME);        
    }
    
    private static final QName _portName = new QName("http://dynamicgateway.fsc.pt.gov.interop/", "IDFedValidateWellKnownFactsResponsePort");
    private static final int IDFedValidateWellKnownFactsResponse_OPCODE = 0;
    private static final QName ns1_IDFedValidateWellKnownFactsResponse_IDFedValidateWellKnownFactsResponse_QNAME = new QName("http://www.interop.gov.pt/schemas/FedId/2010/01", "IDFedValidateWellKnownFactsResponse");
    private static final QName ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAME = new QName("http://www.interop.gov.pt/schemas/FedId/2010/01", "IDFedValidateWellKnownFactsResponse");
    //private static final QName ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAME = new QName("http://www.interop.gov.pt/schemas/IdentityFederation/Toolkit/2006/11", "IDFedValidateWellKnownFactsResponse");
    
    private CombinedSerializer ns1_IDFedValidateWellKnownFactsResponse_TYPE_QNAMEjavax$2e$xml$2e$soap$2e$SOAPElement_Serializer;
    private CombinedSerializer myns1_AttributedURI__AttributedURI_LiteralSerializer;
    private static final QName ns1_RelatesTo_QNAME = new QName("http://www.w3.org/2005/08/addressing", "RelatesTo");
    //carla inicio
    private static final QName ns1_MessageID_QNAME = new QName("http://www.w3.org/2005/08/addressing", "MessageID");
    private static final QName ns1_Action_QNAME = new QName("http://www.w3.org/2005/08/addressing", "Action");
    private static final QName ns1_To_QNAME = new QName("http://www.w3.org/2005/08/addressing", "To");
    //carla fim
    private static final QName ns1_AttributedURI_TYPE_QNAME = new QName("http://www.w3.org/2005/08/addressing", "AttributedURI");    

    private static final String[] myNamespace_declarations =
                                        new String[] {
                                            "ns0", "http://www.interop.gov.pt/schemas/FedId/2010/01",
                                            "wsa", "http://www.w3.org/2005/08/addressing"
                                        };
    
    private static final QName[] understoodHeaderNames = new QName[] {  };
    
}
